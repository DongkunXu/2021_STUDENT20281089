
Try_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134f4  0800bdd0  0800bdd0  0001bdd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f2c4  0801f2c4  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801f2c4  0801f2c4  0002f2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f2cc  0801f2cc  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f2cc  0801f2cc  0002f2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f2d0  0801f2d0  0002f2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801f2d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002190  200001e4  0801f4b8  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002374  0801f4b8  00032374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224ba  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000415d  00000000  00000000  000526ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00056830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  00057cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa35  00000000  00000000  00059090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192c4  00000000  00000000  00083ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a3ca  00000000  00000000  0009cd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  001a7153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b58  00000000  00000000  001a721c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003c05  00000000  00000000  001add74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bdb8 	.word	0x0800bdb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800bdb8 	.word	0x0800bdb8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <Fourier_Function>:
#include "arm_math.h"

UART_HandleTypeDef huart2;

float Fourier_Function(float32_t Initial_Array[])
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b09a      	sub	sp, #104	; 0x68
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	466b      	mov	r3, sp
 8000ffa:	461d      	mov	r5, r3
		 //Length used for Input and output array for Fourier transform
		  uint16_t Length = 2048;
 8000ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001000:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

		  //Input and output array for Fourier transform
		  //float32_t Input_Array[Length];
		  float32_t Output_Array[Length];
 8001004:	f8b7 4062 	ldrh.w	r4, [r7, #98]	; 0x62
 8001008:	4623      	mov	r3, r4
 800100a:	3b01      	subs	r3, #1
 800100c:	667b      	str	r3, [r7, #100]	; 0x64
 800100e:	b2a0      	uxth	r0, r4
 8001010:	f04f 0100 	mov.w	r1, #0
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	014b      	lsls	r3, r1, #5
 800101e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001022:	0142      	lsls	r2, r0, #5
 8001024:	b2a0      	uxth	r0, r4
 8001026:	f04f 0100 	mov.w	r1, #0
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	014b      	lsls	r3, r1, #5
 8001034:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001038:	0142      	lsls	r2, r0, #5
 800103a:	4623      	mov	r3, r4
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	3307      	adds	r3, #7
 8001040:	08db      	lsrs	r3, r3, #3
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	ebad 0d03 	sub.w	sp, sp, r3
 8001048:	466b      	mov	r3, sp
 800104a:	3303      	adds	r3, #3
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	65fb      	str	r3, [r7, #92]	; 0x5c

		  //Array to hold the complex magnitudes
		  float32_t Mag_Array[Length/2];
 8001052:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001056:	085b      	lsrs	r3, r3, #1
 8001058:	b29b      	uxth	r3, r3
 800105a:	461c      	mov	r4, r3
 800105c:	1e63      	subs	r3, r4, #1
 800105e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001060:	4623      	mov	r3, r4
 8001062:	4618      	mov	r0, r3
 8001064:	f04f 0100 	mov.w	r1, #0
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	014b      	lsls	r3, r1, #5
 8001072:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001076:	0142      	lsls	r2, r0, #5
 8001078:	4623      	mov	r3, r4
 800107a:	4618      	mov	r0, r3
 800107c:	f04f 0100 	mov.w	r1, #0
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	014b      	lsls	r3, r1, #5
 800108a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800108e:	0142      	lsls	r2, r0, #5
 8001090:	4623      	mov	r3, r4
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	3307      	adds	r3, #7
 8001096:	08db      	lsrs	r3, r3, #3
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	ebad 0d03 	sub.w	sp, sp, r3
 800109e:	466b      	mov	r3, sp
 80010a0:	3303      	adds	r3, #3
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	657b      	str	r3, [r7, #84]	; 0x54

		  //Setup arm_rfft_fast_instance_f32 instance
		  static arm_rfft_fast_instance_f32 FFT_Instance;

		  //Instantiate arm_rfft_fast_instance_f32 instance
		  arm_rfft_fast_init_f32(&FFT_Instance, Length);
 80010a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80010ac:	4619      	mov	r1, r3
 80010ae:	482a      	ldr	r0, [pc, #168]	; (8001158 <Fourier_Function+0x168>)
 80010b0:	f005 f942 	bl	8006338 <arm_rfft_fast_init_f32>

		  //Call the arm_rfft_fast_f32 function to perform Fourier transform
		  arm_rfft_fast_f32(&FFT_Instance, Initial_Array, &Output_Array, 0);
 80010b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010b6:	2300      	movs	r3, #0
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4827      	ldr	r0, [pc, #156]	; (8001158 <Fourier_Function+0x168>)
 80010bc:	f005 fa20 	bl	8006500 <arm_rfft_fast_f32>

		  // - calculates mangnitude of each bin
		  arm_cmplx_mag_f32(Output_Array, Mag_Array, Length/2);
 80010c0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80010c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80010c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80010c8:	085b      	lsrs	r3, r3, #1
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	f005 fdf5 	bl	8006cbc <arm_cmplx_mag_f32>

		  //Remove DC
		  Mag_Array[0] = 0;
 80010d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]

		  // Remove indexes 0 to 10 by setting Output
		  // Remove maybe 1000+

		  //arm_max_f32 - returns index of largest amplitude bin
		  arm_max_f32(Mag_Array, Length/2, &maxValue, &maxValueIndex);
 80010da:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80010dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80010e0:	085b      	lsrs	r3, r3, #1
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4619      	mov	r1, r3
 80010e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80010ee:	f004 ffef 	bl	80060d0 <arm_max_f32>
		  float Peak_Freq;
		  Peak_Freq=(maxValueIndex*10000)/Length;
 80010f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80010f8:	fb02 f203 	mul.w	r2, r2, r3
 80010fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001100:	fb92 f3f3 	sdiv	r3, r2, r3
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		  //uartBufferLength = sprintf(uartBuffer, "Max Value: %i\n",maxValueIndex);
		  //HAL_UART_Transmit(&huart2, (uint8_t *)uartBuffer, uartBufferLength, 100);

		  //Calculate velocity from freq value referred to by the index (Mag_Array is ordered in 1Hz steps)
		  //So the index value is the same as the freq value.
		  float Velocity = (3*Peak_Freq)/(2*10.587*10);
 8001110:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001114:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111c:	ee17 0a90 	vmov	r0, s15
 8001120:	f7ff fa12 	bl	8000548 <__aeabi_f2d>
 8001124:	a30a      	add	r3, pc, #40	; (adr r3, 8001150 <Fourier_Function+0x160>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff fb8f 	bl	800084c <__aeabi_ddiv>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fd57 	bl	8000be8 <__aeabi_d2f>
 800113a:	4603      	mov	r3, r0
 800113c:	64fb      	str	r3, [r7, #76]	; 0x4c

		  return Velocity;
 800113e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001140:	46ad      	mov	sp, r5
 8001142:	ee07 3a90 	vmov	s15, r3
}
 8001146:	eeb0 0a67 	vmov.f32	s0, s15
 800114a:	3768      	adds	r7, #104	; 0x68
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	147ae148 	.word	0x147ae148
 8001154:	406a77ae 	.word	0x406a77ae
 8001158:	20000200 	.word	0x20000200

0800115c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800117e:	4b2f      	ldr	r3, [pc, #188]	; (800123c <MX_ADC1_Init+0xe0>)
 8001180:	4a2f      	ldr	r2, [pc, #188]	; (8001240 <MX_ADC1_Init+0xe4>)
 8001182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <MX_ADC1_Init+0xe0>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <MX_ADC1_Init+0xe0>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001190:	4b2a      	ldr	r3, [pc, #168]	; (800123c <MX_ADC1_Init+0xe0>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <MX_ADC1_Init+0xe0>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <MX_ADC1_Init+0xe0>)
 800119e:	2204      	movs	r2, #4
 80011a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <MX_ADC1_Init+0xe0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <MX_ADC1_Init+0xe0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <MX_ADC1_Init+0xe0>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_ADC1_Init+0xe0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_ADC1_Init+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_ADC1_Init+0xe0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_ADC1_Init+0xe0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_ADC1_Init+0xe0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_ADC1_Init+0xe0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011de:	4817      	ldr	r0, [pc, #92]	; (800123c <MX_ADC1_Init+0xe0>)
 80011e0:	f000 fefc 	bl	8001fdc <HAL_ADC_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011ea:	f000 f9d5 	bl	8001598 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	4810      	ldr	r0, [pc, #64]	; (800123c <MX_ADC1_Init+0xe0>)
 80011fa:	f002 f93d 	bl	8003478 <HAL_ADCEx_MultiModeConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001204:	f000 f9c8 	bl	8001598 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_ADC1_Init+0xe8>)
 800120a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800120c:	2306      	movs	r3, #6
 800120e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8001210:	2303      	movs	r3, #3
 8001212:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001214:	237f      	movs	r3, #127	; 0x7f
 8001216:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001218:	2304      	movs	r3, #4
 800121a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_ADC1_Init+0xe0>)
 8001226:	f001 fb61 	bl	80028ec <HAL_ADC_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001230:	f000 f9b2 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200002ac 	.word	0x200002ac
 8001240:	50040000 	.word	0x50040000
 8001244:	10c00010 	.word	0x10c00010

08001248 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0ac      	sub	sp, #176	; 0xb0
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2288      	movs	r2, #136	; 0x88
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f006 f935 	bl	80074d8 <memset>
  if(adcHandle->Instance==ADC1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a2b      	ldr	r2, [pc, #172]	; (8001320 <HAL_ADC_MspInit+0xd8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d14e      	bne.n	8001316 <HAL_ADC_MspInit+0xce>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001278:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800127c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800127e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800128a:	2301      	movs	r3, #1
 800128c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800128e:	2308      	movs	r3, #8
 8001290:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001292:	2307      	movs	r3, #7
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001296:	2302      	movs	r3, #2
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800129a:	2302      	movs	r3, #2
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800129e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fab9 	bl	8004820 <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80012b4:	f000 f970 	bl	8001598 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_ADC_MspInit+0xdc>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012bc:	4a19      	ldr	r2, [pc, #100]	; (8001324 <HAL_ADC_MspInit+0xdc>)
 80012be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_ADC_MspInit+0xdc>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_ADC_MspInit+0xdc>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	4a13      	ldr	r2, [pc, #76]	; (8001324 <HAL_ADC_MspInit+0xdc>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_ADC_MspInit+0xdc>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012e8:	230c      	movs	r3, #12
 80012ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012ee:	230b      	movs	r3, #11
 80012f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012fe:	4619      	mov	r1, r3
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <HAL_ADC_MspInit+0xe0>)
 8001302:	f002 fa7b 	bl	80037fc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2012      	movs	r0, #18
 800130c:	f002 fa3f 	bl	800378e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001310:	2012      	movs	r0, #18
 8001312:	f002 fa58 	bl	80037c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001316:	bf00      	nop
 8001318:	37b0      	adds	r7, #176	; 0xb0
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	50040000 	.word	0x50040000
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800

0800132c <get_adc_value>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
float get_adc_value(void){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
	float a;
	HAL_ADC_Start(&hadc1);
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <get_adc_value+0x34>)
 8001334:	f000 ffa8 	bl	8002288 <HAL_ADC_Start>
	a=HAL_ADC_GetValue(&hadc1);
 8001338:	4809      	ldr	r0, [pc, #36]	; (8001360 <get_adc_value+0x34>)
 800133a:	f001 f892 	bl	8002462 <HAL_ADC_GetValue>
 800133e:	ee07 0a90 	vmov	s15, r0
 8001342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001346:	edc7 7a01 	vstr	s15, [r7, #4]
//	a = -a;
	HAL_ADC_Stop(&hadc1);
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <get_adc_value+0x34>)
 800134c:	f001 f856 	bl	80023fc <HAL_ADC_Stop>
	return a;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	ee07 3a90 	vmov	s15, r3
}
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200002ac 	.word	0x200002ac

08001364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <MX_GPIO_Init+0xc4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <MX_GPIO_Init+0xc4>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <MX_GPIO_Init+0xc4>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001392:	4b25      	ldr	r3, [pc, #148]	; (8001428 <MX_GPIO_Init+0xc4>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4a24      	ldr	r2, [pc, #144]	; (8001428 <MX_GPIO_Init+0xc4>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <MX_GPIO_Init+0xc4>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_GPIO_Init+0xc4>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <MX_GPIO_Init+0xc4>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_GPIO_Init+0xc4>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_GPIO_Init+0xc4>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a18      	ldr	r2, [pc, #96]	; (8001428 <MX_GPIO_Init+0xc4>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_GPIO_Init+0xc4>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	2120      	movs	r1, #32
 80013de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e2:	f002 fbb5 	bl	8003b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_GPIO_Init+0xc8>)
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <MX_GPIO_Init+0xcc>)
 80013fc:	f002 f9fe 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8001400:	2320      	movs	r3, #32
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001408:	2301      	movs	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f002 f9ef 	bl	80037fc <HAL_GPIO_Init>

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	10210000 	.word	0x10210000
 8001430:	48000800 	.word	0x48000800

08001434 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2 , (uint8_t *)&ch, 1, 0xFFFF);
 800143c:	1d39      	adds	r1, r7, #4
 800143e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001442:	2201      	movs	r2, #1
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <__io_putchar+0x20>)
 8001446:	f004 f9bd 	bl	80057c4 <HAL_UART_Transmit>
    return ch;
 800144a:	687b      	ldr	r3, [r7, #4]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000228 	.word	0x20000228

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f000 fafe 	bl	8001a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001460:	f000 f80e 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001464:	f7ff ff7e 	bl	8001364 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001468:	f000 fa42 	bl	80018f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800146c:	f7ff fe76 	bl	800115c <MX_ADC1_Init>
  MX_TIM16_Init();
 8001470:	f000 f9f2 	bl	8001858 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8001474:	4801      	ldr	r0, [pc, #4]	; (800147c <main+0x24>)
 8001476:	f003 fee7 	bl	8005248 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800147a:	e7fe      	b.n	800147a <main+0x22>
 800147c:	20002314 	.word	0x20002314

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b096      	sub	sp, #88	; 0x58
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	2244      	movs	r2, #68	; 0x44
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f006 f822 	bl	80074d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014a6:	f002 fb79 	bl	8003b9c <HAL_PWREx_ControlVoltageScaling>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014b0:	f000 f872 	bl	8001598 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b4:	2302      	movs	r3, #2
 80014b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014be:	2310      	movs	r3, #16
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c2:	2302      	movs	r3, #2
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c6:	2302      	movs	r3, #2
 80014c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014ca:	2301      	movs	r3, #1
 80014cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014ce:	230a      	movs	r3, #10
 80014d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014d2:	2307      	movs	r3, #7
 80014d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014da:	2302      	movs	r3, #2
 80014dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 fbb0 	bl	8003c48 <HAL_RCC_OscConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014ee:	f000 f853 	bl	8001598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f2:	230f      	movs	r3, #15
 80014f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f6:	2303      	movs	r3, #3
 80014f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001506:	463b      	mov	r3, r7
 8001508:	2104      	movs	r1, #4
 800150a:	4618      	mov	r0, r3
 800150c:	f002 ff82 	bl	8004414 <HAL_RCC_ClockConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001516:	f000 f83f 	bl	8001598 <Error_Handler>
  }
}
 800151a:	bf00      	nop
 800151c:	3758      	adds	r7, #88	; 0x58
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	if (htim == &htim16){
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a16      	ldr	r2, [pc, #88]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d124      	bne.n	800157e <HAL_TIM_PeriodElapsedCallback+0x5a>
		adc_List[x] = get_adc_value();
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001536:	681c      	ldr	r4, [r3, #0]
 8001538:	f7ff fef8 	bl	800132c <get_adc_value>
 800153c:	eef0 7a40 	vmov.f32	s15, s0
 8001540:	4a13      	ldr	r2, [pc, #76]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001542:	00a3      	lsls	r3, r4, #2
 8001544:	4413      	add	r3, r2
 8001546:	edc3 7a00 	vstr	s15, [r3]
		x=x+1;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001552:	6013      	str	r3, [r2, #0]
		float Velocity;
		if (x>2048){
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800155c:	dd0f      	ble.n	800157e <HAL_TIM_PeriodElapsedCallback+0x5a>
			//for (int i=0;i<2048;i++){
				//  printf("\n%f",adc_List[i]);
				//}
			Velocity = Fourier_Function(adc_List);
 800155e:	480c      	ldr	r0, [pc, #48]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001560:	f7ff fd46 	bl	8000ff0 <Fourier_Function>
 8001564:	ed87 0a03 	vstr	s0, [r7, #12]
			printf("\nVelocity: %f",Velocity);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7fe ffed 	bl	8000548 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4808      	ldr	r0, [pc, #32]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001574:	f006 fe32 	bl	80081dc <iprintf>
			x = 0;
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
		}
		//}
		//printf("%d---%d\n",x,adc_List[x]);
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}
}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	bd90      	pop	{r4, r7, pc}
 8001586:	bf00      	nop
 8001588:	20002314 	.word	0x20002314
 800158c:	20000218 	.word	0x20000218
 8001590:	20000310 	.word	0x20000310
 8001594:	0800bdd0 	.word	0x0800bdd0

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <Error_Handler+0x8>
	...

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_MspInit+0x44>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_MspInit+0x44>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6613      	str	r3, [r2, #96]	; 0x60
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_MspInit+0x44>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_MspInit+0x44>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_MspInit+0x44>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6593      	str	r3, [r2, #88]	; 0x58
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_MspInit+0x44>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <NMI_Handler+0x4>

080015f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <MemManage_Handler+0x4>

080015fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler+0x4>

0800160a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001638:	f000 fa6c 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <ADC1_2_IRQHandler+0x10>)
 8001646:	f000 ff19 	bl	800247c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200002ac 	.word	0x200002ac

08001654 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800165a:	f003 fe65 	bl	8005328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20002314 	.word	0x20002314

08001668 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
	return 1;
 800166c:	2301      	movs	r3, #1
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_kill>:

int _kill(int pid, int sig)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001682:	f005 feff 	bl	8007484 <__errno>
 8001686:	4603      	mov	r3, r0
 8001688:	2216      	movs	r2, #22
 800168a:	601a      	str	r2, [r3, #0]
	return -1;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_exit>:

void _exit (int status)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ffe7 	bl	8001678 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016aa:	e7fe      	b.n	80016aa <_exit+0x12>

080016ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e00a      	b.n	80016d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016be:	f3af 8000 	nop.w
 80016c2:	4601      	mov	r1, r0
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	b2ca      	uxtb	r2, r1
 80016cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbf0      	blt.n	80016be <_read+0x12>
	}

return len;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e009      	b.n	800170c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60ba      	str	r2, [r7, #8]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fe97 	bl	8001434 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf1      	blt.n	80016f8 <_write+0x12>
	}
	return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_close>:

int _close(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	605a      	str	r2, [r3, #4]
	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_isatty>:

int _isatty(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	return 1;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f005 fe64 	bl	8007484 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20018000 	.word	0x20018000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	2000021c 	.word	0x2000021c
 80017f0:	20002378 	.word	0x20002378

080017f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <SystemInit+0x5c>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <SystemInit+0x5c>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <SystemInit+0x60>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <SystemInit+0x60>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <SystemInit+0x60>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <SystemInit+0x60>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <SystemInit+0x60>)
 8001820:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001824:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001828:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <SystemInit+0x60>)
 800182c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001830:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <SystemInit+0x60>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a07      	ldr	r2, [pc, #28]	; (8001854 <SystemInit+0x60>)
 8001838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <SystemInit+0x60>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00
 8001854:	40021000 	.word	0x40021000

08001858 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_TIM16_Init+0x44>)
 800185e:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <MX_TIM16_Init+0x48>)
 8001860:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_TIM16_Init+0x44>)
 8001864:	224f      	movs	r2, #79	; 0x4f
 8001866:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_TIM16_Init+0x44>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MX_TIM16_Init+0x44>)
 8001870:	2263      	movs	r2, #99	; 0x63
 8001872:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_TIM16_Init+0x44>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <MX_TIM16_Init+0x44>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_TIM16_Init+0x44>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_TIM16_Init+0x44>)
 8001888:	f003 fc86 	bl	8005198 <HAL_TIM_Base_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001892:	f7ff fe81 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20002314 	.word	0x20002314
 80018a0:	40014400 	.word	0x40014400

080018a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <HAL_TIM_Base_MspInit+0x44>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d113      	bne.n	80018de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_TIM_Base_MspInit+0x48>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <HAL_TIM_Base_MspInit+0x48>)
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	6613      	str	r3, [r2, #96]	; 0x60
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_TIM_Base_MspInit+0x48>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2019      	movs	r0, #25
 80018d4:	f001 ff5b 	bl	800378e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018d8:	2019      	movs	r0, #25
 80018da:	f001 ff74 	bl	80037c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40014400 	.word	0x40014400
 80018ec:	40021000 	.word	0x40021000

080018f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_USART2_UART_Init+0x58>)
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <MX_USART2_UART_Init+0x5c>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <MX_USART2_UART_Init+0x58>)
 80018fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_USART2_UART_Init+0x58>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_USART2_UART_Init+0x58>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_USART2_UART_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_USART2_UART_Init+0x58>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_USART2_UART_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_USART2_UART_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_USART2_UART_Init+0x58>)
 8001928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800192c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_USART2_UART_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_USART2_UART_Init+0x58>)
 8001936:	f003 fef7 	bl	8005728 <HAL_UART_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8001940:	f7ff fe2a 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000228 	.word	0x20000228
 800194c:	40004400 	.word	0x40004400

08001950 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b0ac      	sub	sp, #176	; 0xb0
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2288      	movs	r2, #136	; 0x88
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f005 fdb1 	bl	80074d8 <memset>
  if(uartHandle->Instance==USART2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <HAL_UART_MspInit+0xb0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d13b      	bne.n	80019f8 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001980:	2302      	movs	r3, #2
 8001982:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001984:	2300      	movs	r3, #0
 8001986:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4618      	mov	r0, r3
 800198e:	f002 ff47 	bl	8004820 <HAL_RCCEx_PeriphCLKConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001998:	f7ff fdfe 	bl	8001598 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_UART_MspInit+0xb4>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a0:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_UART_MspInit+0xb4>)
 80019a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a6:	6593      	str	r3, [r2, #88]	; 0x58
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_UART_MspInit+0xb4>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_UART_MspInit+0xb4>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b8:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <HAL_UART_MspInit+0xb4>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_UART_MspInit+0xb4>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019cc:	230c      	movs	r3, #12
 80019ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e4:	2307      	movs	r3, #7
 80019e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019ee:	4619      	mov	r1, r3
 80019f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f4:	f001 ff02 	bl	80037fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019f8:	bf00      	nop
 80019fa:	37b0      	adds	r7, #176	; 0xb0
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40004400 	.word	0x40004400
 8001a04:	40021000 	.word	0x40021000

08001a08 <Reset_Handler>:
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a40 <LoopForever+0x2>
 8001a0c:	f7ff fef2 	bl	80017f4 <SystemInit>
 8001a10:	2100      	movs	r1, #0
 8001a12:	e003      	b.n	8001a1c <LoopCopyDataInit>

08001a14 <CopyDataInit>:
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <LoopForever+0x6>)
 8001a16:	585b      	ldr	r3, [r3, r1]
 8001a18:	5043      	str	r3, [r0, r1]
 8001a1a:	3104      	adds	r1, #4

08001a1c <LoopCopyDataInit>:
 8001a1c:	480a      	ldr	r0, [pc, #40]	; (8001a48 <LoopForever+0xa>)
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <LoopForever+0xe>)
 8001a20:	1842      	adds	r2, r0, r1
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d3f6      	bcc.n	8001a14 <CopyDataInit>
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <LoopForever+0x12>)
 8001a28:	e002      	b.n	8001a30 <LoopFillZerobss>

08001a2a <FillZerobss>:
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f842 3b04 	str.w	r3, [r2], #4

08001a30 <LoopFillZerobss>:
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <LoopForever+0x16>)
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d3f9      	bcc.n	8001a2a <FillZerobss>
 8001a36:	f005 fd2b 	bl	8007490 <__libc_init_array>
 8001a3a:	f7ff fd0d 	bl	8001458 <main>

08001a3e <LoopForever>:
 8001a3e:	e7fe      	b.n	8001a3e <LoopForever>
 8001a40:	20018000 	.word	0x20018000
 8001a44:	0801f2d4 	.word	0x0801f2d4
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	200001e4 	.word	0x200001e4
 8001a50:	200001e4 	.word	0x200001e4
 8001a54:	20002374 	.word	0x20002374

08001a58 <ADC3_IRQHandler>:
 8001a58:	e7fe      	b.n	8001a58 <ADC3_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_Init+0x3c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HAL_Init+0x3c>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a72:	2003      	movs	r0, #3
 8001a74:	f001 fe80 	bl	8003778 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f000 f80f 	bl	8001a9c <HAL_InitTick>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	e001      	b.n	8001a8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a8a:	f7ff fd8b 	bl	80015a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40022000 	.word	0x40022000

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_InitTick+0x6c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d023      	beq.n	8001af8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_InitTick+0x70>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_InitTick+0x6c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fe8b 	bl	80037e2 <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10f      	bne.n	8001af2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d809      	bhi.n	8001aec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f001 fe55 	bl	800378e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_InitTick+0x74>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e007      	b.n	8001afc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e004      	b.n	8001afc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	e001      	b.n	8001afc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008
 8001b38:	20002360 	.word	0x20002360

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20002360 	.word	0x20002360

08001b54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3360      	adds	r3, #96	; 0x60
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <LL_ADC_SetOffset+0x44>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	4313      	orrs	r3, r2
 8001bec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bf4:	bf00      	nop
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	03fff000 	.word	0x03fff000

08001c04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3360      	adds	r3, #96	; 0x60
 8001c12:	461a      	mov	r2, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3360      	adds	r3, #96	; 0x60
 8001c40:	461a      	mov	r2, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c5a:	bf00      	nop
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3330      	adds	r3, #48	; 0x30
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	4413      	add	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	211f      	movs	r1, #31
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0e9b      	lsrs	r3, r3, #26
 8001cc4:	f003 011f 	and.w	r1, r3, #31
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cd8:	bf00      	nop
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b087      	sub	sp, #28
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3314      	adds	r3, #20
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	0e5b      	lsrs	r3, r3, #25
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	4413      	add	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	0d1b      	lsrs	r3, r3, #20
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	2107      	movs	r1, #7
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	401a      	ands	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	0d1b      	lsrs	r3, r3, #20
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d54:	bf00      	nop
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f003 0318 	and.w	r3, r3, #24
 8001d82:	4908      	ldr	r1, [pc, #32]	; (8001da4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d84:	40d9      	lsrs	r1, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	400b      	ands	r3, r1
 8001d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	0007ffff 	.word	0x0007ffff

08001da8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 031f 	and.w	r3, r3, #31
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6093      	str	r3, [r2, #8]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e18:	d101      	bne.n	8001e1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e68:	d101      	bne.n	8001e6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e90:	f043 0201 	orr.w	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eb8:	f043 0202 	orr.w	r2, r3, #2
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <LL_ADC_IsEnabled+0x18>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <LL_ADC_IsEnabled+0x1a>
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d101      	bne.n	8001f0a <LL_ADC_IsDisableOngoing+0x18>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <LL_ADC_IsDisableOngoing+0x1a>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f2c:	f043 0204 	orr.w	r2, r3, #4
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f54:	f043 0210 	orr.w	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d101      	bne.n	8001f80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa2:	f043 0220 	orr.w	r2, r3, #32
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d101      	bne.n	8001fce <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e136      	b.n	8002264 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff f91f 	bl	8001248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fef1 	bl	8001e04 <LL_ADC_IsDeepPowerDownEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d004      	beq.n	8002032 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fed7 	bl	8001de0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff0c 	bl	8001e54 <LL_ADC_IsInternalRegulatorEnabled>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d115      	bne.n	800206e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fef0 	bl	8001e2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800204c:	4b87      	ldr	r3, [pc, #540]	; (800226c <HAL_ADC_Init+0x290>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	4a87      	ldr	r2, [pc, #540]	; (8002270 <HAL_ADC_Init+0x294>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	099b      	lsrs	r3, r3, #6
 800205a:	3301      	adds	r3, #1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002060:	e002      	b.n	8002068 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3b01      	subs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff feee 	bl	8001e54 <LL_ADC_IsInternalRegulatorEnabled>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff62 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 80020a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 80cf 	bne.w	8002252 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 80cb 	bne.w	8002252 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020c4:	f043 0202 	orr.w	r2, r3, #2
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fefb 	bl	8001ecc <LL_ADC_IsEnabled>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d115      	bne.n	8002108 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020dc:	4865      	ldr	r0, [pc, #404]	; (8002274 <HAL_ADC_Init+0x298>)
 80020de:	f7ff fef5 	bl	8001ecc <LL_ADC_IsEnabled>
 80020e2:	4604      	mov	r4, r0
 80020e4:	4864      	ldr	r0, [pc, #400]	; (8002278 <HAL_ADC_Init+0x29c>)
 80020e6:	f7ff fef1 	bl	8001ecc <LL_ADC_IsEnabled>
 80020ea:	4603      	mov	r3, r0
 80020ec:	431c      	orrs	r4, r3
 80020ee:	4863      	ldr	r0, [pc, #396]	; (800227c <HAL_ADC_Init+0x2a0>)
 80020f0:	f7ff feec 	bl	8001ecc <LL_ADC_IsEnabled>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4323      	orrs	r3, r4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4619      	mov	r1, r3
 8002102:	485f      	ldr	r0, [pc, #380]	; (8002280 <HAL_ADC_Init+0x2a4>)
 8002104:	f7ff fd26 	bl	8001b54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7e5b      	ldrb	r3, [r3, #25]
 800210c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002112:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002118:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800211e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002126:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d106      	bne.n	8002144 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	3b01      	subs	r3, #1
 800213c:	045b      	lsls	r3, r3, #17
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	d009      	beq.n	8002160 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	4b47      	ldr	r3, [pc, #284]	; (8002284 <HAL_ADC_Init+0x2a8>)
 8002168:	4013      	ands	r3, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	69b9      	ldr	r1, [r7, #24]
 8002170:	430b      	orrs	r3, r1
 8002172:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fef5 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 800217e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff16 	bl	8001fb6 <LL_ADC_INJ_IsConversionOngoing>
 800218a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d13d      	bne.n	800220e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d13a      	bne.n	800220e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800219c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021a4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021b4:	f023 0302 	bic.w	r3, r3, #2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	69b9      	ldr	r1, [r7, #24]
 80021be:	430b      	orrs	r3, r1
 80021c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d118      	bne.n	80021fe <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021d6:	f023 0304 	bic.w	r3, r3, #4
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021e2:	4311      	orrs	r1, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021e8:	4311      	orrs	r1, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021ee:	430a      	orrs	r2, r1
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	611a      	str	r2, [r3, #16]
 80021fc:	e007      	b.n	800220e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d10c      	bne.n	8002230 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	f023 010f 	bic.w	r1, r3, #15
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	1e5a      	subs	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
 800222e:	e007      	b.n	8002240 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 020f 	bic.w	r2, r2, #15
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002244:	f023 0303 	bic.w	r3, r3, #3
 8002248:	f043 0201 	orr.w	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
 8002250:	e007      	b.n	8002262 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f043 0210 	orr.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002262:	7ffb      	ldrb	r3, [r7, #31]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3724      	adds	r7, #36	; 0x24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd90      	pop	{r4, r7, pc}
 800226c:	20000000 	.word	0x20000000
 8002270:	053e2d63 	.word	0x053e2d63
 8002274:	50040000 	.word	0x50040000
 8002278:	50040100 	.word	0x50040100
 800227c:	50040200 	.word	0x50040200
 8002280:	50040300 	.word	0x50040300
 8002284:	fff0c007 	.word	0xfff0c007

08002288 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002290:	4857      	ldr	r0, [pc, #348]	; (80023f0 <HAL_ADC_Start+0x168>)
 8002292:	f7ff fd89 	bl	8001da8 <LL_ADC_GetMultimode>
 8002296:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fe63 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 809c 	bne.w	80023e2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_Start+0x30>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e097      	b.n	80023e8 <HAL_ADC_Start+0x160>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 ffbf 	bl	8003244 <ADC_Enable>
 80022c6:	4603      	mov	r3, r0
 80022c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f040 8083 	bne.w	80023d8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a42      	ldr	r2, [pc, #264]	; (80023f4 <HAL_ADC_Start+0x16c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d002      	beq.n	80022f6 <HAL_ADC_Start+0x6e>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	e000      	b.n	80022f8 <HAL_ADC_Start+0x70>
 80022f6:	4b40      	ldr	r3, [pc, #256]	; (80023f8 <HAL_ADC_Start+0x170>)
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d002      	beq.n	8002306 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d105      	bne.n	8002312 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231e:	d106      	bne.n	800232e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	f023 0206 	bic.w	r2, r3, #6
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	659a      	str	r2, [r3, #88]	; 0x58
 800232c:	e002      	b.n	8002334 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	221c      	movs	r2, #28
 800233a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <HAL_ADC_Start+0x16c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d002      	beq.n	8002354 <HAL_ADC_Start+0xcc>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	e000      	b.n	8002356 <HAL_ADC_Start+0xce>
 8002354:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <HAL_ADC_Start+0x170>)
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	4293      	cmp	r3, r2
 800235c:	d008      	beq.n	8002370 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b05      	cmp	r3, #5
 8002368:	d002      	beq.n	8002370 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b09      	cmp	r3, #9
 800236e:	d114      	bne.n	800239a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002386:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fdc0 	bl	8001f18 <LL_ADC_REG_StartConversion>
 8002398:	e025      	b.n	80023e6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <HAL_ADC_Start+0x16c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d002      	beq.n	80023b6 <HAL_ADC_Start+0x12e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e000      	b.n	80023b8 <HAL_ADC_Start+0x130>
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_ADC_Start+0x170>)
 80023b8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00f      	beq.n	80023e6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
 80023d6:	e006      	b.n	80023e6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80023e0:	e001      	b.n	80023e6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023e2:	2302      	movs	r3, #2
 80023e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	50040300 	.word	0x50040300
 80023f4:	50040100 	.word	0x50040100
 80023f8:	50040000 	.word	0x50040000

080023fc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_ADC_Stop+0x16>
 800240e:	2302      	movs	r3, #2
 8002410:	e023      	b.n	800245a <HAL_ADC_Stop+0x5e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800241a:	2103      	movs	r1, #3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fe55 	bl	80030cc <ADC_ConversionStop>
 8002422:	4603      	mov	r3, r0
 8002424:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d111      	bne.n	8002450 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 ff6b 	bl	8003308 <ADC_Disable>
 8002432:	4603      	mov	r3, r0
 8002434:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	f043 0201 	orr.w	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002498:	4882      	ldr	r0, [pc, #520]	; (80026a4 <HAL_ADC_IRQHandler+0x228>)
 800249a:	f7ff fc85 	bl	8001da8 <LL_ADC_GetMultimode>
 800249e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d017      	beq.n	80024da <HAL_ADC_IRQHandler+0x5e>
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d012      	beq.n	80024da <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 ffc8 	bl	8003462 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2202      	movs	r2, #2
 80024d8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <HAL_ADC_IRQHandler+0x72>
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10a      	bne.n	8002504 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8083 	beq.w	8002600 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d07d      	beq.n	8002600 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fba0 	bl	8001c66 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d062      	beq.n	80025f2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a5d      	ldr	r2, [pc, #372]	; (80026a8 <HAL_ADC_IRQHandler+0x22c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d002      	beq.n	800253c <HAL_ADC_IRQHandler+0xc0>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e000      	b.n	800253e <HAL_ADC_IRQHandler+0xc2>
 800253c:	4b5b      	ldr	r3, [pc, #364]	; (80026ac <HAL_ADC_IRQHandler+0x230>)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4293      	cmp	r3, r2
 8002544:	d008      	beq.n	8002558 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2b05      	cmp	r3, #5
 8002550:	d002      	beq.n	8002558 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b09      	cmp	r3, #9
 8002556:	d104      	bne.n	8002562 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	623b      	str	r3, [r7, #32]
 8002560:	e00c      	b.n	800257c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a50      	ldr	r2, [pc, #320]	; (80026a8 <HAL_ADC_IRQHandler+0x22c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d002      	beq.n	8002572 <HAL_ADC_IRQHandler+0xf6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	e000      	b.n	8002574 <HAL_ADC_IRQHandler+0xf8>
 8002572:	4b4e      	ldr	r3, [pc, #312]	; (80026ac <HAL_ADC_IRQHandler+0x230>)
 8002574:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d135      	bne.n	80025f2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b08      	cmp	r3, #8
 8002592:	d12e      	bne.n	80025f2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fce5 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d11a      	bne.n	80025da <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 020c 	bic.w	r2, r2, #12
 80025b2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d112      	bne.n	80025f2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
 80025d8:	e00b      	b.n	80025f2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f95c 	bl	80028b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	220c      	movs	r2, #12
 80025fe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <HAL_ADC_IRQHandler+0x198>
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 809f 	beq.w	800275e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8099 	beq.w	800275e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fb4b 	bl	8001ce4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800264e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fb06 	bl	8001c66 <LL_ADC_REG_IsTriggerSourceSWStart>
 800265a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_ADC_IRQHandler+0x22c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d002      	beq.n	800266c <HAL_ADC_IRQHandler+0x1f0>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	e000      	b.n	800266e <HAL_ADC_IRQHandler+0x1f2>
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_ADC_IRQHandler+0x230>)
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	4293      	cmp	r3, r2
 8002674:	d008      	beq.n	8002688 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b06      	cmp	r3, #6
 8002680:	d002      	beq.n	8002688 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b07      	cmp	r3, #7
 8002686:	d104      	bne.n	8002692 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	e013      	b.n	80026ba <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_ADC_IRQHandler+0x22c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d009      	beq.n	80026b0 <HAL_ADC_IRQHandler+0x234>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	e007      	b.n	80026b2 <HAL_ADC_IRQHandler+0x236>
 80026a2:	bf00      	nop
 80026a4:	50040300 	.word	0x50040300
 80026a8:	50040100 	.word	0x50040100
 80026ac:	50040000 	.word	0x50040000
 80026b0:	4b7d      	ldr	r3, [pc, #500]	; (80028a8 <HAL_ADC_IRQHandler+0x42c>)
 80026b2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d047      	beq.n	8002750 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_ADC_IRQHandler+0x25e>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d03f      	beq.n	8002750 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d13a      	bne.n	8002750 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d133      	bne.n	8002750 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d12e      	bne.n	8002750 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fc5d 	bl	8001fb6 <LL_ADC_INJ_IsConversionOngoing>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d11a      	bne.n	8002738 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002710:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d112      	bne.n	8002750 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	f043 0201 	orr.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
 8002736:	e00b      	b.n	8002750 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f043 0210 	orr.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fe5e 	bl	8003412 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2260      	movs	r2, #96	; 0x60
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b00      	cmp	r3, #0
 8002766:	d011      	beq.n	800278c <HAL_ADC_IRQHandler+0x310>
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00c      	beq.n	800278c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8a0 	bl	80028c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2280      	movs	r2, #128	; 0x80
 800278a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d012      	beq.n	80027bc <HAL_ADC_IRQHandler+0x340>
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00d      	beq.n	80027bc <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fe44 	bl	800343a <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d012      	beq.n	80027ec <HAL_ADC_IRQHandler+0x370>
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fe36 	bl	800344e <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d036      	beq.n	8002864 <HAL_ADC_IRQHandler+0x3e8>
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d031      	beq.n	8002864 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002808:	2301      	movs	r3, #1
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	e014      	b.n	8002838 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002814:	4825      	ldr	r0, [pc, #148]	; (80028ac <HAL_ADC_IRQHandler+0x430>)
 8002816:	f7ff fad5 	bl	8001dc4 <LL_ADC_GetMultiDMATransfer>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00b      	beq.n	8002838 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002820:	2301      	movs	r3, #1
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
 8002824:	e008      	b.n	8002838 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002834:	2301      	movs	r3, #1
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	2b01      	cmp	r3, #1
 800283c:	d10e      	bne.n	800285c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	f043 0202 	orr.w	r2, r3, #2
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f83e 	bl	80028d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2210      	movs	r2, #16
 8002862:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286a:	2b00      	cmp	r3, #0
 800286c:	d018      	beq.n	80028a0 <HAL_ADC_IRQHandler+0x424>
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	f043 0208 	orr.w	r2, r3, #8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002898:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fdc3 	bl	8003426 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80028a0:	bf00      	nop
 80028a2:	3728      	adds	r7, #40	; 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	50040000 	.word	0x50040000
 80028ac:	50040300 	.word	0x50040300

080028b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b0b6      	sub	sp, #216	; 0xd8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x22>
 800290a:	2302      	movs	r3, #2
 800290c:	e3c7      	b.n	800309e <HAL_ADC_ConfigChannel+0x7b2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fb24 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 83a8 	bne.w	8003078 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d824      	bhi.n	800297a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	3b02      	subs	r3, #2
 8002936:	2b03      	cmp	r3, #3
 8002938:	d81b      	bhi.n	8002972 <HAL_ADC_ConfigChannel+0x86>
 800293a:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <HAL_ADC_ConfigChannel+0x54>)
 800293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002940:	08002951 	.word	0x08002951
 8002944:	08002959 	.word	0x08002959
 8002948:	08002961 	.word	0x08002961
 800294c:	08002969 	.word	0x08002969
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	220c      	movs	r2, #12
 8002954:	605a      	str	r2, [r3, #4]
          break;
 8002956:	e011      	b.n	800297c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2212      	movs	r2, #18
 800295c:	605a      	str	r2, [r3, #4]
          break;
 800295e:	e00d      	b.n	800297c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2218      	movs	r2, #24
 8002964:	605a      	str	r2, [r3, #4]
          break;
 8002966:	e009      	b.n	800297c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296e:	605a      	str	r2, [r3, #4]
          break;
 8002970:	e004      	b.n	800297c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2206      	movs	r2, #6
 8002976:	605a      	str	r2, [r3, #4]
          break;
 8002978:	e000      	b.n	800297c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800297a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	f7ff f97f 	bl	8001c8c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fae8 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 8002998:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fb08 	bl	8001fb6 <LL_ADC_INJ_IsConversionOngoing>
 80029a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 81a6 	bne.w	8002d00 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 81a1 	bne.w	8002d00 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f7ff f99d 	bl	8001d0a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	08db      	lsrs	r3, r3, #3
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d00a      	beq.n	8002a08 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6919      	ldr	r1, [r3, #16]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a02:	f7ff f8db 	bl	8001bbc <LL_ADC_SetOffset>
 8002a06:	e17b      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff f8f8 	bl	8001c04 <LL_ADC_GetOffsetChannel>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x148>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f8ed 	bl	8001c04 <LL_ADC_GetOffsetChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	0e9b      	lsrs	r3, r3, #26
 8002a2e:	f003 021f 	and.w	r2, r3, #31
 8002a32:	e01e      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x186>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff f8e2 	bl	8001c04 <LL_ADC_GetOffsetChannel>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002a62:	2320      	movs	r3, #32
 8002a64:	e004      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002a66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x19e>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	0e9b      	lsrs	r3, r3, #26
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	e018      	b.n	8002abc <HAL_ADC_ConfigChannel+0x1d0>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002aae:	2320      	movs	r3, #32
 8002ab0:	e004      	b.n	8002abc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d106      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff f8b1 	bl	8001c30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff f895 	bl	8001c04 <LL_ADC_GetOffsetChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x20e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff f88a 	bl	8001c04 <LL_ADC_GetOffsetChannel>
 8002af0:	4603      	mov	r3, r0
 8002af2:	0e9b      	lsrs	r3, r3, #26
 8002af4:	f003 021f 	and.w	r2, r3, #31
 8002af8:	e01e      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x24c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff f87f 	bl	8001c04 <LL_ADC_GetOffsetChannel>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002b28:	2320      	movs	r3, #32
 8002b2a:	e004      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x264>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0e9b      	lsrs	r3, r3, #26
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	e018      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x296>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002b74:	2320      	movs	r3, #32
 8002b76:	e004      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d106      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f84e 	bl	8001c30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2102      	movs	r1, #2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff f832 	bl	8001c04 <LL_ADC_GetOffsetChannel>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x2d4>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2102      	movs	r1, #2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff f827 	bl	8001c04 <LL_ADC_GetOffsetChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	f003 021f 	and.w	r2, r3, #31
 8002bbe:	e01e      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x312>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff f81c 	bl	8001c04 <LL_ADC_GetOffsetChannel>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e004      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002bf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d105      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x32a>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	0e9b      	lsrs	r3, r3, #26
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	e016      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x358>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002c36:	2320      	movs	r3, #32
 8002c38:	e004      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d106      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe ffed 	bl	8001c30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2103      	movs	r1, #3
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe ffd1 	bl	8001c04 <LL_ADC_GetOffsetChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x396>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2103      	movs	r1, #3
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe ffc6 	bl	8001c04 <LL_ADC_GetOffsetChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	0e9b      	lsrs	r3, r3, #26
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	e017      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x3c6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2103      	movs	r1, #3
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe ffbb 	bl	8001c04 <LL_ADC_GetOffsetChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c9c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	e003      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d105      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x3de>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	0e9b      	lsrs	r3, r3, #26
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	e011      	b.n	8002cee <HAL_ADC_ConfigChannel+0x402>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cda:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e003      	b.n	8002cee <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d106      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2103      	movs	r1, #3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe ff98 	bl	8001c30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff f8e1 	bl	8001ecc <LL_ADC_IsEnabled>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f040 813f 	bne.w	8002f90 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6819      	ldr	r1, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f7ff f81e 	bl	8001d60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a8e      	ldr	r2, [pc, #568]	; (8002f64 <HAL_ADC_ConfigChannel+0x678>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	f040 8130 	bne.w	8002f90 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x46c>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2b09      	cmp	r3, #9
 8002d4e:	bf94      	ite	ls
 8002d50:	2301      	movls	r3, #1
 8002d52:	2300      	movhi	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e019      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x4a0>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d68:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d70:	2320      	movs	r3, #32
 8002d72:	e003      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	2b09      	cmp	r3, #9
 8002d84:	bf94      	ite	ls
 8002d86:	2301      	movls	r3, #1
 8002d88:	2300      	movhi	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d079      	beq.n	8002e84 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d107      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x4c0>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0e9b      	lsrs	r3, r3, #26
 8002da2:	3301      	adds	r3, #1
 8002da4:	069b      	lsls	r3, r3, #26
 8002da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002daa:	e015      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x4ec>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	e003      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	069b      	lsls	r3, r3, #26
 8002dd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x50c>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	3301      	adds	r3, #1
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2101      	movs	r1, #1
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	e017      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x53c>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002e10:	2320      	movs	r3, #32
 8002e12:	e003      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	ea42 0103 	orr.w	r1, r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x562>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	0e9b      	lsrs	r3, r3, #26
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f003 021f 	and.w	r2, r3, #31
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	051b      	lsls	r3, r3, #20
 8002e4c:	e018      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x594>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002e66:	2320      	movs	r3, #32
 8002e68:	e003      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f003 021f 	and.w	r2, r3, #31
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e80:	430b      	orrs	r3, r1
 8002e82:	e080      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d107      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x5b4>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	3301      	adds	r3, #1
 8002e98:	069b      	lsls	r3, r3, #26
 8002e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e9e:	e015      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x5e0>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	e003      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	069b      	lsls	r3, r3, #26
 8002ec8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d109      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x600>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	e017      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x630>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	61fb      	str	r3, [r7, #28]
  return result;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e003      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	ea42 0103 	orr.w	r1, r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10d      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x65c>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	0e9b      	lsrs	r3, r3, #26
 8002f32:	3301      	adds	r3, #1
 8002f34:	f003 021f 	and.w	r2, r3, #31
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3b1e      	subs	r3, #30
 8002f40:	051b      	lsls	r3, r3, #20
 8002f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f46:	e01d      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x698>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	613b      	str	r3, [r7, #16]
  return result;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d103      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e005      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x684>
 8002f64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	f003 021f 	and.w	r2, r3, #31
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3b1e      	subs	r3, #30
 8002f7e:	051b      	lsls	r3, r3, #20
 8002f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f84:	430b      	orrs	r3, r1
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	6892      	ldr	r2, [r2, #8]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f7fe febd 	bl	8001d0a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b44      	ldr	r3, [pc, #272]	; (80030a8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d07a      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f9c:	4843      	ldr	r0, [pc, #268]	; (80030ac <HAL_ADC_ConfigChannel+0x7c0>)
 8002f9e:	f7fe fdff 	bl	8001ba0 <LL_ADC_GetCommonPathInternalCh>
 8002fa2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a41      	ldr	r2, [pc, #260]	; (80030b0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d12c      	bne.n	800300a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d126      	bne.n	800300a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a3c      	ldr	r2, [pc, #240]	; (80030b4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_ADC_ConfigChannel+0x6e4>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a3b      	ldr	r2, [pc, #236]	; (80030b8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d15d      	bne.n	800308c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4834      	ldr	r0, [pc, #208]	; (80030ac <HAL_ADC_ConfigChannel+0x7c0>)
 8002fdc:	f7fe fdcd 	bl	8001b7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe0:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_ADC_ConfigChannel+0x7d0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	4a36      	ldr	r2, [pc, #216]	; (80030c0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ffa:	e002      	b.n	8003002 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f9      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003008:	e040      	b.n	800308c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d118      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x75a>
 8003014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d112      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <HAL_ADC_ConfigChannel+0x748>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a22      	ldr	r2, [pc, #136]	; (80030b8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d12d      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003038:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303c:	4619      	mov	r1, r3
 800303e:	481b      	ldr	r0, [pc, #108]	; (80030ac <HAL_ADC_ConfigChannel+0x7c0>)
 8003040:	f7fe fd9b 	bl	8001b7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003044:	e024      	b.n	8003090 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <HAL_ADC_ConfigChannel+0x7dc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d120      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003050:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d11a      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d115      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003066:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800306a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800306e:	4619      	mov	r1, r3
 8003070:	480e      	ldr	r0, [pc, #56]	; (80030ac <HAL_ADC_ConfigChannel+0x7c0>)
 8003072:	f7fe fd82 	bl	8001b7a <LL_ADC_SetCommonPathInternalCh>
 8003076:	e00c      	b.n	8003092 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800308a:	e002      	b.n	8003092 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800308c:	bf00      	nop
 800308e:	e000      	b.n	8003092 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003090:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800309a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800309e:	4618      	mov	r0, r3
 80030a0:	37d8      	adds	r7, #216	; 0xd8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	80080000 	.word	0x80080000
 80030ac:	50040300 	.word	0x50040300
 80030b0:	c7520000 	.word	0xc7520000
 80030b4:	50040000 	.word	0x50040000
 80030b8:	50040200 	.word	0x50040200
 80030bc:	20000000 	.word	0x20000000
 80030c0:	053e2d63 	.word	0x053e2d63
 80030c4:	cb840000 	.word	0xcb840000
 80030c8:	80000001 	.word	0x80000001

080030cc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe ff40 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 80030e8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe ff61 	bl	8001fb6 <LL_ADC_INJ_IsConversionOngoing>
 80030f4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d103      	bne.n	8003104 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8098 	beq.w	8003234 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d02a      	beq.n	8003168 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7e5b      	ldrb	r3, [r3, #25]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d126      	bne.n	8003168 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	7e1b      	ldrb	r3, [r3, #24]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d122      	bne.n	8003168 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003122:	2301      	movs	r3, #1
 8003124:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003126:	e014      	b.n	8003152 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4a45      	ldr	r2, [pc, #276]	; (8003240 <ADC_ConversionStop+0x174>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d90d      	bls.n	800314c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	f043 0210 	orr.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e074      	b.n	8003236 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	3301      	adds	r3, #1
 8003150:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d1e3      	bne.n	8003128 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2240      	movs	r2, #64	; 0x40
 8003166:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d014      	beq.n	8003198 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fef8 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00c      	beq.n	8003198 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe feb5 	bl	8001ef2 <LL_ADC_IsDisableOngoing>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d104      	bne.n	8003198 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe fed4 	bl	8001f40 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d014      	beq.n	80031c8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe ff07 	bl	8001fb6 <LL_ADC_INJ_IsConversionOngoing>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe fe9d 	bl	8001ef2 <LL_ADC_IsDisableOngoing>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d104      	bne.n	80031c8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe fee3 	bl	8001f8e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d005      	beq.n	80031da <ADC_ConversionStop+0x10e>
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d105      	bne.n	80031e0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80031d4:	230c      	movs	r3, #12
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e005      	b.n	80031e6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80031da:	2308      	movs	r3, #8
 80031dc:	617b      	str	r3, [r7, #20]
        break;
 80031de:	e002      	b.n	80031e6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80031e0:	2304      	movs	r3, #4
 80031e2:	617b      	str	r3, [r7, #20]
        break;
 80031e4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80031e6:	f7fe fca9 	bl	8001b3c <HAL_GetTick>
 80031ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031ec:	e01b      	b.n	8003226 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80031ee:	f7fe fca5 	bl	8001b3c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d914      	bls.n	8003226 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	f043 0210 	orr.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e007      	b.n	8003236 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1dc      	bne.n	80031ee <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	a33fffff 	.word	0xa33fffff

08003244 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fe3b 	bl	8001ecc <LL_ADC_IsEnabled>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d14d      	bne.n	80032f8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	4b28      	ldr	r3, [pc, #160]	; (8003304 <ADC_Enable+0xc0>)
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	f043 0210 	orr.w	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e039      	b.n	80032fa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fdf6 	bl	8001e7c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003290:	f7fe fc54 	bl	8001b3c <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003296:	e028      	b.n	80032ea <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fe15 	bl	8001ecc <LL_ADC_IsEnabled>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe fde5 	bl	8001e7c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032b2:	f7fe fc43 	bl	8001b3c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d914      	bls.n	80032ea <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00d      	beq.n	80032ea <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e007      	b.n	80032fa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d1cf      	bne.n	8003298 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	8000003f 	.word	0x8000003f

08003308 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe fdec 	bl	8001ef2 <LL_ADC_IsDisableOngoing>
 800331a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe fdd3 	bl	8001ecc <LL_ADC_IsEnabled>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d047      	beq.n	80033bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d144      	bne.n	80033bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030d 	and.w	r3, r3, #13
 800333c:	2b01      	cmp	r3, #1
 800333e:	d10c      	bne.n	800335a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe fdad 	bl	8001ea4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2203      	movs	r2, #3
 8003350:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003352:	f7fe fbf3 	bl	8001b3c <HAL_GetTick>
 8003356:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003358:	e029      	b.n	80033ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	f043 0210 	orr.w	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e023      	b.n	80033be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003376:	f7fe fbe1 	bl	8001b3c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d914      	bls.n	80033ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e007      	b.n	80033be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1dc      	bne.n	8003376 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <LL_ADC_IsEnabled>:
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <LL_ADC_IsEnabled+0x18>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <LL_ADC_IsEnabled+0x1a>
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_ADC_REG_IsConversionOngoing>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d101      	bne.n	8003404 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b09f      	sub	sp, #124	; 0x7c
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003492:	2302      	movs	r3, #2
 8003494:	e093      	b.n	80035be <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800349e:	2300      	movs	r3, #0
 80034a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80034a2:	2300      	movs	r3, #0
 80034a4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a47      	ldr	r2, [pc, #284]	; (80035c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d102      	bne.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034b0:	4b46      	ldr	r3, [pc, #280]	; (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	e001      	b.n	80034ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	f043 0220 	orr.w	r2, r3, #32
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e072      	b.n	80035be <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff86 	bl	80033ec <LL_ADC_REG_IsConversionOngoing>
 80034e0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ff80 	bl	80033ec <LL_ADC_REG_IsConversionOngoing>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d154      	bne.n	800359c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80034f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d151      	bne.n	800359c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034f8:	4b35      	ldr	r3, [pc, #212]	; (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80034fa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d02c      	beq.n	800355e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003516:	035b      	lsls	r3, r3, #13
 8003518:	430b      	orrs	r3, r1
 800351a:	431a      	orrs	r2, r3
 800351c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003520:	4829      	ldr	r0, [pc, #164]	; (80035c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003522:	f7ff ff50 	bl	80033c6 <LL_ADC_IsEnabled>
 8003526:	4604      	mov	r4, r0
 8003528:	4828      	ldr	r0, [pc, #160]	; (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800352a:	f7ff ff4c 	bl	80033c6 <LL_ADC_IsEnabled>
 800352e:	4603      	mov	r3, r0
 8003530:	431c      	orrs	r4, r3
 8003532:	4828      	ldr	r0, [pc, #160]	; (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003534:	f7ff ff47 	bl	80033c6 <LL_ADC_IsEnabled>
 8003538:	4603      	mov	r3, r0
 800353a:	4323      	orrs	r3, r4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d137      	bne.n	80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003548:	f023 030f 	bic.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	6811      	ldr	r1, [r2, #0]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	6892      	ldr	r2, [r2, #8]
 8003554:	430a      	orrs	r2, r1
 8003556:	431a      	orrs	r2, r3
 8003558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800355c:	e028      	b.n	80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800355e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003568:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800356a:	4817      	ldr	r0, [pc, #92]	; (80035c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800356c:	f7ff ff2b 	bl	80033c6 <LL_ADC_IsEnabled>
 8003570:	4604      	mov	r4, r0
 8003572:	4816      	ldr	r0, [pc, #88]	; (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003574:	f7ff ff27 	bl	80033c6 <LL_ADC_IsEnabled>
 8003578:	4603      	mov	r3, r0
 800357a:	431c      	orrs	r4, r3
 800357c:	4815      	ldr	r0, [pc, #84]	; (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800357e:	f7ff ff22 	bl	80033c6 <LL_ADC_IsEnabled>
 8003582:	4603      	mov	r3, r0
 8003584:	4323      	orrs	r3, r4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d112      	bne.n	80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800358a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003592:	f023 030f 	bic.w	r3, r3, #15
 8003596:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003598:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800359a:	e009      	b.n	80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80035ae:	e000      	b.n	80035b2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80035be:	4618      	mov	r0, r3
 80035c0:	377c      	adds	r7, #124	; 0x7c
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd90      	pop	{r4, r7, pc}
 80035c6:	bf00      	nop
 80035c8:	50040000 	.word	0x50040000
 80035cc:	50040100 	.word	0x50040100
 80035d0:	50040300 	.word	0x50040300
 80035d4:	50040200 	.word	0x50040200

080035d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <__NVIC_SetPriorityGrouping+0x44>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f4:	4013      	ands	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360a:	4a04      	ldr	r2, [pc, #16]	; (800361c <__NVIC_SetPriorityGrouping+0x44>)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	60d3      	str	r3, [r2, #12]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <__NVIC_GetPriorityGrouping+0x18>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	f003 0307 	and.w	r3, r3, #7
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	2b00      	cmp	r3, #0
 800364c:	db0b      	blt.n	8003666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	4907      	ldr	r1, [pc, #28]	; (8003674 <__NVIC_EnableIRQ+0x38>)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	2001      	movs	r0, #1
 800365e:	fa00 f202 	lsl.w	r2, r0, r2
 8003662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000e100 	.word	0xe000e100

08003678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	6039      	str	r1, [r7, #0]
 8003682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003688:	2b00      	cmp	r3, #0
 800368a:	db0a      	blt.n	80036a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	490c      	ldr	r1, [pc, #48]	; (80036c4 <__NVIC_SetPriority+0x4c>)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	440b      	add	r3, r1
 800369c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a0:	e00a      	b.n	80036b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4908      	ldr	r1, [pc, #32]	; (80036c8 <__NVIC_SetPriority+0x50>)
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	3b04      	subs	r3, #4
 80036b0:	0112      	lsls	r2, r2, #4
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	440b      	add	r3, r1
 80036b6:	761a      	strb	r2, [r3, #24]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000e100 	.word	0xe000e100
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f1c3 0307 	rsb	r3, r3, #7
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	bf28      	it	cs
 80036ea:	2304      	movcs	r3, #4
 80036ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d902      	bls.n	80036fc <NVIC_EncodePriority+0x30>
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3b03      	subs	r3, #3
 80036fa:	e000      	b.n	80036fe <NVIC_EncodePriority+0x32>
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	401a      	ands	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003714:	f04f 31ff 	mov.w	r1, #4294967295
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	43d9      	mvns	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	4313      	orrs	r3, r2
         );
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003744:	d301      	bcc.n	800374a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003746:	2301      	movs	r3, #1
 8003748:	e00f      	b.n	800376a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <SysTick_Config+0x40>)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3b01      	subs	r3, #1
 8003750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003752:	210f      	movs	r1, #15
 8003754:	f04f 30ff 	mov.w	r0, #4294967295
 8003758:	f7ff ff8e 	bl	8003678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <SysTick_Config+0x40>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003762:	4b04      	ldr	r3, [pc, #16]	; (8003774 <SysTick_Config+0x40>)
 8003764:	2207      	movs	r2, #7
 8003766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	e000e010 	.word	0xe000e010

08003778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff ff29 	bl	80035d8 <__NVIC_SetPriorityGrouping>
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	4603      	mov	r3, r0
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037a0:	f7ff ff3e 	bl	8003620 <__NVIC_GetPriorityGrouping>
 80037a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	6978      	ldr	r0, [r7, #20]
 80037ac:	f7ff ff8e 	bl	80036cc <NVIC_EncodePriority>
 80037b0:	4602      	mov	r2, r0
 80037b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff5d 	bl	8003678 <__NVIC_SetPriority>
}
 80037be:	bf00      	nop
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	4603      	mov	r3, r0
 80037ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff31 	bl	800363c <__NVIC_EnableIRQ>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ffa2 	bl	8003734 <SysTick_Config>
 80037f0:	4603      	mov	r3, r0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800380a:	e17f      	b.n	8003b0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	2101      	movs	r1, #1
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	4013      	ands	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8171 	beq.w	8003b06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d00b      	beq.n	8003844 <HAL_GPIO_Init+0x48>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d007      	beq.n	8003844 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003838:	2b11      	cmp	r3, #17
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b12      	cmp	r3, #18
 8003842:	d130      	bne.n	80038a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	2203      	movs	r2, #3
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800387a:	2201      	movs	r2, #1
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	f003 0201 	and.w	r2, r3, #1
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d118      	bne.n	80038e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038b8:	2201      	movs	r2, #1
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	08db      	lsrs	r3, r3, #3
 80038ce:	f003 0201 	and.w	r2, r3, #1
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0x128>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b12      	cmp	r3, #18
 8003922:	d123      	bne.n	800396c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3208      	adds	r2, #8
 800392c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	220f      	movs	r2, #15
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	08da      	lsrs	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3208      	adds	r2, #8
 8003966:	6939      	ldr	r1, [r7, #16]
 8003968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2203      	movs	r2, #3
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0203 	and.w	r2, r3, #3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80ac 	beq.w	8003b06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ae:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <HAL_GPIO_Init+0x330>)
 80039b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b2:	4a5e      	ldr	r2, [pc, #376]	; (8003b2c <HAL_GPIO_Init+0x330>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6613      	str	r3, [r2, #96]	; 0x60
 80039ba:	4b5c      	ldr	r3, [pc, #368]	; (8003b2c <HAL_GPIO_Init+0x330>)
 80039bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039c6:	4a5a      	ldr	r2, [pc, #360]	; (8003b30 <HAL_GPIO_Init+0x334>)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	3302      	adds	r3, #2
 80039ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	220f      	movs	r2, #15
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039f0:	d025      	beq.n	8003a3e <HAL_GPIO_Init+0x242>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a4f      	ldr	r2, [pc, #316]	; (8003b34 <HAL_GPIO_Init+0x338>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01f      	beq.n	8003a3a <HAL_GPIO_Init+0x23e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a4e      	ldr	r2, [pc, #312]	; (8003b38 <HAL_GPIO_Init+0x33c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d019      	beq.n	8003a36 <HAL_GPIO_Init+0x23a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a4d      	ldr	r2, [pc, #308]	; (8003b3c <HAL_GPIO_Init+0x340>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_GPIO_Init+0x236>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a4c      	ldr	r2, [pc, #304]	; (8003b40 <HAL_GPIO_Init+0x344>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00d      	beq.n	8003a2e <HAL_GPIO_Init+0x232>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4b      	ldr	r2, [pc, #300]	; (8003b44 <HAL_GPIO_Init+0x348>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <HAL_GPIO_Init+0x22e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4a      	ldr	r2, [pc, #296]	; (8003b48 <HAL_GPIO_Init+0x34c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <HAL_GPIO_Init+0x22a>
 8003a22:	2306      	movs	r3, #6
 8003a24:	e00c      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a26:	2307      	movs	r3, #7
 8003a28:	e00a      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a2a:	2305      	movs	r3, #5
 8003a2c:	e008      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	e006      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a32:	2303      	movs	r3, #3
 8003a34:	e004      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e002      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	f002 0203 	and.w	r2, r2, #3
 8003a46:	0092      	lsls	r2, r2, #2
 8003a48:	4093      	lsls	r3, r2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a50:	4937      	ldr	r1, [pc, #220]	; (8003b30 <HAL_GPIO_Init+0x334>)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	3302      	adds	r3, #2
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <HAL_GPIO_Init+0x350>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a82:	4a32      	ldr	r2, [pc, #200]	; (8003b4c <HAL_GPIO_Init+0x350>)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003a88:	4b30      	ldr	r3, [pc, #192]	; (8003b4c <HAL_GPIO_Init+0x350>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003aac:	4a27      	ldr	r2, [pc, #156]	; (8003b4c <HAL_GPIO_Init+0x350>)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ab2:	4b26      	ldr	r3, [pc, #152]	; (8003b4c <HAL_GPIO_Init+0x350>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ad6:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <HAL_GPIO_Init+0x350>)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_GPIO_Init+0x350>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b00:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <HAL_GPIO_Init+0x350>)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f47f ae78 	bne.w	800380c <HAL_GPIO_Init+0x10>
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40010000 	.word	0x40010000
 8003b34:	48000400 	.word	0x48000400
 8003b38:	48000800 	.word	0x48000800
 8003b3c:	48000c00 	.word	0x48000c00
 8003b40:	48001000 	.word	0x48001000
 8003b44:	48001400 	.word	0x48001400
 8003b48:	48001800 	.word	0x48001800
 8003b4c:	40010400 	.word	0x40010400

08003b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	807b      	strh	r3, [r7, #2]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b60:	787b      	ldrb	r3, [r7, #1]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b66:	887a      	ldrh	r2, [r7, #2]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b6c:	e002      	b.n	8003b74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b6e:	887a      	ldrh	r2, [r7, #2]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40007000 	.word	0x40007000

08003b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003baa:	d130      	bne.n	8003c0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bac:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb8:	d038      	beq.n	8003c2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bc2:	4a1e      	ldr	r2, [pc, #120]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2232      	movs	r2, #50	; 0x32
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	4a1b      	ldr	r2, [pc, #108]	; (8003c44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	0c9b      	lsrs	r3, r3, #18
 8003bdc:	3301      	adds	r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003be0:	e002      	b.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf4:	d102      	bne.n	8003bfc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f2      	bne.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c08:	d110      	bne.n	8003c2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e00f      	b.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1a:	d007      	beq.n	8003c2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c1c:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c24:	4a05      	ldr	r2, [pc, #20]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	20000000 	.word	0x20000000
 8003c44:	431bde83 	.word	0x431bde83

08003c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e3d4      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c5a:	4ba1      	ldr	r3, [pc, #644]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c64:	4b9e      	ldr	r3, [pc, #632]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80e4 	beq.w	8003e44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_RCC_OscConfig+0x4a>
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b0c      	cmp	r3, #12
 8003c86:	f040 808b 	bne.w	8003da0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	f040 8087 	bne.w	8003da0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c92:	4b93      	ldr	r3, [pc, #588]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_RCC_OscConfig+0x62>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e3ac      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1a      	ldr	r2, [r3, #32]
 8003cae:	4b8c      	ldr	r3, [pc, #560]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d004      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x7c>
 8003cba:	4b89      	ldr	r3, [pc, #548]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc2:	e005      	b.n	8003cd0 <HAL_RCC_OscConfig+0x88>
 8003cc4:	4b86      	ldr	r3, [pc, #536]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d223      	bcs.n	8003d1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fd41 	bl	8004760 <RCC_SetFlashLatencyFromMSIRange>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e38d      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ce8:	4b7d      	ldr	r3, [pc, #500]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a7c      	ldr	r2, [pc, #496]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003cee:	f043 0308 	orr.w	r3, r3, #8
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b7a      	ldr	r3, [pc, #488]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	4977      	ldr	r1, [pc, #476]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d06:	4b76      	ldr	r3, [pc, #472]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	4972      	ldr	r1, [pc, #456]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	604b      	str	r3, [r1, #4]
 8003d1a:	e025      	b.n	8003d68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d1c:	4b70      	ldr	r3, [pc, #448]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6f      	ldr	r2, [pc, #444]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003d22:	f043 0308 	orr.w	r3, r3, #8
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b6d      	ldr	r3, [pc, #436]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	496a      	ldr	r1, [pc, #424]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d3a:	4b69      	ldr	r3, [pc, #420]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	4965      	ldr	r1, [pc, #404]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fd01 	bl	8004760 <RCC_SetFlashLatencyFromMSIRange>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e34d      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d68:	f000 fc36 	bl	80045d8 <HAL_RCC_GetSysClockFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b5c      	ldr	r3, [pc, #368]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	091b      	lsrs	r3, r3, #4
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	495a      	ldr	r1, [pc, #360]	; (8003ee4 <HAL_RCC_OscConfig+0x29c>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
 8003d84:	4a58      	ldr	r2, [pc, #352]	; (8003ee8 <HAL_RCC_OscConfig+0x2a0>)
 8003d86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d88:	4b58      	ldr	r3, [pc, #352]	; (8003eec <HAL_RCC_OscConfig+0x2a4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd fe85 	bl	8001a9c <HAL_InitTick>
 8003d92:	4603      	mov	r3, r0
 8003d94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d052      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	e331      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d032      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003da8:	4b4d      	ldr	r3, [pc, #308]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a4c      	ldr	r2, [pc, #304]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003db4:	f7fd fec2 	bl	8001b3c <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dbc:	f7fd febe 	bl	8001b3c <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e31a      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dce:	4b44      	ldr	r3, [pc, #272]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dda:	4b41      	ldr	r3, [pc, #260]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a40      	ldr	r2, [pc, #256]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003de0:	f043 0308 	orr.w	r3, r3, #8
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	493b      	ldr	r1, [pc, #236]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003df8:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	4936      	ldr	r1, [pc, #216]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
 8003e0c:	e01a      	b.n	8003e44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e0e:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a33      	ldr	r2, [pc, #204]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e1a:	f7fd fe8f 	bl	8001b3c <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e22:	f7fd fe8b 	bl	8001b3c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e2e7      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e34:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f0      	bne.n	8003e22 <HAL_RCC_OscConfig+0x1da>
 8003e40:	e000      	b.n	8003e44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d074      	beq.n	8003f3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d005      	beq.n	8003e62 <HAL_RCC_OscConfig+0x21a>
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d10e      	bne.n	8003e7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d10b      	bne.n	8003e7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e62:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d064      	beq.n	8003f38 <HAL_RCC_OscConfig+0x2f0>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d160      	bne.n	8003f38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e2c4      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e82:	d106      	bne.n	8003e92 <HAL_RCC_OscConfig+0x24a>
 8003e84:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a15      	ldr	r2, [pc, #84]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	e01d      	b.n	8003ece <HAL_RCC_OscConfig+0x286>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e9a:	d10c      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x26e>
 8003e9c:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a0f      	ldr	r2, [pc, #60]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003ea2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	e00b      	b.n	8003ece <HAL_RCC_OscConfig+0x286>
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a09      	ldr	r2, [pc, #36]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a06      	ldr	r2, [pc, #24]	; (8003ee0 <HAL_RCC_OscConfig+0x298>)
 8003ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01c      	beq.n	8003f10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fd fe31 	bl	8001b3c <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003edc:	e011      	b.n	8003f02 <HAL_RCC_OscConfig+0x2ba>
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	0800bde0 	.word	0x0800bde0
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fd fe24 	bl	8001b3c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	; 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e280      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f02:	4baf      	ldr	r3, [pc, #700]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x2a8>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fd fe14 	bl	8001b3c <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f18:	f7fd fe10 	bl	8001b3c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	; 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e26c      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f2a:	4ba5      	ldr	r3, [pc, #660]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x2d0>
 8003f36:	e000      	b.n	8003f3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d060      	beq.n	8004008 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d005      	beq.n	8003f58 <HAL_RCC_OscConfig+0x310>
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b0c      	cmp	r3, #12
 8003f50:	d119      	bne.n	8003f86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d116      	bne.n	8003f86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f58:	4b99      	ldr	r3, [pc, #612]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_OscConfig+0x328>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e249      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	4b93      	ldr	r3, [pc, #588]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	4990      	ldr	r1, [pc, #576]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f84:	e040      	b.n	8004008 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d023      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f8e:	4b8c      	ldr	r3, [pc, #560]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a8b      	ldr	r2, [pc, #556]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fd fdcf 	bl	8001b3c <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa2:	f7fd fdcb 	bl	8001b3c <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e227      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb4:	4b82      	ldr	r3, [pc, #520]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc0:	4b7f      	ldr	r3, [pc, #508]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	061b      	lsls	r3, r3, #24
 8003fce:	497c      	ldr	r1, [pc, #496]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]
 8003fd4:	e018      	b.n	8004008 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd6:	4b7a      	ldr	r3, [pc, #488]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a79      	ldr	r2, [pc, #484]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fd fdab 	bl	8001b3c <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fea:	f7fd fda7 	bl	8001b3c <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e203      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ffc:	4b70      	ldr	r3, [pc, #448]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d03c      	beq.n	800408e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01c      	beq.n	8004056 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800401c:	4b68      	ldr	r3, [pc, #416]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 800401e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004022:	4a67      	ldr	r2, [pc, #412]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fd fd86 	bl	8001b3c <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004034:	f7fd fd82 	bl	8001b3c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e1de      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004046:	4b5e      	ldr	r3, [pc, #376]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8004048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ef      	beq.n	8004034 <HAL_RCC_OscConfig+0x3ec>
 8004054:	e01b      	b.n	800408e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004056:	4b5a      	ldr	r3, [pc, #360]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8004058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405c:	4a58      	ldr	r2, [pc, #352]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004066:	f7fd fd69 	bl	8001b3c <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406e:	f7fd fd65 	bl	8001b3c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e1c1      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004080:	4b4f      	ldr	r3, [pc, #316]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8004082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ef      	bne.n	800406e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80a6 	beq.w	80041e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409c:	2300      	movs	r3, #0
 800409e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040a0:	4b47      	ldr	r3, [pc, #284]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10d      	bne.n	80040c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ac:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	4a43      	ldr	r2, [pc, #268]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 80040b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b6:	6593      	str	r3, [r2, #88]	; 0x58
 80040b8:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c4:	2301      	movs	r3, #1
 80040c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c8:	4b3e      	ldr	r3, [pc, #248]	; (80041c4 <HAL_RCC_OscConfig+0x57c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d118      	bne.n	8004106 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d4:	4b3b      	ldr	r3, [pc, #236]	; (80041c4 <HAL_RCC_OscConfig+0x57c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a3a      	ldr	r2, [pc, #232]	; (80041c4 <HAL_RCC_OscConfig+0x57c>)
 80040da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e0:	f7fd fd2c 	bl	8001b3c <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e8:	f7fd fd28 	bl	8001b3c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e184      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040fa:	4b32      	ldr	r3, [pc, #200]	; (80041c4 <HAL_RCC_OscConfig+0x57c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d108      	bne.n	8004120 <HAL_RCC_OscConfig+0x4d8>
 800410e:	4b2c      	ldr	r3, [pc, #176]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004114:	4a2a      	ldr	r2, [pc, #168]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800411e:	e024      	b.n	800416a <HAL_RCC_OscConfig+0x522>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b05      	cmp	r3, #5
 8004126:	d110      	bne.n	800414a <HAL_RCC_OscConfig+0x502>
 8004128:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	4a24      	ldr	r2, [pc, #144]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8004130:	f043 0304 	orr.w	r3, r3, #4
 8004134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004138:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	4a20      	ldr	r2, [pc, #128]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004148:	e00f      	b.n	800416a <HAL_RCC_OscConfig+0x522>
 800414a:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800415a:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	4a17      	ldr	r2, [pc, #92]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8004162:	f023 0304 	bic.w	r3, r3, #4
 8004166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004172:	f7fd fce3 	bl	8001b3c <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004178:	e00a      	b.n	8004190 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417a:	f7fd fcdf 	bl	8001b3c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f241 3288 	movw	r2, #5000	; 0x1388
 8004188:	4293      	cmp	r3, r2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e139      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_OscConfig+0x578>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0ed      	beq.n	800417a <HAL_RCC_OscConfig+0x532>
 800419e:	e01a      	b.n	80041d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fd fccc 	bl	8001b3c <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a6:	e00f      	b.n	80041c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a8:	f7fd fcc8 	bl	8001b3c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d906      	bls.n	80041c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e122      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041c8:	4b90      	ldr	r3, [pc, #576]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e8      	bne.n	80041a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041d6:	7ffb      	ldrb	r3, [r7, #31]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041dc:	4b8b      	ldr	r3, [pc, #556]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80041de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e0:	4a8a      	ldr	r2, [pc, #552]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80041e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8108 	beq.w	8004402 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	f040 80d0 	bne.w	800439c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041fc:	4b83      	ldr	r3, [pc, #524]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f003 0203 	and.w	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	429a      	cmp	r2, r3
 800420e:	d130      	bne.n	8004272 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	3b01      	subs	r3, #1
 800421c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d127      	bne.n	8004272 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800422e:	429a      	cmp	r2, r3
 8004230:	d11f      	bne.n	8004272 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800423c:	2a07      	cmp	r2, #7
 800423e:	bf14      	ite	ne
 8004240:	2201      	movne	r2, #1
 8004242:	2200      	moveq	r2, #0
 8004244:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004246:	4293      	cmp	r3, r2
 8004248:	d113      	bne.n	8004272 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	3b01      	subs	r3, #1
 8004258:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d109      	bne.n	8004272 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	3b01      	subs	r3, #1
 800426c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d06e      	beq.n	8004350 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b0c      	cmp	r3, #12
 8004276:	d069      	beq.n	800434c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004278:	4b64      	ldr	r3, [pc, #400]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e0b7      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004294:	4b5d      	ldr	r3, [pc, #372]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a5c      	ldr	r2, [pc, #368]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 800429a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800429e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042a0:	f7fd fc4c 	bl	8001b3c <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fd fc48 	bl	8001b3c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e0a4      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ba:	4b54      	ldr	r3, [pc, #336]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c6:	4b51      	ldr	r3, [pc, #324]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	4b51      	ldr	r3, [pc, #324]	; (8004410 <HAL_RCC_OscConfig+0x7c8>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042d6:	3a01      	subs	r2, #1
 80042d8:	0112      	lsls	r2, r2, #4
 80042da:	4311      	orrs	r1, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042e0:	0212      	lsls	r2, r2, #8
 80042e2:	4311      	orrs	r1, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042e8:	0852      	lsrs	r2, r2, #1
 80042ea:	3a01      	subs	r2, #1
 80042ec:	0552      	lsls	r2, r2, #21
 80042ee:	4311      	orrs	r1, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042f4:	0852      	lsrs	r2, r2, #1
 80042f6:	3a01      	subs	r2, #1
 80042f8:	0652      	lsls	r2, r2, #25
 80042fa:	4311      	orrs	r1, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004300:	0912      	lsrs	r2, r2, #4
 8004302:	0452      	lsls	r2, r2, #17
 8004304:	430a      	orrs	r2, r1
 8004306:	4941      	ldr	r1, [pc, #260]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 8004308:	4313      	orrs	r3, r2
 800430a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800430c:	4b3f      	ldr	r3, [pc, #252]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a3e      	ldr	r2, [pc, #248]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 8004312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004316:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004318:	4b3c      	ldr	r3, [pc, #240]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4a3b      	ldr	r2, [pc, #236]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 800431e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004322:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004324:	f7fd fc0a 	bl	8001b3c <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432c:	f7fd fc06 	bl	8001b3c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e062      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	4b33      	ldr	r3, [pc, #204]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800434a:	e05a      	b.n	8004402 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e059      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004350:	4b2e      	ldr	r3, [pc, #184]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d152      	bne.n	8004402 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2a      	ldr	r2, [pc, #168]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 8004362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004366:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004368:	4b28      	ldr	r3, [pc, #160]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a27      	ldr	r2, [pc, #156]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 800436e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004372:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004374:	f7fd fbe2 	bl	8001b3c <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437c:	f7fd fbde 	bl	8001b3c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e03a      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438e:	4b1f      	ldr	r3, [pc, #124]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x734>
 800439a:	e032      	b.n	8004402 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	d02d      	beq.n	80043fe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a2:	4b1a      	ldr	r3, [pc, #104]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a19      	ldr	r2, [pc, #100]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80043a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80043ae:	4b17      	ldr	r3, [pc, #92]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	4a13      	ldr	r2, [pc, #76]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80043c0:	f023 0303 	bic.w	r3, r3, #3
 80043c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043c6:	4b11      	ldr	r3, [pc, #68]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	4a10      	ldr	r2, [pc, #64]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80043cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fd fbb1 	bl	8001b3c <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043de:	f7fd fbad 	bl	8001b3c <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e009      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_RCC_OscConfig+0x7c4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f0      	bne.n	80043de <HAL_RCC_OscConfig+0x796>
 80043fc:	e001      	b.n	8004402 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000
 8004410:	f99d808c 	.word	0xf99d808c

08004414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0c8      	b.n	80045ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004428:	4b66      	ldr	r3, [pc, #408]	; (80045c4 <HAL_RCC_ClockConfig+0x1b0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d910      	bls.n	8004458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b63      	ldr	r3, [pc, #396]	; (80045c4 <HAL_RCC_ClockConfig+0x1b0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 0207 	bic.w	r2, r3, #7
 800443e:	4961      	ldr	r1, [pc, #388]	; (80045c4 <HAL_RCC_ClockConfig+0x1b0>)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004446:	4b5f      	ldr	r3, [pc, #380]	; (80045c4 <HAL_RCC_ClockConfig+0x1b0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d001      	beq.n	8004458 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0b0      	b.n	80045ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d04c      	beq.n	80044fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b03      	cmp	r3, #3
 800446a:	d107      	bne.n	800447c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446c:	4b56      	ldr	r3, [pc, #344]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d121      	bne.n	80044bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e09e      	b.n	80045ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d107      	bne.n	8004494 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004484:	4b50      	ldr	r3, [pc, #320]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d115      	bne.n	80044bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e092      	b.n	80045ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d107      	bne.n	80044ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800449c:	4b4a      	ldr	r3, [pc, #296]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d109      	bne.n	80044bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e086      	b.n	80045ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044ac:	4b46      	ldr	r3, [pc, #280]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e07e      	b.n	80045ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044bc:	4b42      	ldr	r3, [pc, #264]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f023 0203 	bic.w	r2, r3, #3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	493f      	ldr	r1, [pc, #252]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ce:	f7fd fb35 	bl	8001b3c <HAL_GetTick>
 80044d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d6:	f7fd fb31 	bl	8001b3c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e066      	b.n	80045ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ec:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 020c 	and.w	r2, r3, #12
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d1eb      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800450a:	4b2f      	ldr	r3, [pc, #188]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	492c      	ldr	r1, [pc, #176]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 8004518:	4313      	orrs	r3, r2
 800451a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800451c:	4b29      	ldr	r3, [pc, #164]	; (80045c4 <HAL_RCC_ClockConfig+0x1b0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d210      	bcs.n	800454c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b26      	ldr	r3, [pc, #152]	; (80045c4 <HAL_RCC_ClockConfig+0x1b0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 0207 	bic.w	r2, r3, #7
 8004532:	4924      	ldr	r1, [pc, #144]	; (80045c4 <HAL_RCC_ClockConfig+0x1b0>)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <HAL_RCC_ClockConfig+0x1b0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e036      	b.n	80045ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4918      	ldr	r1, [pc, #96]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d009      	beq.n	800458a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4910      	ldr	r1, [pc, #64]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800458a:	f000 f825 	bl	80045d8 <HAL_RCC_GetSysClockFreq>
 800458e:	4602      	mov	r2, r0
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <HAL_RCC_ClockConfig+0x1b4>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	490c      	ldr	r1, [pc, #48]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 800459c:	5ccb      	ldrb	r3, [r1, r3]
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	fa22 f303 	lsr.w	r3, r2, r3
 80045a6:	4a0a      	ldr	r2, [pc, #40]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <HAL_RCC_ClockConfig+0x1c0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fd fa74 	bl	8001a9c <HAL_InitTick>
 80045b4:	4603      	mov	r3, r0
 80045b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80045b8:	7afb      	ldrb	r3, [r7, #11]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40022000 	.word	0x40022000
 80045c8:	40021000 	.word	0x40021000
 80045cc:	0800bde0 	.word	0x0800bde0
 80045d0:	20000000 	.word	0x20000000
 80045d4:	20000004 	.word	0x20000004

080045d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	b089      	sub	sp, #36	; 0x24
 80045dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045e6:	4b3e      	ldr	r3, [pc, #248]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045f0:	4b3b      	ldr	r3, [pc, #236]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x34>
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d121      	bne.n	800464a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d11e      	bne.n	800464a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800460c:	4b34      	ldr	r3, [pc, #208]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d107      	bne.n	8004628 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004618:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800461a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800461e:	0a1b      	lsrs	r3, r3, #8
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	e005      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004628:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004634:	4a2b      	ldr	r2, [pc, #172]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004648:	e00a      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b04      	cmp	r3, #4
 800464e:	d102      	bne.n	8004656 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004650:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	e004      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d101      	bne.n	8004660 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800465c:	4b23      	ldr	r3, [pc, #140]	; (80046ec <HAL_RCC_GetSysClockFreq+0x114>)
 800465e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b0c      	cmp	r3, #12
 8004664:	d134      	bne.n	80046d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004666:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d003      	beq.n	800467e <HAL_RCC_GetSysClockFreq+0xa6>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d003      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0xac>
 800467c:	e005      	b.n	800468a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800467e:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004680:	617b      	str	r3, [r7, #20]
      break;
 8004682:	e005      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004684:	4b19      	ldr	r3, [pc, #100]	; (80046ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004686:	617b      	str	r3, [r7, #20]
      break;
 8004688:	e002      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	617b      	str	r3, [r7, #20]
      break;
 800468e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004690:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	3301      	adds	r3, #1
 800469c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	0a1b      	lsrs	r3, r3, #8
 80046a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	fb02 f203 	mul.w	r2, r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046b6:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	0e5b      	lsrs	r3, r3, #25
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	3301      	adds	r3, #1
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046d0:	69bb      	ldr	r3, [r7, #24]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3724      	adds	r7, #36	; 0x24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40021000 	.word	0x40021000
 80046e4:	0800bdf8 	.word	0x0800bdf8
 80046e8:	00f42400 	.word	0x00f42400
 80046ec:	007a1200 	.word	0x007a1200

080046f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f4:	4b03      	ldr	r3, [pc, #12]	; (8004704 <HAL_RCC_GetHCLKFreq+0x14>)
 80046f6:	681b      	ldr	r3, [r3, #0]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	20000000 	.word	0x20000000

08004708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800470c:	f7ff fff0 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 8004710:	4602      	mov	r2, r0
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	4904      	ldr	r1, [pc, #16]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800471e:	5ccb      	ldrb	r3, [r1, r3]
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004728:	4618      	mov	r0, r3
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40021000 	.word	0x40021000
 8004730:	0800bdf0 	.word	0x0800bdf0

08004734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004738:	f7ff ffda 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 800473c:	4602      	mov	r2, r0
 800473e:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	0adb      	lsrs	r3, r3, #11
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	4904      	ldr	r1, [pc, #16]	; (800475c <HAL_RCC_GetPCLK2Freq+0x28>)
 800474a:	5ccb      	ldrb	r3, [r1, r3]
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004754:	4618      	mov	r0, r3
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40021000 	.word	0x40021000
 800475c:	0800bdf0 	.word	0x0800bdf0

08004760 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800476c:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004778:	f7ff fa02 	bl	8003b80 <HAL_PWREx_GetVoltageRange>
 800477c:	6178      	str	r0, [r7, #20]
 800477e:	e014      	b.n	80047aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004780:	4b25      	ldr	r3, [pc, #148]	; (8004818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	4a24      	ldr	r2, [pc, #144]	; (8004818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478a:	6593      	str	r3, [r2, #88]	; 0x58
 800478c:	4b22      	ldr	r3, [pc, #136]	; (8004818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800478e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004798:	f7ff f9f2 	bl	8003b80 <HAL_PWREx_GetVoltageRange>
 800479c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800479e:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b0:	d10b      	bne.n	80047ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b80      	cmp	r3, #128	; 0x80
 80047b6:	d919      	bls.n	80047ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2ba0      	cmp	r3, #160	; 0xa0
 80047bc:	d902      	bls.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047be:	2302      	movs	r3, #2
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	e013      	b.n	80047ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047c4:	2301      	movs	r3, #1
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	e010      	b.n	80047ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b80      	cmp	r3, #128	; 0x80
 80047ce:	d902      	bls.n	80047d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047d0:	2303      	movs	r3, #3
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	e00a      	b.n	80047ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b80      	cmp	r3, #128	; 0x80
 80047da:	d102      	bne.n	80047e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047dc:	2302      	movs	r3, #2
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	e004      	b.n	80047ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b70      	cmp	r3, #112	; 0x70
 80047e6:	d101      	bne.n	80047ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047e8:	2301      	movs	r3, #1
 80047ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f023 0207 	bic.w	r2, r3, #7
 80047f4:	4909      	ldr	r1, [pc, #36]	; (800481c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047fc:	4b07      	ldr	r3, [pc, #28]	; (800481c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	429a      	cmp	r2, r3
 8004808:	d001      	beq.n	800480e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000
 800481c:	40022000 	.word	0x40022000

08004820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004828:	2300      	movs	r3, #0
 800482a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800482c:	2300      	movs	r3, #0
 800482e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004838:	2b00      	cmp	r3, #0
 800483a:	d041      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004840:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004844:	d02a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004846:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800484a:	d824      	bhi.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800484c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004850:	d008      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004852:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004856:	d81e      	bhi.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800485c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004860:	d010      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004862:	e018      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004864:	4b86      	ldr	r3, [pc, #536]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a85      	ldr	r2, [pc, #532]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800486a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004870:	e015      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3304      	adds	r3, #4
 8004876:	2100      	movs	r1, #0
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fabb 	bl	8004df4 <RCCEx_PLLSAI1_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004882:	e00c      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3320      	adds	r3, #32
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fba6 	bl	8004fdc <RCCEx_PLLSAI2_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004894:	e003      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	74fb      	strb	r3, [r7, #19]
      break;
 800489a:	e000      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800489c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800489e:	7cfb      	ldrb	r3, [r7, #19]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10b      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048a4:	4b76      	ldr	r3, [pc, #472]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b2:	4973      	ldr	r1, [pc, #460]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048ba:	e001      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d041      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048d4:	d02a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80048d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048da:	d824      	bhi.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048e0:	d008      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048e6:	d81e      	bhi.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048f0:	d010      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048f2:	e018      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048f4:	4b62      	ldr	r3, [pc, #392]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4a61      	ldr	r2, [pc, #388]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004900:	e015      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3304      	adds	r3, #4
 8004906:	2100      	movs	r1, #0
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fa73 	bl	8004df4 <RCCEx_PLLSAI1_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004912:	e00c      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3320      	adds	r3, #32
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fb5e 	bl	8004fdc <RCCEx_PLLSAI2_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004924:	e003      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	74fb      	strb	r3, [r7, #19]
      break;
 800492a:	e000      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800492c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800492e:	7cfb      	ldrb	r3, [r7, #19]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10b      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004934:	4b52      	ldr	r3, [pc, #328]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004942:	494f      	ldr	r1, [pc, #316]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800494a:	e001      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80a0 	beq.w	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495e:	2300      	movs	r3, #0
 8004960:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004962:	4b47      	ldr	r3, [pc, #284]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00d      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004978:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497c:	4a40      	ldr	r2, [pc, #256]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004982:	6593      	str	r3, [r2, #88]	; 0x58
 8004984:	4b3e      	ldr	r3, [pc, #248]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004990:	2301      	movs	r3, #1
 8004992:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004994:	4b3b      	ldr	r3, [pc, #236]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a3a      	ldr	r2, [pc, #232]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800499a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049a0:	f7fd f8cc 	bl	8001b3c <HAL_GetTick>
 80049a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049a6:	e009      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a8:	f7fd f8c8 	bl	8001b3c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d902      	bls.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	74fb      	strb	r3, [r7, #19]
        break;
 80049ba:	e005      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049bc:	4b31      	ldr	r3, [pc, #196]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0ef      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80049c8:	7cfb      	ldrb	r3, [r7, #19]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d15c      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049ce:	4b2c      	ldr	r3, [pc, #176]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01f      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d019      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049ec:	4b24      	ldr	r3, [pc, #144]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049f8:	4b21      	ldr	r3, [pc, #132]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	4a20      	ldr	r2, [pc, #128]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a08:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a18:	4a19      	ldr	r2, [pc, #100]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d016      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fd f887 	bl	8001b3c <HAL_GetTick>
 8004a2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a30:	e00b      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fd f883 	bl	8001b3c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d902      	bls.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	74fb      	strb	r3, [r7, #19]
            break;
 8004a48:	e006      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0ec      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a58:	7cfb      	ldrb	r3, [r7, #19]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a5e:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6e:	4904      	ldr	r1, [pc, #16]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a76:	e009      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	74bb      	strb	r3, [r7, #18]
 8004a7c:	e006      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a7e:	bf00      	nop
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a88:	7cfb      	ldrb	r3, [r7, #19]
 8004a8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a8c:	7c7b      	ldrb	r3, [r7, #17]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d105      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a92:	4b9e      	ldr	r3, [pc, #632]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a96:	4a9d      	ldr	r2, [pc, #628]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aaa:	4b98      	ldr	r3, [pc, #608]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	f023 0203 	bic.w	r2, r3, #3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	4994      	ldr	r1, [pc, #592]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004acc:	4b8f      	ldr	r3, [pc, #572]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	f023 020c 	bic.w	r2, r3, #12
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	498c      	ldr	r1, [pc, #560]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aee:	4b87      	ldr	r3, [pc, #540]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	4983      	ldr	r1, [pc, #524]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b10:	4b7e      	ldr	r3, [pc, #504]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	497b      	ldr	r1, [pc, #492]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b32:	4b76      	ldr	r3, [pc, #472]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b40:	4972      	ldr	r1, [pc, #456]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b54:	4b6d      	ldr	r3, [pc, #436]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b62:	496a      	ldr	r1, [pc, #424]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b76:	4b65      	ldr	r3, [pc, #404]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b84:	4961      	ldr	r1, [pc, #388]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b98:	4b5c      	ldr	r3, [pc, #368]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba6:	4959      	ldr	r1, [pc, #356]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bba:	4b54      	ldr	r3, [pc, #336]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc8:	4950      	ldr	r1, [pc, #320]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bdc:	4b4b      	ldr	r3, [pc, #300]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	4948      	ldr	r1, [pc, #288]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bfe:	4b43      	ldr	r3, [pc, #268]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0c:	493f      	ldr	r1, [pc, #252]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d028      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c20:	4b3a      	ldr	r3, [pc, #232]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2e:	4937      	ldr	r1, [pc, #220]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c3e:	d106      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c40:	4b32      	ldr	r3, [pc, #200]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a31      	ldr	r2, [pc, #196]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c4a:	60d3      	str	r3, [r2, #12]
 8004c4c:	e011      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c56:	d10c      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f8c8 	bl	8004df4 <RCCEx_PLLSAI1_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c68:	7cfb      	ldrb	r3, [r7, #19]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c6e:	7cfb      	ldrb	r3, [r7, #19]
 8004c70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d028      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c7e:	4b23      	ldr	r3, [pc, #140]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	491f      	ldr	r1, [pc, #124]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c9c:	d106      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	4a1a      	ldr	r2, [pc, #104]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca8:	60d3      	str	r3, [r2, #12]
 8004caa:	e011      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	2101      	movs	r1, #1
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 f899 	bl	8004df4 <RCCEx_PLLSAI1_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cc6:	7cfb      	ldrb	r3, [r7, #19]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d02b      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cea:	4908      	ldr	r1, [pc, #32]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cfa:	d109      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4a02      	ldr	r2, [pc, #8]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d06:	60d3      	str	r3, [r2, #12]
 8004d08:	e014      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	2101      	movs	r1, #1
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 f867 	bl	8004df4 <RCCEx_PLLSAI1_Config>
 8004d26:	4603      	mov	r3, r0
 8004d28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d2a:	7cfb      	ldrb	r3, [r7, #19]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d30:	7cfb      	ldrb	r3, [r7, #19]
 8004d32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d02f      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d40:	4b2b      	ldr	r3, [pc, #172]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d4e:	4928      	ldr	r1, [pc, #160]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d5e:	d10d      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3304      	adds	r3, #4
 8004d64:	2102      	movs	r1, #2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f844 	bl	8004df4 <RCCEx_PLLSAI1_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d70:	7cfb      	ldrb	r3, [r7, #19]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d014      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d76:	7cfb      	ldrb	r3, [r7, #19]
 8004d78:	74bb      	strb	r3, [r7, #18]
 8004d7a:	e011      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3320      	adds	r3, #32
 8004d8a:	2102      	movs	r1, #2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 f925 	bl	8004fdc <RCCEx_PLLSAI2_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d96:	7cfb      	ldrb	r3, [r7, #19]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004dac:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dba:	490d      	ldr	r1, [pc, #52]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dce:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dde:	4904      	ldr	r1, [pc, #16]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004de6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000

08004df4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e02:	4b75      	ldr	r3, [pc, #468]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d018      	beq.n	8004e40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e0e:	4b72      	ldr	r3, [pc, #456]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f003 0203 	and.w	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d10d      	bne.n	8004e3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
       ||
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e26:	4b6c      	ldr	r3, [pc, #432]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
       ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d047      	beq.n	8004eca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
 8004e3e:	e044      	b.n	8004eca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d018      	beq.n	8004e7a <RCCEx_PLLSAI1_Config+0x86>
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d825      	bhi.n	8004e98 <RCCEx_PLLSAI1_Config+0xa4>
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d002      	beq.n	8004e56 <RCCEx_PLLSAI1_Config+0x62>
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d009      	beq.n	8004e68 <RCCEx_PLLSAI1_Config+0x74>
 8004e54:	e020      	b.n	8004e98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e56:	4b60      	ldr	r3, [pc, #384]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d11d      	bne.n	8004e9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e66:	e01a      	b.n	8004e9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e68:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d116      	bne.n	8004ea2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e78:	e013      	b.n	8004ea2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e7a:	4b57      	ldr	r3, [pc, #348]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10f      	bne.n	8004ea6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e86:	4b54      	ldr	r3, [pc, #336]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e96:	e006      	b.n	8004ea6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e9c:	e004      	b.n	8004ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e9e:	bf00      	nop
 8004ea0:	e002      	b.n	8004ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ea2:	bf00      	nop
 8004ea4:	e000      	b.n	8004ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ea6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10d      	bne.n	8004eca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004eae:	4b4a      	ldr	r3, [pc, #296]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6819      	ldr	r1, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	4944      	ldr	r1, [pc, #272]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d17d      	bne.n	8004fcc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ed0:	4b41      	ldr	r3, [pc, #260]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a40      	ldr	r2, [pc, #256]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004edc:	f7fc fe2e 	bl	8001b3c <HAL_GetTick>
 8004ee0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ee2:	e009      	b.n	8004ef8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ee4:	f7fc fe2a 	bl	8001b3c <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d902      	bls.n	8004ef8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ef6:	e005      	b.n	8004f04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ef8:	4b37      	ldr	r3, [pc, #220]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1ef      	bne.n	8004ee4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d160      	bne.n	8004fcc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d111      	bne.n	8004f34 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f10:	4b31      	ldr	r3, [pc, #196]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6892      	ldr	r2, [r2, #8]
 8004f20:	0211      	lsls	r1, r2, #8
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68d2      	ldr	r2, [r2, #12]
 8004f26:	0912      	lsrs	r2, r2, #4
 8004f28:	0452      	lsls	r2, r2, #17
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	492a      	ldr	r1, [pc, #168]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	610b      	str	r3, [r1, #16]
 8004f32:	e027      	b.n	8004f84 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d112      	bne.n	8004f60 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f3a:	4b27      	ldr	r3, [pc, #156]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6892      	ldr	r2, [r2, #8]
 8004f4a:	0211      	lsls	r1, r2, #8
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6912      	ldr	r2, [r2, #16]
 8004f50:	0852      	lsrs	r2, r2, #1
 8004f52:	3a01      	subs	r2, #1
 8004f54:	0552      	lsls	r2, r2, #21
 8004f56:	430a      	orrs	r2, r1
 8004f58:	491f      	ldr	r1, [pc, #124]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	610b      	str	r3, [r1, #16]
 8004f5e:	e011      	b.n	8004f84 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f60:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6892      	ldr	r2, [r2, #8]
 8004f70:	0211      	lsls	r1, r2, #8
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6952      	ldr	r2, [r2, #20]
 8004f76:	0852      	lsrs	r2, r2, #1
 8004f78:	3a01      	subs	r2, #1
 8004f7a:	0652      	lsls	r2, r2, #25
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	4916      	ldr	r1, [pc, #88]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f84:	4b14      	ldr	r3, [pc, #80]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7fc fdd4 	bl	8001b3c <HAL_GetTick>
 8004f94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f96:	e009      	b.n	8004fac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f98:	f7fc fdd0 	bl	8001b3c <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d902      	bls.n	8004fac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	73fb      	strb	r3, [r7, #15]
          break;
 8004faa:	e005      	b.n	8004fb8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fac:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0ef      	beq.n	8004f98 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	4904      	ldr	r1, [pc, #16]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000

08004fdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fea:	4b6a      	ldr	r3, [pc, #424]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d018      	beq.n	8005028 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ff6:	4b67      	ldr	r3, [pc, #412]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f003 0203 	and.w	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d10d      	bne.n	8005022 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
       ||
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800500e:	4b61      	ldr	r3, [pc, #388]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	091b      	lsrs	r3, r3, #4
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
       ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d047      	beq.n	80050b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
 8005026:	e044      	b.n	80050b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d018      	beq.n	8005062 <RCCEx_PLLSAI2_Config+0x86>
 8005030:	2b03      	cmp	r3, #3
 8005032:	d825      	bhi.n	8005080 <RCCEx_PLLSAI2_Config+0xa4>
 8005034:	2b01      	cmp	r3, #1
 8005036:	d002      	beq.n	800503e <RCCEx_PLLSAI2_Config+0x62>
 8005038:	2b02      	cmp	r3, #2
 800503a:	d009      	beq.n	8005050 <RCCEx_PLLSAI2_Config+0x74>
 800503c:	e020      	b.n	8005080 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800503e:	4b55      	ldr	r3, [pc, #340]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d11d      	bne.n	8005086 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800504e:	e01a      	b.n	8005086 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005050:	4b50      	ldr	r3, [pc, #320]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005058:	2b00      	cmp	r3, #0
 800505a:	d116      	bne.n	800508a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005060:	e013      	b.n	800508a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005062:	4b4c      	ldr	r3, [pc, #304]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10f      	bne.n	800508e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800506e:	4b49      	ldr	r3, [pc, #292]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d109      	bne.n	800508e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800507e:	e006      	b.n	800508e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
      break;
 8005084:	e004      	b.n	8005090 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005086:	bf00      	nop
 8005088:	e002      	b.n	8005090 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800508e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10d      	bne.n	80050b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005096:	4b3f      	ldr	r3, [pc, #252]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6819      	ldr	r1, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	430b      	orrs	r3, r1
 80050ac:	4939      	ldr	r1, [pc, #228]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d167      	bne.n	8005188 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050b8:	4b36      	ldr	r3, [pc, #216]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a35      	ldr	r2, [pc, #212]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c4:	f7fc fd3a 	bl	8001b3c <HAL_GetTick>
 80050c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050ca:	e009      	b.n	80050e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050cc:	f7fc fd36 	bl	8001b3c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d902      	bls.n	80050e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	73fb      	strb	r3, [r7, #15]
        break;
 80050de:	e005      	b.n	80050ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050e0:	4b2c      	ldr	r3, [pc, #176]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ef      	bne.n	80050cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d14a      	bne.n	8005188 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d111      	bne.n	800511c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050f8:	4b26      	ldr	r3, [pc, #152]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6892      	ldr	r2, [r2, #8]
 8005108:	0211      	lsls	r1, r2, #8
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	68d2      	ldr	r2, [r2, #12]
 800510e:	0912      	lsrs	r2, r2, #4
 8005110:	0452      	lsls	r2, r2, #17
 8005112:	430a      	orrs	r2, r1
 8005114:	491f      	ldr	r1, [pc, #124]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005116:	4313      	orrs	r3, r2
 8005118:	614b      	str	r3, [r1, #20]
 800511a:	e011      	b.n	8005140 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800511c:	4b1d      	ldr	r3, [pc, #116]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005124:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6892      	ldr	r2, [r2, #8]
 800512c:	0211      	lsls	r1, r2, #8
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6912      	ldr	r2, [r2, #16]
 8005132:	0852      	lsrs	r2, r2, #1
 8005134:	3a01      	subs	r2, #1
 8005136:	0652      	lsls	r2, r2, #25
 8005138:	430a      	orrs	r2, r1
 800513a:	4916      	ldr	r1, [pc, #88]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800513c:	4313      	orrs	r3, r2
 800513e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005140:	4b14      	ldr	r3, [pc, #80]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a13      	ldr	r2, [pc, #76]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fc fcf6 	bl	8001b3c <HAL_GetTick>
 8005150:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005152:	e009      	b.n	8005168 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005154:	f7fc fcf2 	bl	8001b3c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d902      	bls.n	8005168 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	73fb      	strb	r3, [r7, #15]
          break;
 8005166:	e005      	b.n	8005174 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ef      	beq.n	8005154 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800517c:	695a      	ldr	r2, [r3, #20]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	4904      	ldr	r1, [pc, #16]	; (8005194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005184:	4313      	orrs	r3, r2
 8005186:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005188:	7bfb      	ldrb	r3, [r7, #15]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40021000 	.word	0x40021000

08005198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e049      	b.n	800523e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fc fb70 	bl	80018a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4619      	mov	r1, r3
 80051d6:	4610      	mov	r0, r2
 80051d8:	f000 f9ee 	bl	80055b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	d001      	beq.n	8005260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e04f      	b.n	8005300 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a23      	ldr	r2, [pc, #140]	; (800530c <HAL_TIM_Base_Start_IT+0xc4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01d      	beq.n	80052be <HAL_TIM_Base_Start_IT+0x76>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528a:	d018      	beq.n	80052be <HAL_TIM_Base_Start_IT+0x76>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <HAL_TIM_Base_Start_IT+0xc8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <HAL_TIM_Base_Start_IT+0x76>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1e      	ldr	r2, [pc, #120]	; (8005314 <HAL_TIM_Base_Start_IT+0xcc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00e      	beq.n	80052be <HAL_TIM_Base_Start_IT+0x76>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <HAL_TIM_Base_Start_IT+0xd0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_TIM_Base_Start_IT+0x76>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1b      	ldr	r2, [pc, #108]	; (800531c <HAL_TIM_Base_Start_IT+0xd4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <HAL_TIM_Base_Start_IT+0x76>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a19      	ldr	r2, [pc, #100]	; (8005320 <HAL_TIM_Base_Start_IT+0xd8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d115      	bne.n	80052ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	4b17      	ldr	r3, [pc, #92]	; (8005324 <HAL_TIM_Base_Start_IT+0xdc>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b06      	cmp	r3, #6
 80052ce:	d015      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0xb4>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d6:	d011      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e8:	e008      	b.n	80052fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0201 	orr.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e000      	b.n	80052fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40012c00 	.word	0x40012c00
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	40013400 	.word	0x40013400
 8005320:	40014000 	.word	0x40014000
 8005324:	00010007 	.word	0x00010007

08005328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b02      	cmp	r3, #2
 800533c:	d122      	bne.n	8005384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b02      	cmp	r3, #2
 800534a:	d11b      	bne.n	8005384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0202 	mvn.w	r2, #2
 8005354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f905 	bl	800557a <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f8f7 	bl	8005566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f908 	bl	800558e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b04      	cmp	r3, #4
 8005390:	d122      	bne.n	80053d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b04      	cmp	r3, #4
 800539e:	d11b      	bne.n	80053d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0204 	mvn.w	r2, #4
 80053a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f8db 	bl	800557a <HAL_TIM_IC_CaptureCallback>
 80053c4:	e005      	b.n	80053d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f8cd 	bl	8005566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f8de 	bl	800558e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d122      	bne.n	800542c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d11b      	bne.n	800542c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0208 	mvn.w	r2, #8
 80053fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2204      	movs	r2, #4
 8005402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f8b1 	bl	800557a <HAL_TIM_IC_CaptureCallback>
 8005418:	e005      	b.n	8005426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8a3 	bl	8005566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f8b4 	bl	800558e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b10      	cmp	r3, #16
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b10      	cmp	r3, #16
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0210 	mvn.w	r2, #16
 8005450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2208      	movs	r2, #8
 8005456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f887 	bl	800557a <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f879 	bl	8005566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f88a 	bl	800558e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b01      	cmp	r3, #1
 800548c:	d10e      	bne.n	80054ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b01      	cmp	r3, #1
 800549a:	d107      	bne.n	80054ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0201 	mvn.w	r2, #1
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fc f83c 	bl	8001524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	2b80      	cmp	r3, #128	; 0x80
 80054b8:	d10e      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c4:	2b80      	cmp	r3, #128	; 0x80
 80054c6:	d107      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f914 	bl	8005700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e6:	d10e      	bne.n	8005506 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f2:	2b80      	cmp	r3, #128	; 0x80
 80054f4:	d107      	bne.n	8005506 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f907 	bl	8005714 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d10e      	bne.n	8005532 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b40      	cmp	r3, #64	; 0x40
 8005520:	d107      	bne.n	8005532 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800552a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f838 	bl	80055a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b20      	cmp	r3, #32
 800553e:	d10e      	bne.n	800555e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b20      	cmp	r3, #32
 800554c:	d107      	bne.n	800555e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f06f 0220 	mvn.w	r2, #32
 8005556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f8c7 	bl	80056ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a40      	ldr	r2, [pc, #256]	; (80056cc <TIM_Base_SetConfig+0x114>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d6:	d00f      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a3d      	ldr	r2, [pc, #244]	; (80056d0 <TIM_Base_SetConfig+0x118>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a3c      	ldr	r2, [pc, #240]	; (80056d4 <TIM_Base_SetConfig+0x11c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3b      	ldr	r2, [pc, #236]	; (80056d8 <TIM_Base_SetConfig+0x120>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3a      	ldr	r2, [pc, #232]	; (80056dc <TIM_Base_SetConfig+0x124>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d108      	bne.n	800560a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2f      	ldr	r2, [pc, #188]	; (80056cc <TIM_Base_SetConfig+0x114>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d01f      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005618:	d01b      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2c      	ldr	r2, [pc, #176]	; (80056d0 <TIM_Base_SetConfig+0x118>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d017      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a2b      	ldr	r2, [pc, #172]	; (80056d4 <TIM_Base_SetConfig+0x11c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2a      	ldr	r2, [pc, #168]	; (80056d8 <TIM_Base_SetConfig+0x120>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00f      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a29      	ldr	r2, [pc, #164]	; (80056dc <TIM_Base_SetConfig+0x124>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00b      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a28      	ldr	r2, [pc, #160]	; (80056e0 <TIM_Base_SetConfig+0x128>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d007      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a27      	ldr	r2, [pc, #156]	; (80056e4 <TIM_Base_SetConfig+0x12c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d003      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a26      	ldr	r2, [pc, #152]	; (80056e8 <TIM_Base_SetConfig+0x130>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d108      	bne.n	8005664 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a10      	ldr	r2, [pc, #64]	; (80056cc <TIM_Base_SetConfig+0x114>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00f      	beq.n	80056b0 <TIM_Base_SetConfig+0xf8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a12      	ldr	r2, [pc, #72]	; (80056dc <TIM_Base_SetConfig+0x124>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00b      	beq.n	80056b0 <TIM_Base_SetConfig+0xf8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a11      	ldr	r2, [pc, #68]	; (80056e0 <TIM_Base_SetConfig+0x128>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d007      	beq.n	80056b0 <TIM_Base_SetConfig+0xf8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a10      	ldr	r2, [pc, #64]	; (80056e4 <TIM_Base_SetConfig+0x12c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_Base_SetConfig+0xf8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a0f      	ldr	r2, [pc, #60]	; (80056e8 <TIM_Base_SetConfig+0x130>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d103      	bne.n	80056b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	615a      	str	r2, [r3, #20]
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40000400 	.word	0x40000400
 80056d4:	40000800 	.word	0x40000800
 80056d8:	40000c00 	.word	0x40000c00
 80056dc:	40013400 	.word	0x40013400
 80056e0:	40014000 	.word	0x40014000
 80056e4:	40014400 	.word	0x40014400
 80056e8:	40014800 	.word	0x40014800

080056ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e040      	b.n	80057bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fc f900 	bl	8001950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2224      	movs	r2, #36	; 0x24
 8005754:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f8c0 	bl	80058ec <UART_SetConfig>
 800576c:	4603      	mov	r3, r0
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e022      	b.n	80057bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fb3e 	bl	8005e00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fbc5 	bl	8005f44 <UART_CheckIdleState>
 80057ba:	4603      	mov	r3, r0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	; 0x28
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057d8:	2b20      	cmp	r3, #32
 80057da:	f040 8082 	bne.w	80058e2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_UART_Transmit+0x26>
 80057e4:	88fb      	ldrh	r3, [r7, #6]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e07a      	b.n	80058e4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_UART_Transmit+0x38>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e073      	b.n	80058e4 <HAL_UART_Transmit+0x120>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2221      	movs	r2, #33	; 0x21
 8005810:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005812:	f7fc f993 	bl	8001b3c <HAL_GetTick>
 8005816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	88fa      	ldrh	r2, [r7, #6]
 8005824:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005830:	d108      	bne.n	8005844 <HAL_UART_Transmit+0x80>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d104      	bne.n	8005844 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	e003      	b.n	800584c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005848:	2300      	movs	r3, #0
 800584a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005854:	e02d      	b.n	80058b2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	2180      	movs	r1, #128	; 0x80
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fbb8 	bl	8005fd6 <UART_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e039      	b.n	80058e4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	881a      	ldrh	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005882:	b292      	uxth	r2, r2
 8005884:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	3302      	adds	r3, #2
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	e008      	b.n	80058a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	781a      	ldrb	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	b292      	uxth	r2, r2
 8005898:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	3301      	adds	r3, #1
 800589e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1cb      	bne.n	8005856 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	2140      	movs	r1, #64	; 0x40
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fb84 	bl	8005fd6 <UART_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e005      	b.n	80058e4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e000      	b.n	80058e4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80058e2:	2302      	movs	r3, #2
  }
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058ec:	b5b0      	push	{r4, r5, r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	4313      	orrs	r3, r2
 800590e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4bad      	ldr	r3, [pc, #692]	; (8005bcc <UART_SetConfig+0x2e0>)
 8005918:	4013      	ands	r3, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6812      	ldr	r2, [r2, #0]
 800591e:	69f9      	ldr	r1, [r7, #28]
 8005920:	430b      	orrs	r3, r1
 8005922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4aa2      	ldr	r2, [pc, #648]	; (8005bd0 <UART_SetConfig+0x2e4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d004      	beq.n	8005954 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	4313      	orrs	r3, r2
 8005952:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	430a      	orrs	r2, r1
 8005966:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a99      	ldr	r2, [pc, #612]	; (8005bd4 <UART_SetConfig+0x2e8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d121      	bne.n	80059b6 <UART_SetConfig+0xca>
 8005972:	4b99      	ldr	r3, [pc, #612]	; (8005bd8 <UART_SetConfig+0x2ec>)
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005978:	f003 0303 	and.w	r3, r3, #3
 800597c:	2b03      	cmp	r3, #3
 800597e:	d817      	bhi.n	80059b0 <UART_SetConfig+0xc4>
 8005980:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <UART_SetConfig+0x9c>)
 8005982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005986:	bf00      	nop
 8005988:	08005999 	.word	0x08005999
 800598c:	080059a5 	.word	0x080059a5
 8005990:	0800599f 	.word	0x0800599f
 8005994:	080059ab 	.word	0x080059ab
 8005998:	2301      	movs	r3, #1
 800599a:	76fb      	strb	r3, [r7, #27]
 800599c:	e0e7      	b.n	8005b6e <UART_SetConfig+0x282>
 800599e:	2302      	movs	r3, #2
 80059a0:	76fb      	strb	r3, [r7, #27]
 80059a2:	e0e4      	b.n	8005b6e <UART_SetConfig+0x282>
 80059a4:	2304      	movs	r3, #4
 80059a6:	76fb      	strb	r3, [r7, #27]
 80059a8:	e0e1      	b.n	8005b6e <UART_SetConfig+0x282>
 80059aa:	2308      	movs	r3, #8
 80059ac:	76fb      	strb	r3, [r7, #27]
 80059ae:	e0de      	b.n	8005b6e <UART_SetConfig+0x282>
 80059b0:	2310      	movs	r3, #16
 80059b2:	76fb      	strb	r3, [r7, #27]
 80059b4:	e0db      	b.n	8005b6e <UART_SetConfig+0x282>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a88      	ldr	r2, [pc, #544]	; (8005bdc <UART_SetConfig+0x2f0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d132      	bne.n	8005a26 <UART_SetConfig+0x13a>
 80059c0:	4b85      	ldr	r3, [pc, #532]	; (8005bd8 <UART_SetConfig+0x2ec>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	2b0c      	cmp	r3, #12
 80059cc:	d828      	bhi.n	8005a20 <UART_SetConfig+0x134>
 80059ce:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <UART_SetConfig+0xe8>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	08005a09 	.word	0x08005a09
 80059d8:	08005a21 	.word	0x08005a21
 80059dc:	08005a21 	.word	0x08005a21
 80059e0:	08005a21 	.word	0x08005a21
 80059e4:	08005a15 	.word	0x08005a15
 80059e8:	08005a21 	.word	0x08005a21
 80059ec:	08005a21 	.word	0x08005a21
 80059f0:	08005a21 	.word	0x08005a21
 80059f4:	08005a0f 	.word	0x08005a0f
 80059f8:	08005a21 	.word	0x08005a21
 80059fc:	08005a21 	.word	0x08005a21
 8005a00:	08005a21 	.word	0x08005a21
 8005a04:	08005a1b 	.word	0x08005a1b
 8005a08:	2300      	movs	r3, #0
 8005a0a:	76fb      	strb	r3, [r7, #27]
 8005a0c:	e0af      	b.n	8005b6e <UART_SetConfig+0x282>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	76fb      	strb	r3, [r7, #27]
 8005a12:	e0ac      	b.n	8005b6e <UART_SetConfig+0x282>
 8005a14:	2304      	movs	r3, #4
 8005a16:	76fb      	strb	r3, [r7, #27]
 8005a18:	e0a9      	b.n	8005b6e <UART_SetConfig+0x282>
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	76fb      	strb	r3, [r7, #27]
 8005a1e:	e0a6      	b.n	8005b6e <UART_SetConfig+0x282>
 8005a20:	2310      	movs	r3, #16
 8005a22:	76fb      	strb	r3, [r7, #27]
 8005a24:	e0a3      	b.n	8005b6e <UART_SetConfig+0x282>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a6d      	ldr	r2, [pc, #436]	; (8005be0 <UART_SetConfig+0x2f4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d120      	bne.n	8005a72 <UART_SetConfig+0x186>
 8005a30:	4b69      	ldr	r3, [pc, #420]	; (8005bd8 <UART_SetConfig+0x2ec>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a3a:	2b30      	cmp	r3, #48	; 0x30
 8005a3c:	d013      	beq.n	8005a66 <UART_SetConfig+0x17a>
 8005a3e:	2b30      	cmp	r3, #48	; 0x30
 8005a40:	d814      	bhi.n	8005a6c <UART_SetConfig+0x180>
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d009      	beq.n	8005a5a <UART_SetConfig+0x16e>
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d810      	bhi.n	8005a6c <UART_SetConfig+0x180>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <UART_SetConfig+0x168>
 8005a4e:	2b10      	cmp	r3, #16
 8005a50:	d006      	beq.n	8005a60 <UART_SetConfig+0x174>
 8005a52:	e00b      	b.n	8005a6c <UART_SetConfig+0x180>
 8005a54:	2300      	movs	r3, #0
 8005a56:	76fb      	strb	r3, [r7, #27]
 8005a58:	e089      	b.n	8005b6e <UART_SetConfig+0x282>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	76fb      	strb	r3, [r7, #27]
 8005a5e:	e086      	b.n	8005b6e <UART_SetConfig+0x282>
 8005a60:	2304      	movs	r3, #4
 8005a62:	76fb      	strb	r3, [r7, #27]
 8005a64:	e083      	b.n	8005b6e <UART_SetConfig+0x282>
 8005a66:	2308      	movs	r3, #8
 8005a68:	76fb      	strb	r3, [r7, #27]
 8005a6a:	e080      	b.n	8005b6e <UART_SetConfig+0x282>
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	76fb      	strb	r3, [r7, #27]
 8005a70:	e07d      	b.n	8005b6e <UART_SetConfig+0x282>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a5b      	ldr	r2, [pc, #364]	; (8005be4 <UART_SetConfig+0x2f8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d120      	bne.n	8005abe <UART_SetConfig+0x1d2>
 8005a7c:	4b56      	ldr	r3, [pc, #344]	; (8005bd8 <UART_SetConfig+0x2ec>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a86:	2bc0      	cmp	r3, #192	; 0xc0
 8005a88:	d013      	beq.n	8005ab2 <UART_SetConfig+0x1c6>
 8005a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a8c:	d814      	bhi.n	8005ab8 <UART_SetConfig+0x1cc>
 8005a8e:	2b80      	cmp	r3, #128	; 0x80
 8005a90:	d009      	beq.n	8005aa6 <UART_SetConfig+0x1ba>
 8005a92:	2b80      	cmp	r3, #128	; 0x80
 8005a94:	d810      	bhi.n	8005ab8 <UART_SetConfig+0x1cc>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <UART_SetConfig+0x1b4>
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d006      	beq.n	8005aac <UART_SetConfig+0x1c0>
 8005a9e:	e00b      	b.n	8005ab8 <UART_SetConfig+0x1cc>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	76fb      	strb	r3, [r7, #27]
 8005aa4:	e063      	b.n	8005b6e <UART_SetConfig+0x282>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	76fb      	strb	r3, [r7, #27]
 8005aaa:	e060      	b.n	8005b6e <UART_SetConfig+0x282>
 8005aac:	2304      	movs	r3, #4
 8005aae:	76fb      	strb	r3, [r7, #27]
 8005ab0:	e05d      	b.n	8005b6e <UART_SetConfig+0x282>
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	76fb      	strb	r3, [r7, #27]
 8005ab6:	e05a      	b.n	8005b6e <UART_SetConfig+0x282>
 8005ab8:	2310      	movs	r3, #16
 8005aba:	76fb      	strb	r3, [r7, #27]
 8005abc:	e057      	b.n	8005b6e <UART_SetConfig+0x282>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a49      	ldr	r2, [pc, #292]	; (8005be8 <UART_SetConfig+0x2fc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d125      	bne.n	8005b14 <UART_SetConfig+0x228>
 8005ac8:	4b43      	ldr	r3, [pc, #268]	; (8005bd8 <UART_SetConfig+0x2ec>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad6:	d017      	beq.n	8005b08 <UART_SetConfig+0x21c>
 8005ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005adc:	d817      	bhi.n	8005b0e <UART_SetConfig+0x222>
 8005ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae2:	d00b      	beq.n	8005afc <UART_SetConfig+0x210>
 8005ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae8:	d811      	bhi.n	8005b0e <UART_SetConfig+0x222>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <UART_SetConfig+0x20a>
 8005aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af2:	d006      	beq.n	8005b02 <UART_SetConfig+0x216>
 8005af4:	e00b      	b.n	8005b0e <UART_SetConfig+0x222>
 8005af6:	2300      	movs	r3, #0
 8005af8:	76fb      	strb	r3, [r7, #27]
 8005afa:	e038      	b.n	8005b6e <UART_SetConfig+0x282>
 8005afc:	2302      	movs	r3, #2
 8005afe:	76fb      	strb	r3, [r7, #27]
 8005b00:	e035      	b.n	8005b6e <UART_SetConfig+0x282>
 8005b02:	2304      	movs	r3, #4
 8005b04:	76fb      	strb	r3, [r7, #27]
 8005b06:	e032      	b.n	8005b6e <UART_SetConfig+0x282>
 8005b08:	2308      	movs	r3, #8
 8005b0a:	76fb      	strb	r3, [r7, #27]
 8005b0c:	e02f      	b.n	8005b6e <UART_SetConfig+0x282>
 8005b0e:	2310      	movs	r3, #16
 8005b10:	76fb      	strb	r3, [r7, #27]
 8005b12:	e02c      	b.n	8005b6e <UART_SetConfig+0x282>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a2d      	ldr	r2, [pc, #180]	; (8005bd0 <UART_SetConfig+0x2e4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d125      	bne.n	8005b6a <UART_SetConfig+0x27e>
 8005b1e:	4b2e      	ldr	r3, [pc, #184]	; (8005bd8 <UART_SetConfig+0x2ec>)
 8005b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b2c:	d017      	beq.n	8005b5e <UART_SetConfig+0x272>
 8005b2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b32:	d817      	bhi.n	8005b64 <UART_SetConfig+0x278>
 8005b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b38:	d00b      	beq.n	8005b52 <UART_SetConfig+0x266>
 8005b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3e:	d811      	bhi.n	8005b64 <UART_SetConfig+0x278>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <UART_SetConfig+0x260>
 8005b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b48:	d006      	beq.n	8005b58 <UART_SetConfig+0x26c>
 8005b4a:	e00b      	b.n	8005b64 <UART_SetConfig+0x278>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	76fb      	strb	r3, [r7, #27]
 8005b50:	e00d      	b.n	8005b6e <UART_SetConfig+0x282>
 8005b52:	2302      	movs	r3, #2
 8005b54:	76fb      	strb	r3, [r7, #27]
 8005b56:	e00a      	b.n	8005b6e <UART_SetConfig+0x282>
 8005b58:	2304      	movs	r3, #4
 8005b5a:	76fb      	strb	r3, [r7, #27]
 8005b5c:	e007      	b.n	8005b6e <UART_SetConfig+0x282>
 8005b5e:	2308      	movs	r3, #8
 8005b60:	76fb      	strb	r3, [r7, #27]
 8005b62:	e004      	b.n	8005b6e <UART_SetConfig+0x282>
 8005b64:	2310      	movs	r3, #16
 8005b66:	76fb      	strb	r3, [r7, #27]
 8005b68:	e001      	b.n	8005b6e <UART_SetConfig+0x282>
 8005b6a:	2310      	movs	r3, #16
 8005b6c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <UART_SetConfig+0x2e4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	f040 8087 	bne.w	8005c88 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b7a:	7efb      	ldrb	r3, [r7, #27]
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d837      	bhi.n	8005bf0 <UART_SetConfig+0x304>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <UART_SetConfig+0x29c>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005bf1 	.word	0x08005bf1
 8005b90:	08005bb5 	.word	0x08005bb5
 8005b94:	08005bf1 	.word	0x08005bf1
 8005b98:	08005bbb 	.word	0x08005bbb
 8005b9c:	08005bf1 	.word	0x08005bf1
 8005ba0:	08005bf1 	.word	0x08005bf1
 8005ba4:	08005bf1 	.word	0x08005bf1
 8005ba8:	08005bc3 	.word	0x08005bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bac:	f7fe fdac 	bl	8004708 <HAL_RCC_GetPCLK1Freq>
 8005bb0:	6178      	str	r0, [r7, #20]
        break;
 8005bb2:	e022      	b.n	8005bfa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bb4:	4b0d      	ldr	r3, [pc, #52]	; (8005bec <UART_SetConfig+0x300>)
 8005bb6:	617b      	str	r3, [r7, #20]
        break;
 8005bb8:	e01f      	b.n	8005bfa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bba:	f7fe fd0d 	bl	80045d8 <HAL_RCC_GetSysClockFreq>
 8005bbe:	6178      	str	r0, [r7, #20]
        break;
 8005bc0:	e01b      	b.n	8005bfa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bc6:	617b      	str	r3, [r7, #20]
        break;
 8005bc8:	e017      	b.n	8005bfa <UART_SetConfig+0x30e>
 8005bca:	bf00      	nop
 8005bcc:	efff69f3 	.word	0xefff69f3
 8005bd0:	40008000 	.word	0x40008000
 8005bd4:	40013800 	.word	0x40013800
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	40004400 	.word	0x40004400
 8005be0:	40004800 	.word	0x40004800
 8005be4:	40004c00 	.word	0x40004c00
 8005be8:	40005000 	.word	0x40005000
 8005bec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	76bb      	strb	r3, [r7, #26]
        break;
 8005bf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 80f1 	beq.w	8005de4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	4613      	mov	r3, r2
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	4413      	add	r3, r2
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d305      	bcc.n	8005c1e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d902      	bls.n	8005c24 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	76bb      	strb	r3, [r7, #26]
 8005c22:	e0df      	b.n	8005de4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f04f 0100 	mov.w	r1, #0
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	020b      	lsls	r3, r1, #8
 8005c36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c3a:	0202      	lsls	r2, r0, #8
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	6849      	ldr	r1, [r1, #4]
 8005c40:	0849      	lsrs	r1, r1, #1
 8005c42:	4608      	mov	r0, r1
 8005c44:	f04f 0100 	mov.w	r1, #0
 8005c48:	1814      	adds	r4, r2, r0
 8005c4a:	eb43 0501 	adc.w	r5, r3, r1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	461a      	mov	r2, r3
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	4620      	mov	r0, r4
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	f7fb f814 	bl	8000c88 <__aeabi_uldivmod>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4613      	mov	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c6e:	d308      	bcc.n	8005c82 <UART_SetConfig+0x396>
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c76:	d204      	bcs.n	8005c82 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	60da      	str	r2, [r3, #12]
 8005c80:	e0b0      	b.n	8005de4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	76bb      	strb	r3, [r7, #26]
 8005c86:	e0ad      	b.n	8005de4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c90:	d15c      	bne.n	8005d4c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005c92:	7efb      	ldrb	r3, [r7, #27]
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d828      	bhi.n	8005cea <UART_SetConfig+0x3fe>
 8005c98:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <UART_SetConfig+0x3b4>)
 8005c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9e:	bf00      	nop
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005ccd 	.word	0x08005ccd
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005ceb 	.word	0x08005ceb
 8005cb0:	08005cdb 	.word	0x08005cdb
 8005cb4:	08005ceb 	.word	0x08005ceb
 8005cb8:	08005ceb 	.word	0x08005ceb
 8005cbc:	08005ceb 	.word	0x08005ceb
 8005cc0:	08005ce3 	.word	0x08005ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7fe fd20 	bl	8004708 <HAL_RCC_GetPCLK1Freq>
 8005cc8:	6178      	str	r0, [r7, #20]
        break;
 8005cca:	e013      	b.n	8005cf4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ccc:	f7fe fd32 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 8005cd0:	6178      	str	r0, [r7, #20]
        break;
 8005cd2:	e00f      	b.n	8005cf4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd4:	4b49      	ldr	r3, [pc, #292]	; (8005dfc <UART_SetConfig+0x510>)
 8005cd6:	617b      	str	r3, [r7, #20]
        break;
 8005cd8:	e00c      	b.n	8005cf4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cda:	f7fe fc7d 	bl	80045d8 <HAL_RCC_GetSysClockFreq>
 8005cde:	6178      	str	r0, [r7, #20]
        break;
 8005ce0:	e008      	b.n	8005cf4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce6:	617b      	str	r3, [r7, #20]
        break;
 8005ce8:	e004      	b.n	8005cf4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	76bb      	strb	r3, [r7, #26]
        break;
 8005cf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d074      	beq.n	8005de4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	005a      	lsls	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	441a      	add	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b0f      	cmp	r3, #15
 8005d16:	d916      	bls.n	8005d46 <UART_SetConfig+0x45a>
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d1e:	d212      	bcs.n	8005d46 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f023 030f 	bic.w	r3, r3, #15
 8005d28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	085b      	lsrs	r3, r3, #1
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	89fb      	ldrh	r3, [r7, #14]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	89fa      	ldrh	r2, [r7, #14]
 8005d42:	60da      	str	r2, [r3, #12]
 8005d44:	e04e      	b.n	8005de4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	76bb      	strb	r3, [r7, #26]
 8005d4a:	e04b      	b.n	8005de4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d4c:	7efb      	ldrb	r3, [r7, #27]
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d827      	bhi.n	8005da2 <UART_SetConfig+0x4b6>
 8005d52:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <UART_SetConfig+0x46c>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08005d8d 	.word	0x08005d8d
 8005d64:	08005da3 	.word	0x08005da3
 8005d68:	08005d93 	.word	0x08005d93
 8005d6c:	08005da3 	.word	0x08005da3
 8005d70:	08005da3 	.word	0x08005da3
 8005d74:	08005da3 	.word	0x08005da3
 8005d78:	08005d9b 	.word	0x08005d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d7c:	f7fe fcc4 	bl	8004708 <HAL_RCC_GetPCLK1Freq>
 8005d80:	6178      	str	r0, [r7, #20]
        break;
 8005d82:	e013      	b.n	8005dac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d84:	f7fe fcd6 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 8005d88:	6178      	str	r0, [r7, #20]
        break;
 8005d8a:	e00f      	b.n	8005dac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d8c:	4b1b      	ldr	r3, [pc, #108]	; (8005dfc <UART_SetConfig+0x510>)
 8005d8e:	617b      	str	r3, [r7, #20]
        break;
 8005d90:	e00c      	b.n	8005dac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d92:	f7fe fc21 	bl	80045d8 <HAL_RCC_GetSysClockFreq>
 8005d96:	6178      	str	r0, [r7, #20]
        break;
 8005d98:	e008      	b.n	8005dac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9e:	617b      	str	r3, [r7, #20]
        break;
 8005da0:	e004      	b.n	8005dac <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	76bb      	strb	r3, [r7, #26]
        break;
 8005daa:	bf00      	nop
    }

    if (pclk != 0U)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d018      	beq.n	8005de4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	085a      	lsrs	r2, r3, #1
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	441a      	add	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	2b0f      	cmp	r3, #15
 8005dcc:	d908      	bls.n	8005de0 <UART_SetConfig+0x4f4>
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd4:	d204      	bcs.n	8005de0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	60da      	str	r2, [r3, #12]
 8005dde:	e001      	b.n	8005de4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005df0:	7ebb      	ldrb	r3, [r7, #26]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3720      	adds	r7, #32
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bdb0      	pop	{r4, r5, r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	00f42400 	.word	0x00f42400

08005e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01a      	beq.n	8005f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005efe:	d10a      	bne.n	8005f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	605a      	str	r2, [r3, #4]
  }
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f54:	f7fb fdf2 	bl	8001b3c <HAL_GetTick>
 8005f58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d10e      	bne.n	8005f86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f82d 	bl	8005fd6 <UART_WaitOnFlagUntilTimeout>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e023      	b.n	8005fce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d10e      	bne.n	8005fb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f817 	bl	8005fd6 <UART_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e00d      	b.n	8005fce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	603b      	str	r3, [r7, #0]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe6:	e05e      	b.n	80060a6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fee:	d05a      	beq.n	80060a6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff0:	f7fb fda4 	bl	8001b3c <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d302      	bcc.n	8006006 <UART_WaitOnFlagUntilTimeout+0x30>
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d11b      	bne.n	800603e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006014:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0201 	bic.w	r2, r2, #1
 8006024:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2220      	movs	r2, #32
 8006030:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e043      	b.n	80060c6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d02c      	beq.n	80060a6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800605a:	d124      	bne.n	80060a6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006064:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006074:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e00f      	b.n	80060c6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69da      	ldr	r2, [r3, #28]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4013      	ands	r3, r2
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	bf0c      	ite	eq
 80060b6:	2301      	moveq	r3, #1
 80060b8:	2300      	movne	r3, #0
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	461a      	mov	r2, r3
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d091      	beq.n	8005fe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <arm_max_f32>:
 80060d0:	f101 3cff 	add.w	ip, r1, #4294967295
 80060d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d6:	4607      	mov	r7, r0
 80060d8:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 80060dc:	ecf7 7a01 	vldmia	r7!, {s15}
 80060e0:	d060      	beq.n	80061a4 <arm_max_f32+0xd4>
 80060e2:	2400      	movs	r4, #0
 80060e4:	3014      	adds	r0, #20
 80060e6:	4625      	mov	r5, r4
 80060e8:	ea4f 068e 	mov.w	r6, lr, lsl #2
 80060ec:	ed10 7a04 	vldr	s14, [r0, #-16]
 80060f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f8:	bf48      	it	mi
 80060fa:	eef0 7a47 	vmovmi.f32	s15, s14
 80060fe:	ed10 7a03 	vldr	s14, [r0, #-12]
 8006102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006106:	bf48      	it	mi
 8006108:	1c65      	addmi	r5, r4, #1
 800610a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610e:	bf48      	it	mi
 8006110:	eef0 7a47 	vmovmi.f32	s15, s14
 8006114:	ed10 7a02 	vldr	s14, [r0, #-8]
 8006118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800611c:	bf48      	it	mi
 800611e:	1ca5      	addmi	r5, r4, #2
 8006120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006124:	bf48      	it	mi
 8006126:	eef0 7a47 	vmovmi.f32	s15, s14
 800612a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800612e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006132:	bf48      	it	mi
 8006134:	1ce5      	addmi	r5, r4, #3
 8006136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613a:	f104 0404 	add.w	r4, r4, #4
 800613e:	bf44      	itt	mi
 8006140:	eef0 7a47 	vmovmi.f32	s15, s14
 8006144:	4625      	movmi	r5, r4
 8006146:	42a6      	cmp	r6, r4
 8006148:	f100 0010 	add.w	r0, r0, #16
 800614c:	d1ce      	bne.n	80060ec <arm_max_f32+0x1c>
 800614e:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8006152:	f01c 0003 	ands.w	r0, ip, #3
 8006156:	d021      	beq.n	800619c <arm_max_f32+0xcc>
 8006158:	ed97 7a00 	vldr	s14, [r7]
 800615c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006164:	bfc4      	itt	gt
 8006166:	eef0 7a47 	vmovgt.f32	s15, s14
 800616a:	1a0d      	subgt	r5, r1, r0
 800616c:	3801      	subs	r0, #1
 800616e:	d015      	beq.n	800619c <arm_max_f32+0xcc>
 8006170:	ed97 7a01 	vldr	s14, [r7, #4]
 8006174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617c:	bf44      	itt	mi
 800617e:	eef0 7a47 	vmovmi.f32	s15, s14
 8006182:	1a0d      	submi	r5, r1, r0
 8006184:	2801      	cmp	r0, #1
 8006186:	d009      	beq.n	800619c <arm_max_f32+0xcc>
 8006188:	ed97 7a02 	vldr	s14, [r7, #8]
 800618c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006194:	bfc4      	itt	gt
 8006196:	eef0 7a47 	vmovgt.f32	s15, s14
 800619a:	4665      	movgt	r5, ip
 800619c:	edc2 7a00 	vstr	s15, [r2]
 80061a0:	601d      	str	r5, [r3, #0]
 80061a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061a4:	4675      	mov	r5, lr
 80061a6:	e7d4      	b.n	8006152 <arm_max_f32+0x82>

080061a8 <arm_rfft_32_fast_init_f32>:
 80061a8:	b178      	cbz	r0, 80061ca <arm_rfft_32_fast_init_f32+0x22>
 80061aa:	b430      	push	{r4, r5}
 80061ac:	4908      	ldr	r1, [pc, #32]	; (80061d0 <arm_rfft_32_fast_init_f32+0x28>)
 80061ae:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <arm_rfft_32_fast_init_f32+0x2c>)
 80061b0:	2310      	movs	r3, #16
 80061b2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80061b6:	8003      	strh	r3, [r0, #0]
 80061b8:	2520      	movs	r5, #32
 80061ba:	2414      	movs	r4, #20
 80061bc:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <arm_rfft_32_fast_init_f32+0x30>)
 80061be:	8205      	strh	r5, [r0, #16]
 80061c0:	8184      	strh	r4, [r0, #12]
 80061c2:	6143      	str	r3, [r0, #20]
 80061c4:	bc30      	pop	{r4, r5}
 80061c6:	2000      	movs	r0, #0
 80061c8:	4770      	bx	lr
 80061ca:	f04f 30ff 	mov.w	r0, #4294967295
 80061ce:	4770      	bx	lr
 80061d0:	0800cdd8 	.word	0x0800cdd8
 80061d4:	08011710 	.word	0x08011710
 80061d8:	0801a490 	.word	0x0801a490

080061dc <arm_rfft_64_fast_init_f32>:
 80061dc:	b178      	cbz	r0, 80061fe <arm_rfft_64_fast_init_f32+0x22>
 80061de:	b430      	push	{r4, r5}
 80061e0:	4908      	ldr	r1, [pc, #32]	; (8006204 <arm_rfft_64_fast_init_f32+0x28>)
 80061e2:	4a09      	ldr	r2, [pc, #36]	; (8006208 <arm_rfft_64_fast_init_f32+0x2c>)
 80061e4:	2320      	movs	r3, #32
 80061e6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80061ea:	8003      	strh	r3, [r0, #0]
 80061ec:	2540      	movs	r5, #64	; 0x40
 80061ee:	2430      	movs	r4, #48	; 0x30
 80061f0:	4b06      	ldr	r3, [pc, #24]	; (800620c <arm_rfft_64_fast_init_f32+0x30>)
 80061f2:	8205      	strh	r5, [r0, #16]
 80061f4:	8184      	strh	r4, [r0, #12]
 80061f6:	6143      	str	r3, [r0, #20]
 80061f8:	bc30      	pop	{r4, r5}
 80061fa:	2000      	movs	r0, #0
 80061fc:	4770      	bx	lr
 80061fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006202:	4770      	bx	lr
 8006204:	0800ef30 	.word	0x0800ef30
 8006208:	08015f90 	.word	0x08015f90
 800620c:	0801ed10 	.word	0x0801ed10

08006210 <arm_rfft_256_fast_init_f32>:
 8006210:	b180      	cbz	r0, 8006234 <arm_rfft_256_fast_init_f32+0x24>
 8006212:	b430      	push	{r4, r5}
 8006214:	4909      	ldr	r1, [pc, #36]	; (800623c <arm_rfft_256_fast_init_f32+0x2c>)
 8006216:	4a0a      	ldr	r2, [pc, #40]	; (8006240 <arm_rfft_256_fast_init_f32+0x30>)
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800621e:	8003      	strh	r3, [r0, #0]
 8006220:	f44f 7580 	mov.w	r5, #256	; 0x100
 8006224:	24d0      	movs	r4, #208	; 0xd0
 8006226:	4b07      	ldr	r3, [pc, #28]	; (8006244 <arm_rfft_256_fast_init_f32+0x34>)
 8006228:	8205      	strh	r5, [r0, #16]
 800622a:	8184      	strh	r4, [r0, #12]
 800622c:	6143      	str	r3, [r0, #20]
 800622e:	bc30      	pop	{r4, r5}
 8006230:	2000      	movs	r0, #0
 8006232:	4770      	bx	lr
 8006234:	f04f 30ff 	mov.w	r0, #4294967295
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	0800cc38 	.word	0x0800cc38
 8006240:	08011310 	.word	0x08011310
 8006244:	0801a090 	.word	0x0801a090

08006248 <arm_rfft_512_fast_init_f32>:
 8006248:	b190      	cbz	r0, 8006270 <arm_rfft_512_fast_init_f32+0x28>
 800624a:	b430      	push	{r4, r5}
 800624c:	490a      	ldr	r1, [pc, #40]	; (8006278 <arm_rfft_512_fast_init_f32+0x30>)
 800624e:	4a0b      	ldr	r2, [pc, #44]	; (800627c <arm_rfft_512_fast_init_f32+0x34>)
 8006250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006254:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006258:	8003      	strh	r3, [r0, #0]
 800625a:	f44f 7500 	mov.w	r5, #512	; 0x200
 800625e:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <arm_rfft_512_fast_init_f32+0x38>)
 8006264:	8205      	strh	r5, [r0, #16]
 8006266:	8184      	strh	r4, [r0, #12]
 8006268:	6143      	str	r3, [r0, #20]
 800626a:	bc30      	pop	{r4, r5}
 800626c:	2000      	movs	r0, #0
 800626e:	4770      	bx	lr
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	0800ebc0 	.word	0x0800ebc0
 800627c:	08015790 	.word	0x08015790
 8006280:	0801e510 	.word	0x0801e510

08006284 <arm_rfft_1024_fast_init_f32>:
 8006284:	b190      	cbz	r0, 80062ac <arm_rfft_1024_fast_init_f32+0x28>
 8006286:	b430      	push	{r4, r5}
 8006288:	490a      	ldr	r1, [pc, #40]	; (80062b4 <arm_rfft_1024_fast_init_f32+0x30>)
 800628a:	4a0b      	ldr	r2, [pc, #44]	; (80062b8 <arm_rfft_1024_fast_init_f32+0x34>)
 800628c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006290:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006294:	8003      	strh	r3, [r0, #0]
 8006296:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800629a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800629e:	4b07      	ldr	r3, [pc, #28]	; (80062bc <arm_rfft_1024_fast_init_f32+0x38>)
 80062a0:	8205      	strh	r5, [r0, #16]
 80062a2:	8184      	strh	r4, [r0, #12]
 80062a4:	6143      	str	r3, [r0, #20]
 80062a6:	bc30      	pop	{r4, r5}
 80062a8:	2000      	movs	r0, #0
 80062aa:	4770      	bx	lr
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	0800ef90 	.word	0x0800ef90
 80062b8:	08016090 	.word	0x08016090
 80062bc:	08017090 	.word	0x08017090

080062c0 <arm_rfft_2048_fast_init_f32>:
 80062c0:	b190      	cbz	r0, 80062e8 <arm_rfft_2048_fast_init_f32+0x28>
 80062c2:	b430      	push	{r4, r5}
 80062c4:	490a      	ldr	r1, [pc, #40]	; (80062f0 <arm_rfft_2048_fast_init_f32+0x30>)
 80062c6:	4a0b      	ldr	r2, [pc, #44]	; (80062f4 <arm_rfft_2048_fast_init_f32+0x34>)
 80062c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062cc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80062d0:	8003      	strh	r3, [r0, #0]
 80062d2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80062d6:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80062da:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <arm_rfft_2048_fast_init_f32+0x38>)
 80062dc:	8205      	strh	r5, [r0, #16]
 80062de:	8184      	strh	r4, [r0, #12]
 80062e0:	6143      	str	r3, [r0, #20]
 80062e2:	bc30      	pop	{r4, r5}
 80062e4:	2000      	movs	r0, #0
 80062e6:	4770      	bx	lr
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	0800be28 	.word	0x0800be28
 80062f4:	0800f310 	.word	0x0800f310
 80062f8:	08018090 	.word	0x08018090

080062fc <arm_rfft_4096_fast_init_f32>:
 80062fc:	b190      	cbz	r0, 8006324 <arm_rfft_4096_fast_init_f32+0x28>
 80062fe:	b430      	push	{r4, r5}
 8006300:	490a      	ldr	r1, [pc, #40]	; (800632c <arm_rfft_4096_fast_init_f32+0x30>)
 8006302:	4a0b      	ldr	r2, [pc, #44]	; (8006330 <arm_rfft_4096_fast_init_f32+0x34>)
 8006304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006308:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800630c:	8003      	strh	r3, [r0, #0]
 800630e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8006312:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8006316:	4b07      	ldr	r3, [pc, #28]	; (8006334 <arm_rfft_4096_fast_init_f32+0x38>)
 8006318:	8205      	strh	r5, [r0, #16]
 800631a:	8184      	strh	r4, [r0, #12]
 800631c:	6143      	str	r3, [r0, #20]
 800631e:	bc30      	pop	{r4, r5}
 8006320:	2000      	movs	r0, #0
 8006322:	4770      	bx	lr
 8006324:	f04f 30ff 	mov.w	r0, #4294967295
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	0800ce00 	.word	0x0800ce00
 8006330:	08011790 	.word	0x08011790
 8006334:	0801a510 	.word	0x0801a510

08006338 <arm_rfft_fast_init_f32>:
 8006338:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800633c:	d01f      	beq.n	800637e <arm_rfft_fast_init_f32+0x46>
 800633e:	d90b      	bls.n	8006358 <arm_rfft_fast_init_f32+0x20>
 8006340:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006344:	d019      	beq.n	800637a <arm_rfft_fast_init_f32+0x42>
 8006346:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800634a:	d012      	beq.n	8006372 <arm_rfft_fast_init_f32+0x3a>
 800634c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006350:	d00d      	beq.n	800636e <arm_rfft_fast_init_f32+0x36>
 8006352:	f04f 30ff 	mov.w	r0, #4294967295
 8006356:	4770      	bx	lr
 8006358:	2940      	cmp	r1, #64	; 0x40
 800635a:	d00c      	beq.n	8006376 <arm_rfft_fast_init_f32+0x3e>
 800635c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006360:	d003      	beq.n	800636a <arm_rfft_fast_init_f32+0x32>
 8006362:	2920      	cmp	r1, #32
 8006364:	d1f5      	bne.n	8006352 <arm_rfft_fast_init_f32+0x1a>
 8006366:	4b07      	ldr	r3, [pc, #28]	; (8006384 <arm_rfft_fast_init_f32+0x4c>)
 8006368:	4718      	bx	r3
 800636a:	4b07      	ldr	r3, [pc, #28]	; (8006388 <arm_rfft_fast_init_f32+0x50>)
 800636c:	4718      	bx	r3
 800636e:	4b07      	ldr	r3, [pc, #28]	; (800638c <arm_rfft_fast_init_f32+0x54>)
 8006370:	4718      	bx	r3
 8006372:	4b07      	ldr	r3, [pc, #28]	; (8006390 <arm_rfft_fast_init_f32+0x58>)
 8006374:	4718      	bx	r3
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <arm_rfft_fast_init_f32+0x5c>)
 8006378:	e7f6      	b.n	8006368 <arm_rfft_fast_init_f32+0x30>
 800637a:	4b07      	ldr	r3, [pc, #28]	; (8006398 <arm_rfft_fast_init_f32+0x60>)
 800637c:	e7f4      	b.n	8006368 <arm_rfft_fast_init_f32+0x30>
 800637e:	4b07      	ldr	r3, [pc, #28]	; (800639c <arm_rfft_fast_init_f32+0x64>)
 8006380:	e7f2      	b.n	8006368 <arm_rfft_fast_init_f32+0x30>
 8006382:	bf00      	nop
 8006384:	080061a9 	.word	0x080061a9
 8006388:	08006211 	.word	0x08006211
 800638c:	08006285 	.word	0x08006285
 8006390:	080062fd 	.word	0x080062fd
 8006394:	080061dd 	.word	0x080061dd
 8006398:	080062c1 	.word	0x080062c1
 800639c:	08006249 	.word	0x08006249

080063a0 <stage_rfft_f32>:
 80063a0:	b410      	push	{r4}
 80063a2:	edd1 7a00 	vldr	s15, [r1]
 80063a6:	ed91 7a01 	vldr	s14, [r1, #4]
 80063aa:	8804      	ldrh	r4, [r0, #0]
 80063ac:	6940      	ldr	r0, [r0, #20]
 80063ae:	ee37 7a07 	vadd.f32	s14, s14, s14
 80063b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80063b6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80063ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 80063be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063c2:	3c01      	subs	r4, #1
 80063c4:	ee26 7a84 	vmul.f32	s14, s13, s8
 80063c8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80063cc:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80063d0:	ed82 7a00 	vstr	s14, [r2]
 80063d4:	edc2 7a01 	vstr	s15, [r2, #4]
 80063d8:	3010      	adds	r0, #16
 80063da:	3210      	adds	r2, #16
 80063dc:	3b08      	subs	r3, #8
 80063de:	3110      	adds	r1, #16
 80063e0:	ed11 5a02 	vldr	s10, [r1, #-8]
 80063e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80063e8:	ed50 6a02 	vldr	s13, [r0, #-8]
 80063ec:	edd3 4a03 	vldr	s9, [r3, #12]
 80063f0:	ed51 7a01 	vldr	s15, [r1, #-4]
 80063f4:	ed10 6a01 	vldr	s12, [r0, #-4]
 80063f8:	ee77 5a45 	vsub.f32	s11, s14, s10
 80063fc:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006400:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006404:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006408:	ee66 5a25 	vmul.f32	s11, s12, s11
 800640c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006410:	ee37 7a23 	vadd.f32	s14, s14, s7
 8006414:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006418:	ee26 6a05 	vmul.f32	s12, s12, s10
 800641c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006420:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006424:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006428:	ee27 7a04 	vmul.f32	s14, s14, s8
 800642c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006430:	3c01      	subs	r4, #1
 8006432:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006436:	ed42 7a01 	vstr	s15, [r2, #-4]
 800643a:	f1a3 0308 	sub.w	r3, r3, #8
 800643e:	f101 0108 	add.w	r1, r1, #8
 8006442:	f100 0008 	add.w	r0, r0, #8
 8006446:	f102 0208 	add.w	r2, r2, #8
 800644a:	d1c9      	bne.n	80063e0 <stage_rfft_f32+0x40>
 800644c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop

08006454 <merge_rfft_f32>:
 8006454:	b410      	push	{r4}
 8006456:	edd1 7a00 	vldr	s15, [r1]
 800645a:	edd1 6a01 	vldr	s13, [r1, #4]
 800645e:	8804      	ldrh	r4, [r0, #0]
 8006460:	6940      	ldr	r0, [r0, #20]
 8006462:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006466:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800646a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800646e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006472:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006476:	3c01      	subs	r4, #1
 8006478:	ed82 7a00 	vstr	s14, [r2]
 800647c:	edc2 7a01 	vstr	s15, [r2, #4]
 8006480:	b3dc      	cbz	r4, 80064fa <merge_rfft_f32+0xa6>
 8006482:	00e3      	lsls	r3, r4, #3
 8006484:	3b08      	subs	r3, #8
 8006486:	440b      	add	r3, r1
 8006488:	3010      	adds	r0, #16
 800648a:	3210      	adds	r2, #16
 800648c:	3110      	adds	r1, #16
 800648e:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006492:	ed93 7a02 	vldr	s14, [r3, #8]
 8006496:	ed50 6a02 	vldr	s13, [r0, #-8]
 800649a:	edd3 4a03 	vldr	s9, [r3, #12]
 800649e:	ed51 7a01 	vldr	s15, [r1, #-4]
 80064a2:	ed10 6a01 	vldr	s12, [r0, #-4]
 80064a6:	ee75 5a47 	vsub.f32	s11, s10, s14
 80064aa:	ee37 7a05 	vadd.f32	s14, s14, s10
 80064ae:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80064b2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80064b6:	ee66 5a25 	vmul.f32	s11, s12, s11
 80064ba:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80064be:	ee37 7a63 	vsub.f32	s14, s14, s7
 80064c2:	ee66 6a85 	vmul.f32	s13, s13, s10
 80064c6:	ee26 6a05 	vmul.f32	s12, s12, s10
 80064ca:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80064ce:	ee37 7a46 	vsub.f32	s14, s14, s12
 80064d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80064da:	ee67 7a84 	vmul.f32	s15, s15, s8
 80064de:	3c01      	subs	r4, #1
 80064e0:	ed02 7a02 	vstr	s14, [r2, #-8]
 80064e4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80064e8:	f1a3 0308 	sub.w	r3, r3, #8
 80064ec:	f101 0108 	add.w	r1, r1, #8
 80064f0:	f100 0008 	add.w	r0, r0, #8
 80064f4:	f102 0208 	add.w	r2, r2, #8
 80064f8:	d1c9      	bne.n	800648e <merge_rfft_f32+0x3a>
 80064fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <arm_rfft_fast_f32>:
 8006500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006504:	8a05      	ldrh	r5, [r0, #16]
 8006506:	086d      	lsrs	r5, r5, #1
 8006508:	8005      	strh	r5, [r0, #0]
 800650a:	4604      	mov	r4, r0
 800650c:	4616      	mov	r6, r2
 800650e:	461d      	mov	r5, r3
 8006510:	b14b      	cbz	r3, 8006526 <arm_rfft_fast_f32+0x26>
 8006512:	f7ff ff9f 	bl	8006454 <merge_rfft_f32>
 8006516:	462a      	mov	r2, r5
 8006518:	4631      	mov	r1, r6
 800651a:	4620      	mov	r0, r4
 800651c:	2301      	movs	r3, #1
 800651e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006522:	f000 bb33 	b.w	8006b8c <arm_cfft_f32>
 8006526:	460f      	mov	r7, r1
 8006528:	461a      	mov	r2, r3
 800652a:	2301      	movs	r3, #1
 800652c:	f000 fb2e 	bl	8006b8c <arm_cfft_f32>
 8006530:	4632      	mov	r2, r6
 8006532:	4639      	mov	r1, r7
 8006534:	4620      	mov	r0, r4
 8006536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800653a:	f7ff bf31 	b.w	80063a0 <stage_rfft_f32>
 800653e:	bf00      	nop

08006540 <arm_cfft_radix8by2_f32>:
 8006540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006544:	ed2d 8b08 	vpush	{d8-d11}
 8006548:	4607      	mov	r7, r0
 800654a:	4608      	mov	r0, r1
 800654c:	f8b7 c000 	ldrh.w	ip, [r7]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8006556:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800655a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800655e:	f000 80b0 	beq.w	80066c2 <arm_cfft_radix8by2_f32+0x182>
 8006562:	008c      	lsls	r4, r1, #2
 8006564:	3410      	adds	r4, #16
 8006566:	f100 0310 	add.w	r3, r0, #16
 800656a:	1906      	adds	r6, r0, r4
 800656c:	3210      	adds	r2, #16
 800656e:	4444      	add	r4, r8
 8006570:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8006574:	f108 0510 	add.w	r5, r8, #16
 8006578:	ed15 2a04 	vldr	s4, [r5, #-16]
 800657c:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006580:	ed54 4a04 	vldr	s9, [r4, #-16]
 8006584:	ed14 4a03 	vldr	s8, [r4, #-12]
 8006588:	ed14 6a02 	vldr	s12, [r4, #-8]
 800658c:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006590:	ed53 3a04 	vldr	s7, [r3, #-16]
 8006594:	ed15 0a02 	vldr	s0, [r5, #-8]
 8006598:	ed55 0a01 	vldr	s1, [r5, #-4]
 800659c:	ed56 6a04 	vldr	s13, [r6, #-16]
 80065a0:	ed16 3a03 	vldr	s6, [r6, #-12]
 80065a4:	ed13 7a03 	vldr	s14, [r3, #-12]
 80065a8:	ed13 5a02 	vldr	s10, [r3, #-8]
 80065ac:	ed53 7a01 	vldr	s15, [r3, #-4]
 80065b0:	ed16 1a02 	vldr	s2, [r6, #-8]
 80065b4:	ed56 1a01 	vldr	s3, [r6, #-4]
 80065b8:	ee73 ba82 	vadd.f32	s23, s7, s4
 80065bc:	ee37 ba22 	vadd.f32	s22, s14, s5
 80065c0:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80065c4:	ee33 9a04 	vadd.f32	s18, s6, s8
 80065c8:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80065cc:	ee75 aa00 	vadd.f32	s21, s10, s0
 80065d0:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80065d4:	ee71 8a06 	vadd.f32	s17, s2, s12
 80065d8:	ed43 ba04 	vstr	s23, [r3, #-16]
 80065dc:	ed03 ba03 	vstr	s22, [r3, #-12]
 80065e0:	ed43 aa02 	vstr	s21, [r3, #-8]
 80065e4:	ed03 aa01 	vstr	s20, [r3, #-4]
 80065e8:	ed06 8a01 	vstr	s16, [r6, #-4]
 80065ec:	ed46 9a04 	vstr	s19, [r6, #-16]
 80065f0:	ed06 9a03 	vstr	s18, [r6, #-12]
 80065f4:	ed46 8a02 	vstr	s17, [r6, #-8]
 80065f8:	ee37 7a62 	vsub.f32	s14, s14, s5
 80065fc:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006600:	ee34 4a43 	vsub.f32	s8, s8, s6
 8006604:	ed52 6a03 	vldr	s13, [r2, #-12]
 8006608:	ed12 3a04 	vldr	s6, [r2, #-16]
 800660c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006610:	ee27 8a26 	vmul.f32	s16, s14, s13
 8006614:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8006618:	ee23 2a83 	vmul.f32	s4, s7, s6
 800661c:	ee64 4a83 	vmul.f32	s9, s9, s6
 8006620:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8006624:	ee27 7a03 	vmul.f32	s14, s14, s6
 8006628:	ee64 6a26 	vmul.f32	s13, s8, s13
 800662c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006630:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006634:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006638:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800663c:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006640:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006644:	ed05 3a04 	vstr	s6, [r5, #-16]
 8006648:	ed04 4a04 	vstr	s8, [r4, #-16]
 800664c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006650:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006654:	ee76 6a41 	vsub.f32	s13, s12, s2
 8006658:	ee35 5a40 	vsub.f32	s10, s10, s0
 800665c:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006660:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006664:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006668:	ee67 3a87 	vmul.f32	s7, s15, s14
 800666c:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006670:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006674:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006678:	ee25 5a07 	vmul.f32	s10, s10, s14
 800667c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006680:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006684:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006688:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800668c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006690:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006694:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006698:	3310      	adds	r3, #16
 800669a:	4563      	cmp	r3, ip
 800669c:	ed45 5a02 	vstr	s11, [r5, #-8]
 80066a0:	f106 0610 	add.w	r6, r6, #16
 80066a4:	ed45 7a01 	vstr	s15, [r5, #-4]
 80066a8:	f102 0210 	add.w	r2, r2, #16
 80066ac:	ed04 6a02 	vstr	s12, [r4, #-8]
 80066b0:	ed04 7a01 	vstr	s14, [r4, #-4]
 80066b4:	f105 0510 	add.w	r5, r5, #16
 80066b8:	f104 0410 	add.w	r4, r4, #16
 80066bc:	f47f af5c 	bne.w	8006578 <arm_cfft_radix8by2_f32+0x38>
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	b28c      	uxth	r4, r1
 80066c4:	4621      	mov	r1, r4
 80066c6:	2302      	movs	r3, #2
 80066c8:	f000 fc1c 	bl	8006f04 <arm_radix8_butterfly_f32>
 80066cc:	ecbd 8b08 	vpop	{d8-d11}
 80066d0:	4621      	mov	r1, r4
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	4640      	mov	r0, r8
 80066d6:	2302      	movs	r3, #2
 80066d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066dc:	f000 bc12 	b.w	8006f04 <arm_radix8_butterfly_f32>

080066e0 <arm_cfft_radix8by4_f32>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	ed2d 8b0a 	vpush	{d8-d12}
 80066e8:	b08d      	sub	sp, #52	; 0x34
 80066ea:	460d      	mov	r5, r1
 80066ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80066ee:	8801      	ldrh	r1, [r0, #0]
 80066f0:	6842      	ldr	r2, [r0, #4]
 80066f2:	900a      	str	r0, [sp, #40]	; 0x28
 80066f4:	0849      	lsrs	r1, r1, #1
 80066f6:	008b      	lsls	r3, r1, #2
 80066f8:	18ee      	adds	r6, r5, r3
 80066fa:	18f0      	adds	r0, r6, r3
 80066fc:	edd0 5a00 	vldr	s11, [r0]
 8006700:	edd5 7a00 	vldr	s15, [r5]
 8006704:	ed96 7a00 	vldr	s14, [r6]
 8006708:	edd0 3a01 	vldr	s7, [r0, #4]
 800670c:	ed96 4a01 	vldr	s8, [r6, #4]
 8006710:	ed95 5a01 	vldr	s10, [r5, #4]
 8006714:	9008      	str	r0, [sp, #32]
 8006716:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800671a:	18c7      	adds	r7, r0, r3
 800671c:	edd7 4a00 	vldr	s9, [r7]
 8006720:	ed97 3a01 	vldr	s6, [r7, #4]
 8006724:	9701      	str	r7, [sp, #4]
 8006726:	ee77 6a06 	vadd.f32	s13, s14, s12
 800672a:	462c      	mov	r4, r5
 800672c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006730:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006734:	ee16 ca90 	vmov	ip, s13
 8006738:	f844 cb08 	str.w	ip, [r4], #8
 800673c:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006740:	edd6 5a01 	vldr	s11, [r6, #4]
 8006744:	edd7 2a01 	vldr	s5, [r7, #4]
 8006748:	9404      	str	r4, [sp, #16]
 800674a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800674e:	ee74 3a27 	vadd.f32	s7, s8, s15
 8006752:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006756:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800675a:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800675e:	0849      	lsrs	r1, r1, #1
 8006760:	f102 0e08 	add.w	lr, r2, #8
 8006764:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8006768:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800676c:	9109      	str	r1, [sp, #36]	; 0x24
 800676e:	ee35 4a47 	vsub.f32	s8, s10, s14
 8006772:	f1a1 0902 	sub.w	r9, r1, #2
 8006776:	f8cd e00c 	str.w	lr, [sp, #12]
 800677a:	4631      	mov	r1, r6
 800677c:	ee13 ea90 	vmov	lr, s7
 8006780:	ee36 6a64 	vsub.f32	s12, s12, s9
 8006784:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8006788:	4604      	mov	r4, r0
 800678a:	edc5 5a01 	vstr	s11, [r5, #4]
 800678e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006792:	f841 eb08 	str.w	lr, [r1], #8
 8006796:	ee34 5a24 	vadd.f32	s10, s8, s9
 800679a:	ee16 ea10 	vmov	lr, s12
 800679e:	ed86 5a01 	vstr	s10, [r6, #4]
 80067a2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80067a6:	f844 eb08 	str.w	lr, [r4], #8
 80067aa:	ee77 7a83 	vadd.f32	s15, s15, s6
 80067ae:	edc0 6a01 	vstr	s13, [r0, #4]
 80067b2:	9405      	str	r4, [sp, #20]
 80067b4:	4604      	mov	r4, r0
 80067b6:	ee17 0a90 	vmov	r0, s15
 80067ba:	9106      	str	r1, [sp, #24]
 80067bc:	ee37 7a64 	vsub.f32	s14, s14, s9
 80067c0:	f102 0110 	add.w	r1, r2, #16
 80067c4:	46bc      	mov	ip, r7
 80067c6:	9100      	str	r1, [sp, #0]
 80067c8:	f847 0b08 	str.w	r0, [r7], #8
 80067cc:	f102 0118 	add.w	r1, r2, #24
 80067d0:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80067d4:	9102      	str	r1, [sp, #8]
 80067d6:	ed8c 7a01 	vstr	s14, [ip, #4]
 80067da:	9007      	str	r0, [sp, #28]
 80067dc:	f000 8134 	beq.w	8006a48 <arm_cfft_radix8by4_f32+0x368>
 80067e0:	f102 0920 	add.w	r9, r2, #32
 80067e4:	f102 0830 	add.w	r8, r2, #48	; 0x30
 80067e8:	9a01      	ldr	r2, [sp, #4]
 80067ea:	f8dd a000 	ldr.w	sl, [sp]
 80067ee:	3b0c      	subs	r3, #12
 80067f0:	4683      	mov	fp, r0
 80067f2:	4463      	add	r3, ip
 80067f4:	f105 0e10 	add.w	lr, r5, #16
 80067f8:	f1a4 010c 	sub.w	r1, r4, #12
 80067fc:	f104 0510 	add.w	r5, r4, #16
 8006800:	f1a6 0c0c 	sub.w	ip, r6, #12
 8006804:	f1a2 040c 	sub.w	r4, r2, #12
 8006808:	f106 0010 	add.w	r0, r6, #16
 800680c:	3210      	adds	r2, #16
 800680e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8006812:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006816:	ed50 7a02 	vldr	s15, [r0, #-8]
 800681a:	ed52 1a02 	vldr	s3, [r2, #-8]
 800681e:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006822:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8006826:	ed12 1a01 	vldr	s2, [r2, #-4]
 800682a:	ed10 8a01 	vldr	s16, [r0, #-4]
 800682e:	ee35 4a25 	vadd.f32	s8, s10, s11
 8006832:	ee30 6a26 	vadd.f32	s12, s0, s13
 8006836:	ee37 7a84 	vadd.f32	s14, s15, s8
 800683a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800683e:	ee37 7a21 	vadd.f32	s14, s14, s3
 8006842:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006846:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800684a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800684e:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006852:	ee36 7a07 	vadd.f32	s14, s12, s14
 8006856:	ee78 aa25 	vadd.f32	s21, s16, s11
 800685a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800685e:	ee70 3a67 	vsub.f32	s7, s0, s15
 8006862:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8006866:	ed94 7a02 	vldr	s14, [r4, #8]
 800686a:	ed9c 2a02 	vldr	s4, [ip, #8]
 800686e:	ed91 ba02 	vldr	s22, [r1, #8]
 8006872:	edd3 9a02 	vldr	s19, [r3, #8]
 8006876:	edd4 2a01 	vldr	s5, [r4, #4]
 800687a:	ed9c 9a01 	vldr	s18, [ip, #4]
 800687e:	ed93 5a01 	vldr	s10, [r3, #4]
 8006882:	edd1 0a01 	vldr	s1, [r1, #4]
 8006886:	ee72 6a07 	vadd.f32	s13, s4, s14
 800688a:	ee32 2a47 	vsub.f32	s4, s4, s14
 800688e:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8006892:	ee79 4a22 	vadd.f32	s9, s18, s5
 8006896:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800689a:	ee79 2a62 	vsub.f32	s5, s18, s5
 800689e:	ed8c 7a02 	vstr	s14, [ip, #8]
 80068a2:	ed91 7a01 	vldr	s14, [r1, #4]
 80068a6:	edd3 8a01 	vldr	s17, [r3, #4]
 80068aa:	ee34 7a87 	vadd.f32	s14, s9, s14
 80068ae:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80068b2:	ee37 7a28 	vadd.f32	s14, s14, s17
 80068b6:	ee32 9a60 	vsub.f32	s18, s4, s1
 80068ba:	ed8c 7a01 	vstr	s14, [ip, #4]
 80068be:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80068c2:	ed1a aa02 	vldr	s20, [sl, #-8]
 80068c6:	ee73 8a22 	vadd.f32	s17, s6, s5
 80068ca:	ee39 9a05 	vadd.f32	s18, s18, s10
 80068ce:	ee7a aac1 	vsub.f32	s21, s21, s2
 80068d2:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80068d6:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80068da:	ee69 ba07 	vmul.f32	s23, s18, s14
 80068de:	ee6a aa87 	vmul.f32	s21, s21, s14
 80068e2:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80068e6:	ee63 ca87 	vmul.f32	s25, s7, s14
 80068ea:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80068ee:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80068f2:	ee68 8a87 	vmul.f32	s17, s17, s14
 80068f6:	ee73 3aea 	vsub.f32	s7, s7, s21
 80068fa:	ee78 8a89 	vadd.f32	s17, s17, s18
 80068fe:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8006902:	ee3b aaca 	vsub.f32	s20, s23, s20
 8006906:	ee34 4a67 	vsub.f32	s8, s8, s15
 800690a:	ee76 6acb 	vsub.f32	s13, s13, s22
 800690e:	ee36 6a48 	vsub.f32	s12, s12, s16
 8006912:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8006916:	ed00 7a02 	vstr	s14, [r0, #-8]
 800691a:	ed40 3a01 	vstr	s7, [r0, #-4]
 800691e:	edc1 8a01 	vstr	s17, [r1, #4]
 8006922:	ed81 aa02 	vstr	s20, [r1, #8]
 8006926:	ed59 3a04 	vldr	s7, [r9, #-16]
 800692a:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800692e:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8006932:	ed59 6a03 	vldr	s13, [r9, #-12]
 8006936:	ee34 4a61 	vsub.f32	s8, s8, s3
 800693a:	ee36 6a41 	vsub.f32	s12, s12, s2
 800693e:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8006942:	ee66 9a26 	vmul.f32	s19, s12, s13
 8006946:	ee24 9a23 	vmul.f32	s18, s8, s7
 800694a:	ee26 6a23 	vmul.f32	s12, s12, s7
 800694e:	ee24 4a26 	vmul.f32	s8, s8, s13
 8006952:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006956:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800695a:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800695e:	ee36 6a44 	vsub.f32	s12, s12, s8
 8006962:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006966:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800696a:	ee79 3a29 	vadd.f32	s7, s18, s19
 800696e:	ee75 6a60 	vsub.f32	s13, s10, s1
 8006972:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8006976:	ee77 7a80 	vadd.f32	s15, s15, s0
 800697a:	ed45 3a02 	vstr	s7, [r5, #-8]
 800697e:	ed05 6a01 	vstr	s12, [r5, #-4]
 8006982:	ed84 7a01 	vstr	s14, [r4, #4]
 8006986:	ed84 4a02 	vstr	s8, [r4, #8]
 800698a:	ee35 6a81 	vadd.f32	s12, s11, s2
 800698e:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8006992:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8006996:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800699a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800699e:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80069a2:	ee67 2a26 	vmul.f32	s5, s14, s13
 80069a6:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80069aa:	ee26 5a25 	vmul.f32	s10, s12, s11
 80069ae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80069b2:	ee26 6a26 	vmul.f32	s12, s12, s13
 80069b6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80069ba:	ee63 6a26 	vmul.f32	s13, s6, s13
 80069be:	ee23 3a25 	vmul.f32	s6, s6, s11
 80069c2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80069c6:	ee75 5a24 	vadd.f32	s11, s10, s9
 80069ca:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80069ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80069d2:	f1bb 0b01 	subs.w	fp, fp, #1
 80069d6:	ed42 5a02 	vstr	s11, [r2, #-8]
 80069da:	ed42 7a01 	vstr	s15, [r2, #-4]
 80069de:	f10e 0e08 	add.w	lr, lr, #8
 80069e2:	ed83 3a02 	vstr	s6, [r3, #8]
 80069e6:	ed83 7a01 	vstr	s14, [r3, #4]
 80069ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80069ee:	f10a 0a08 	add.w	sl, sl, #8
 80069f2:	f100 0008 	add.w	r0, r0, #8
 80069f6:	f1a1 0108 	sub.w	r1, r1, #8
 80069fa:	f109 0910 	add.w	r9, r9, #16
 80069fe:	f105 0508 	add.w	r5, r5, #8
 8006a02:	f1a4 0408 	sub.w	r4, r4, #8
 8006a06:	f108 0818 	add.w	r8, r8, #24
 8006a0a:	f102 0208 	add.w	r2, r2, #8
 8006a0e:	f1a3 0308 	sub.w	r3, r3, #8
 8006a12:	f47f aefc 	bne.w	800680e <arm_cfft_radix8by4_f32+0x12e>
 8006a16:	9907      	ldr	r1, [sp, #28]
 8006a18:	9800      	ldr	r0, [sp, #0]
 8006a1a:	00cb      	lsls	r3, r1, #3
 8006a1c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006a20:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006a24:	9100      	str	r1, [sp, #0]
 8006a26:	9904      	ldr	r1, [sp, #16]
 8006a28:	4419      	add	r1, r3
 8006a2a:	9104      	str	r1, [sp, #16]
 8006a2c:	9903      	ldr	r1, [sp, #12]
 8006a2e:	4419      	add	r1, r3
 8006a30:	9103      	str	r1, [sp, #12]
 8006a32:	9906      	ldr	r1, [sp, #24]
 8006a34:	4419      	add	r1, r3
 8006a36:	9106      	str	r1, [sp, #24]
 8006a38:	9905      	ldr	r1, [sp, #20]
 8006a3a:	441f      	add	r7, r3
 8006a3c:	4419      	add	r1, r3
 8006a3e:	9b02      	ldr	r3, [sp, #8]
 8006a40:	9105      	str	r1, [sp, #20]
 8006a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a46:	9302      	str	r3, [sp, #8]
 8006a48:	9904      	ldr	r1, [sp, #16]
 8006a4a:	9805      	ldr	r0, [sp, #20]
 8006a4c:	ed91 4a00 	vldr	s8, [r1]
 8006a50:	edd0 6a00 	vldr	s13, [r0]
 8006a54:	9b06      	ldr	r3, [sp, #24]
 8006a56:	ed97 3a00 	vldr	s6, [r7]
 8006a5a:	edd3 7a00 	vldr	s15, [r3]
 8006a5e:	edd0 4a01 	vldr	s9, [r0, #4]
 8006a62:	edd1 3a01 	vldr	s7, [r1, #4]
 8006a66:	ed97 2a01 	vldr	s4, [r7, #4]
 8006a6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8006a6e:	9a03      	ldr	r2, [sp, #12]
 8006a70:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8006a74:	ee34 6a26 	vadd.f32	s12, s8, s13
 8006a78:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8006a7c:	ee37 5a86 	vadd.f32	s10, s15, s12
 8006a80:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006a84:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006a88:	ee74 6a66 	vsub.f32	s13, s8, s13
 8006a8c:	ed81 5a00 	vstr	s10, [r1]
 8006a90:	ed93 5a01 	vldr	s10, [r3, #4]
 8006a94:	edd7 4a01 	vldr	s9, [r7, #4]
 8006a98:	ee35 5a85 	vadd.f32	s10, s11, s10
 8006a9c:	ee37 4a26 	vadd.f32	s8, s14, s13
 8006aa0:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006aa4:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8006aa8:	ed81 5a01 	vstr	s10, [r1, #4]
 8006aac:	edd2 1a00 	vldr	s3, [r2]
 8006ab0:	edd2 2a01 	vldr	s5, [r2, #4]
 8006ab4:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006ab8:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006abc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006ac0:	ee64 4a21 	vmul.f32	s9, s8, s3
 8006ac4:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006ac8:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006acc:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006ad0:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006ad4:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006ad8:	edc3 2a00 	vstr	s5, [r3]
 8006adc:	ed83 5a01 	vstr	s10, [r3, #4]
 8006ae0:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8006ae4:	9b00      	ldr	r3, [sp, #0]
 8006ae6:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006aea:	ed93 4a01 	vldr	s8, [r3, #4]
 8006aee:	ed93 5a00 	vldr	s10, [r3]
 8006af2:	9b02      	ldr	r3, [sp, #8]
 8006af4:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8006af8:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006afc:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006b00:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006b04:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006b08:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006b0c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8006b10:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006b14:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006b18:	ed80 6a01 	vstr	s12, [r0, #4]
 8006b1c:	edc0 5a00 	vstr	s11, [r0]
 8006b20:	edd3 5a01 	vldr	s11, [r3, #4]
 8006b24:	edd3 6a00 	vldr	s13, [r3]
 8006b28:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006b2c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8006b30:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006b34:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006b38:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006b3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006b40:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006b44:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006b48:	ed87 7a01 	vstr	s14, [r7, #4]
 8006b4c:	edc7 7a00 	vstr	s15, [r7]
 8006b50:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8006b54:	4621      	mov	r1, r4
 8006b56:	686a      	ldr	r2, [r5, #4]
 8006b58:	2304      	movs	r3, #4
 8006b5a:	f000 f9d3 	bl	8006f04 <arm_radix8_butterfly_f32>
 8006b5e:	4630      	mov	r0, r6
 8006b60:	4621      	mov	r1, r4
 8006b62:	686a      	ldr	r2, [r5, #4]
 8006b64:	2304      	movs	r3, #4
 8006b66:	f000 f9cd 	bl	8006f04 <arm_radix8_butterfly_f32>
 8006b6a:	9808      	ldr	r0, [sp, #32]
 8006b6c:	686a      	ldr	r2, [r5, #4]
 8006b6e:	4621      	mov	r1, r4
 8006b70:	2304      	movs	r3, #4
 8006b72:	f000 f9c7 	bl	8006f04 <arm_radix8_butterfly_f32>
 8006b76:	686a      	ldr	r2, [r5, #4]
 8006b78:	9801      	ldr	r0, [sp, #4]
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	2304      	movs	r3, #4
 8006b7e:	b00d      	add	sp, #52	; 0x34
 8006b80:	ecbd 8b0a 	vpop	{d8-d12}
 8006b84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b88:	f000 b9bc 	b.w	8006f04 <arm_radix8_butterfly_f32>

08006b8c <arm_cfft_f32>:
 8006b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b90:	2a01      	cmp	r2, #1
 8006b92:	4606      	mov	r6, r0
 8006b94:	4617      	mov	r7, r2
 8006b96:	460c      	mov	r4, r1
 8006b98:	4698      	mov	r8, r3
 8006b9a:	8805      	ldrh	r5, [r0, #0]
 8006b9c:	d056      	beq.n	8006c4c <arm_cfft_f32+0xc0>
 8006b9e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006ba2:	d063      	beq.n	8006c6c <arm_cfft_f32+0xe0>
 8006ba4:	d916      	bls.n	8006bd4 <arm_cfft_f32+0x48>
 8006ba6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8006baa:	d01a      	beq.n	8006be2 <arm_cfft_f32+0x56>
 8006bac:	d947      	bls.n	8006c3e <arm_cfft_f32+0xb2>
 8006bae:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006bb2:	d05b      	beq.n	8006c6c <arm_cfft_f32+0xe0>
 8006bb4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8006bb8:	d105      	bne.n	8006bc6 <arm_cfft_f32+0x3a>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	6872      	ldr	r2, [r6, #4]
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 f99f 	bl	8006f04 <arm_radix8_butterfly_f32>
 8006bc6:	f1b8 0f00 	cmp.w	r8, #0
 8006bca:	d111      	bne.n	8006bf0 <arm_cfft_f32+0x64>
 8006bcc:	2f01      	cmp	r7, #1
 8006bce:	d016      	beq.n	8006bfe <arm_cfft_f32+0x72>
 8006bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd4:	2d20      	cmp	r5, #32
 8006bd6:	d049      	beq.n	8006c6c <arm_cfft_f32+0xe0>
 8006bd8:	d935      	bls.n	8006c46 <arm_cfft_f32+0xba>
 8006bda:	2d40      	cmp	r5, #64	; 0x40
 8006bdc:	d0ed      	beq.n	8006bba <arm_cfft_f32+0x2e>
 8006bde:	2d80      	cmp	r5, #128	; 0x80
 8006be0:	d1f1      	bne.n	8006bc6 <arm_cfft_f32+0x3a>
 8006be2:	4621      	mov	r1, r4
 8006be4:	4630      	mov	r0, r6
 8006be6:	f7ff fcab 	bl	8006540 <arm_cfft_radix8by2_f32>
 8006bea:	f1b8 0f00 	cmp.w	r8, #0
 8006bee:	d0ed      	beq.n	8006bcc <arm_cfft_f32+0x40>
 8006bf0:	68b2      	ldr	r2, [r6, #8]
 8006bf2:	89b1      	ldrh	r1, [r6, #12]
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f000 f841 	bl	8006c7c <arm_bitreversal_32>
 8006bfa:	2f01      	cmp	r7, #1
 8006bfc:	d1e8      	bne.n	8006bd0 <arm_cfft_f32+0x44>
 8006bfe:	ee07 5a90 	vmov	s15, r5
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	d0de      	beq.n	8006bd0 <arm_cfft_f32+0x44>
 8006c12:	f104 0108 	add.w	r1, r4, #8
 8006c16:	2300      	movs	r3, #0
 8006c18:	3301      	adds	r3, #1
 8006c1a:	429d      	cmp	r5, r3
 8006c1c:	f101 0108 	add.w	r1, r1, #8
 8006c20:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006c24:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006c28:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006c2c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006c30:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006c34:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006c38:	d1ee      	bne.n	8006c18 <arm_cfft_f32+0x8c>
 8006c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c3e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006c42:	d0ba      	beq.n	8006bba <arm_cfft_f32+0x2e>
 8006c44:	e7bf      	b.n	8006bc6 <arm_cfft_f32+0x3a>
 8006c46:	2d10      	cmp	r5, #16
 8006c48:	d0cb      	beq.n	8006be2 <arm_cfft_f32+0x56>
 8006c4a:	e7bc      	b.n	8006bc6 <arm_cfft_f32+0x3a>
 8006c4c:	b19d      	cbz	r5, 8006c76 <arm_cfft_f32+0xea>
 8006c4e:	f101 030c 	add.w	r3, r1, #12
 8006c52:	2200      	movs	r2, #0
 8006c54:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006c58:	3201      	adds	r2, #1
 8006c5a:	eef1 7a67 	vneg.f32	s15, s15
 8006c5e:	4295      	cmp	r5, r2
 8006c60:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006c64:	f103 0308 	add.w	r3, r3, #8
 8006c68:	d1f4      	bne.n	8006c54 <arm_cfft_f32+0xc8>
 8006c6a:	e798      	b.n	8006b9e <arm_cfft_f32+0x12>
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7ff fd36 	bl	80066e0 <arm_cfft_radix8by4_f32>
 8006c74:	e7a7      	b.n	8006bc6 <arm_cfft_f32+0x3a>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0aa      	beq.n	8006bd0 <arm_cfft_f32+0x44>
 8006c7a:	e7b9      	b.n	8006bf0 <arm_cfft_f32+0x64>

08006c7c <arm_bitreversal_32>:
 8006c7c:	b1e9      	cbz	r1, 8006cba <arm_bitreversal_32+0x3e>
 8006c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c80:	2500      	movs	r5, #0
 8006c82:	f102 0e02 	add.w	lr, r2, #2
 8006c86:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006c8a:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006c8e:	08a4      	lsrs	r4, r4, #2
 8006c90:	089b      	lsrs	r3, r3, #2
 8006c92:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006c96:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006c9a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8006c9e:	00a6      	lsls	r6, r4, #2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	1d34      	adds	r4, r6, #4
 8006caa:	3502      	adds	r5, #2
 8006cac:	58c6      	ldr	r6, [r0, r3]
 8006cae:	5907      	ldr	r7, [r0, r4]
 8006cb0:	50c7      	str	r7, [r0, r3]
 8006cb2:	428d      	cmp	r5, r1
 8006cb4:	5106      	str	r6, [r0, r4]
 8006cb6:	d3e6      	bcc.n	8006c86 <arm_bitreversal_32+0xa>
 8006cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cba:	4770      	bx	lr

08006cbc <arm_cmplx_mag_f32>:
 8006cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc0:	ed2d 8b02 	vpush	{d8}
 8006cc4:	0897      	lsrs	r7, r2, #2
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	d077      	beq.n	8006dba <arm_cmplx_mag_f32+0xfe>
 8006cca:	f04f 0800 	mov.w	r8, #0
 8006cce:	f100 0420 	add.w	r4, r0, #32
 8006cd2:	f101 0510 	add.w	r5, r1, #16
 8006cd6:	463e      	mov	r6, r7
 8006cd8:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8006cdc:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8006ce0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006ce4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ce8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006cec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf4:	f2c0 80c5 	blt.w	8006e82 <arm_cmplx_mag_f32+0x1c6>
 8006cf8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d00:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006d04:	f100 80cb 	bmi.w	8006e9e <arm_cmplx_mag_f32+0x1e2>
 8006d08:	ed05 8a04 	vstr	s16, [r5, #-16]
 8006d0c:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8006d10:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8006d14:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006d18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006d1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d28:	f2c0 80a8 	blt.w	8006e7c <arm_cmplx_mag_f32+0x1c0>
 8006d2c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d34:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006d38:	f100 80a8 	bmi.w	8006e8c <arm_cmplx_mag_f32+0x1d0>
 8006d3c:	ed05 8a03 	vstr	s16, [r5, #-12]
 8006d40:	ed14 0a04 	vldr	s0, [r4, #-16]
 8006d44:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006d48:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006d4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006d50:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d5c:	f2c0 808b 	blt.w	8006e76 <arm_cmplx_mag_f32+0x1ba>
 8006d60:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d68:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006d6c:	f100 80a9 	bmi.w	8006ec2 <arm_cmplx_mag_f32+0x206>
 8006d70:	ed05 8a02 	vstr	s16, [r5, #-8]
 8006d74:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006d78:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006d7c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006d80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006d84:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d90:	db6e      	blt.n	8006e70 <arm_cmplx_mag_f32+0x1b4>
 8006d92:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d9a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006d9e:	f100 8087 	bmi.w	8006eb0 <arm_cmplx_mag_f32+0x1f4>
 8006da2:	ed05 8a01 	vstr	s16, [r5, #-4]
 8006da6:	3e01      	subs	r6, #1
 8006da8:	f104 0420 	add.w	r4, r4, #32
 8006dac:	f105 0510 	add.w	r5, r5, #16
 8006db0:	d192      	bne.n	8006cd8 <arm_cmplx_mag_f32+0x1c>
 8006db2:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8006db6:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8006dba:	f012 0203 	ands.w	r2, r2, #3
 8006dbe:	d052      	beq.n	8006e66 <arm_cmplx_mag_f32+0x1aa>
 8006dc0:	ed90 0a00 	vldr	s0, [r0]
 8006dc4:	edd0 7a01 	vldr	s15, [r0, #4]
 8006dc8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006dcc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006dd6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dde:	bfb8      	it	lt
 8006de0:	600b      	strlt	r3, [r1, #0]
 8006de2:	db08      	blt.n	8006df6 <arm_cmplx_mag_f32+0x13a>
 8006de4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006df0:	d479      	bmi.n	8006ee6 <arm_cmplx_mag_f32+0x22a>
 8006df2:	ed81 8a00 	vstr	s16, [r1]
 8006df6:	3a01      	subs	r2, #1
 8006df8:	d035      	beq.n	8006e66 <arm_cmplx_mag_f32+0x1aa>
 8006dfa:	ed90 0a02 	vldr	s0, [r0, #8]
 8006dfe:	edd0 7a03 	vldr	s15, [r0, #12]
 8006e02:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006e06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006e10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e18:	bfb8      	it	lt
 8006e1a:	604b      	strlt	r3, [r1, #4]
 8006e1c:	db08      	blt.n	8006e30 <arm_cmplx_mag_f32+0x174>
 8006e1e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e26:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006e2a:	d453      	bmi.n	8006ed4 <arm_cmplx_mag_f32+0x218>
 8006e2c:	ed81 8a01 	vstr	s16, [r1, #4]
 8006e30:	2a01      	cmp	r2, #1
 8006e32:	d018      	beq.n	8006e66 <arm_cmplx_mag_f32+0x1aa>
 8006e34:	ed90 0a04 	vldr	s0, [r0, #16]
 8006e38:	edd0 7a05 	vldr	s15, [r0, #20]
 8006e3c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006e40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006e44:	2300      	movs	r3, #0
 8006e46:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006e4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e52:	db19      	blt.n	8006e88 <arm_cmplx_mag_f32+0x1cc>
 8006e54:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006e60:	d44a      	bmi.n	8006ef8 <arm_cmplx_mag_f32+0x23c>
 8006e62:	ed81 8a02 	vstr	s16, [r1, #8]
 8006e66:	b004      	add	sp, #16
 8006e68:	ecbd 8b02 	vpop	{d8}
 8006e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e70:	f845 8c04 	str.w	r8, [r5, #-4]
 8006e74:	e797      	b.n	8006da6 <arm_cmplx_mag_f32+0xea>
 8006e76:	f845 8c08 	str.w	r8, [r5, #-8]
 8006e7a:	e77b      	b.n	8006d74 <arm_cmplx_mag_f32+0xb8>
 8006e7c:	f845 8c0c 	str.w	r8, [r5, #-12]
 8006e80:	e75e      	b.n	8006d40 <arm_cmplx_mag_f32+0x84>
 8006e82:	f845 8c10 	str.w	r8, [r5, #-16]
 8006e86:	e741      	b.n	8006d0c <arm_cmplx_mag_f32+0x50>
 8006e88:	608b      	str	r3, [r1, #8]
 8006e8a:	e7ec      	b.n	8006e66 <arm_cmplx_mag_f32+0x1aa>
 8006e8c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006e90:	9001      	str	r0, [sp, #4]
 8006e92:	f004 ff67 	bl	800bd64 <sqrtf>
 8006e96:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006e9a:	9801      	ldr	r0, [sp, #4]
 8006e9c:	e74e      	b.n	8006d3c <arm_cmplx_mag_f32+0x80>
 8006e9e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006ea2:	9001      	str	r0, [sp, #4]
 8006ea4:	f004 ff5e 	bl	800bd64 <sqrtf>
 8006ea8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006eac:	9801      	ldr	r0, [sp, #4]
 8006eae:	e72b      	b.n	8006d08 <arm_cmplx_mag_f32+0x4c>
 8006eb0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006eb4:	9001      	str	r0, [sp, #4]
 8006eb6:	f004 ff55 	bl	800bd64 <sqrtf>
 8006eba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006ebe:	9801      	ldr	r0, [sp, #4]
 8006ec0:	e76f      	b.n	8006da2 <arm_cmplx_mag_f32+0xe6>
 8006ec2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006ec6:	9001      	str	r0, [sp, #4]
 8006ec8:	f004 ff4c 	bl	800bd64 <sqrtf>
 8006ecc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006ed0:	9801      	ldr	r0, [sp, #4]
 8006ed2:	e74d      	b.n	8006d70 <arm_cmplx_mag_f32+0xb4>
 8006ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ed8:	9201      	str	r2, [sp, #4]
 8006eda:	f004 ff43 	bl	800bd64 <sqrtf>
 8006ede:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006ee2:	9903      	ldr	r1, [sp, #12]
 8006ee4:	e7a2      	b.n	8006e2c <arm_cmplx_mag_f32+0x170>
 8006ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eea:	9201      	str	r2, [sp, #4]
 8006eec:	f004 ff3a 	bl	800bd64 <sqrtf>
 8006ef0:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006ef4:	9903      	ldr	r1, [sp, #12]
 8006ef6:	e77c      	b.n	8006df2 <arm_cmplx_mag_f32+0x136>
 8006ef8:	9101      	str	r1, [sp, #4]
 8006efa:	f004 ff33 	bl	800bd64 <sqrtf>
 8006efe:	9901      	ldr	r1, [sp, #4]
 8006f00:	e7af      	b.n	8006e62 <arm_cmplx_mag_f32+0x1a6>
 8006f02:	bf00      	nop

08006f04 <arm_radix8_butterfly_f32>:
 8006f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f08:	ed2d 8b10 	vpush	{d8-d15}
 8006f0c:	b095      	sub	sp, #84	; 0x54
 8006f0e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8006f12:	4603      	mov	r3, r0
 8006f14:	3304      	adds	r3, #4
 8006f16:	ed9f bab9 	vldr	s22, [pc, #740]	; 80071fc <arm_radix8_butterfly_f32+0x2f8>
 8006f1a:	9012      	str	r0, [sp, #72]	; 0x48
 8006f1c:	468b      	mov	fp, r1
 8006f1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f20:	4689      	mov	r9, r1
 8006f22:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006f26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f28:	960f      	str	r6, [sp, #60]	; 0x3c
 8006f2a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8006f2e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006f32:	eb03 0508 	add.w	r5, r3, r8
 8006f36:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006f3a:	eb05 040e 	add.w	r4, r5, lr
 8006f3e:	0137      	lsls	r7, r6, #4
 8006f40:	eba6 030a 	sub.w	r3, r6, sl
 8006f44:	eb04 000e 	add.w	r0, r4, lr
 8006f48:	44b2      	add	sl, r6
 8006f4a:	1d3a      	adds	r2, r7, #4
 8006f4c:	9702      	str	r7, [sp, #8]
 8006f4e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006f52:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006f56:	ebae 0c06 	sub.w	ip, lr, r6
 8006f5a:	9703      	str	r7, [sp, #12]
 8006f5c:	eb03 0708 	add.w	r7, r3, r8
 8006f60:	9701      	str	r7, [sp, #4]
 8006f62:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006f66:	9706      	str	r7, [sp, #24]
 8006f68:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006f6a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006f6e:	f10e 0104 	add.w	r1, lr, #4
 8006f72:	4439      	add	r1, r7
 8006f74:	443a      	add	r2, r7
 8006f76:	0137      	lsls	r7, r6, #4
 8006f78:	00f6      	lsls	r6, r6, #3
 8006f7a:	9704      	str	r7, [sp, #16]
 8006f7c:	9605      	str	r6, [sp, #20]
 8006f7e:	9f01      	ldr	r7, [sp, #4]
 8006f80:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006f82:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006f86:	f04f 0c00 	mov.w	ip, #0
 8006f8a:	edd4 6a00 	vldr	s13, [r4]
 8006f8e:	edd7 1a00 	vldr	s3, [r7]
 8006f92:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006f96:	edd5 5a00 	vldr	s11, [r5]
 8006f9a:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006f9e:	ed90 6a00 	vldr	s12, [r0]
 8006fa2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006fa6:	ed93 3a00 	vldr	s6, [r3]
 8006faa:	ee39 0a86 	vadd.f32	s0, s19, s12
 8006fae:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006fb2:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006fb6:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006fba:	ee35 7a02 	vadd.f32	s14, s10, s4
 8006fbe:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006fc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fc6:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006fca:	ee34 4a47 	vsub.f32	s8, s8, s14
 8006fce:	ed46 6a01 	vstr	s13, [r6, #-4]
 8006fd2:	ed85 4a00 	vstr	s8, [r5]
 8006fd6:	edd1 6a00 	vldr	s13, [r1]
 8006fda:	ed94 9a01 	vldr	s18, [r4, #4]
 8006fde:	edd3 2a01 	vldr	s5, [r3, #4]
 8006fe2:	edd7 8a01 	vldr	s17, [r7, #4]
 8006fe6:	edd6 0a00 	vldr	s1, [r6]
 8006fea:	edd5 3a01 	vldr	s7, [r5, #4]
 8006fee:	ed90 8a01 	vldr	s16, [r0, #4]
 8006ff2:	ed92 7a00 	vldr	s14, [r2]
 8006ff6:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006ffa:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8006ffe:	ee72 aae8 	vsub.f32	s21, s5, s17
 8007002:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8007006:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800700a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800700e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8007012:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8007016:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800701a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800701e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8007022:	ee77 0a08 	vadd.f32	s1, s14, s16
 8007026:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800702a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800702e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8007032:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8007036:	ee76 6a89 	vadd.f32	s13, s13, s18
 800703a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800703e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007042:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8007046:	ee35 5a42 	vsub.f32	s10, s10, s4
 800704a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800704e:	ee33 2a20 	vadd.f32	s4, s6, s1
 8007052:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007056:	ee33 3a60 	vsub.f32	s6, s6, s1
 800705a:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800705e:	ee77 0a01 	vadd.f32	s1, s14, s2
 8007062:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8007066:	ee37 7a41 	vsub.f32	s14, s14, s2
 800706a:	ee73 1a84 	vadd.f32	s3, s7, s8
 800706e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007072:	ee76 3a27 	vadd.f32	s7, s12, s15
 8007076:	ee76 7a67 	vsub.f32	s15, s12, s15
 800707a:	ee32 8a00 	vadd.f32	s16, s4, s0
 800707e:	ee33 1a45 	vsub.f32	s2, s6, s10
 8007082:	ee32 2a40 	vsub.f32	s4, s4, s0
 8007086:	ee35 5a03 	vadd.f32	s10, s10, s6
 800708a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800708e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8007092:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8007096:	ee34 6a67 	vsub.f32	s12, s8, s15
 800709a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800709e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80070a2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80070a6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80070aa:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80070ae:	44dc      	add	ip, fp
 80070b0:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80070b4:	45e1      	cmp	r9, ip
 80070b6:	ed86 8a00 	vstr	s16, [r6]
 80070ba:	ed85 2a01 	vstr	s4, [r5, #4]
 80070be:	4456      	add	r6, sl
 80070c0:	ed02 0a01 	vstr	s0, [r2, #-4]
 80070c4:	4455      	add	r5, sl
 80070c6:	edc0 6a00 	vstr	s13, [r0]
 80070ca:	ed82 1a00 	vstr	s2, [r2]
 80070ce:	ed80 5a01 	vstr	s10, [r0, #4]
 80070d2:	4452      	add	r2, sl
 80070d4:	ed01 3a01 	vstr	s6, [r1, #-4]
 80070d8:	4450      	add	r0, sl
 80070da:	edc7 2a00 	vstr	s5, [r7]
 80070de:	edc4 4a00 	vstr	s9, [r4]
 80070e2:	ed83 7a00 	vstr	s14, [r3]
 80070e6:	edc1 5a00 	vstr	s11, [r1]
 80070ea:	edc7 3a01 	vstr	s7, [r7, #4]
 80070ee:	4451      	add	r1, sl
 80070f0:	ed84 6a01 	vstr	s12, [r4, #4]
 80070f4:	4457      	add	r7, sl
 80070f6:	edc3 7a01 	vstr	s15, [r3, #4]
 80070fa:	4454      	add	r4, sl
 80070fc:	4453      	add	r3, sl
 80070fe:	f63f af44 	bhi.w	8006f8a <arm_radix8_butterfly_f32+0x86>
 8007102:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007104:	2b07      	cmp	r3, #7
 8007106:	f240 81b7 	bls.w	8007478 <arm_radix8_butterfly_f32+0x574>
 800710a:	9b06      	ldr	r3, [sp, #24]
 800710c:	9903      	ldr	r1, [sp, #12]
 800710e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007110:	9e05      	ldr	r6, [sp, #20]
 8007112:	9a04      	ldr	r2, [sp, #16]
 8007114:	f103 0c08 	add.w	ip, r3, #8
 8007118:	9b02      	ldr	r3, [sp, #8]
 800711a:	3108      	adds	r1, #8
 800711c:	f108 0808 	add.w	r8, r8, #8
 8007120:	1841      	adds	r1, r0, r1
 8007122:	3608      	adds	r6, #8
 8007124:	330c      	adds	r3, #12
 8007126:	4604      	mov	r4, r0
 8007128:	4444      	add	r4, r8
 800712a:	18c3      	adds	r3, r0, r3
 800712c:	9109      	str	r1, [sp, #36]	; 0x24
 800712e:	1981      	adds	r1, r0, r6
 8007130:	f10e 0e08 	add.w	lr, lr, #8
 8007134:	3208      	adds	r2, #8
 8007136:	940b      	str	r4, [sp, #44]	; 0x2c
 8007138:	9107      	str	r1, [sp, #28]
 800713a:	4604      	mov	r4, r0
 800713c:	4601      	mov	r1, r0
 800713e:	9304      	str	r3, [sp, #16]
 8007140:	f100 030c 	add.w	r3, r0, #12
 8007144:	4474      	add	r4, lr
 8007146:	f04f 0801 	mov.w	r8, #1
 800714a:	1882      	adds	r2, r0, r2
 800714c:	4461      	add	r1, ip
 800714e:	9305      	str	r3, [sp, #20]
 8007150:	464b      	mov	r3, r9
 8007152:	940a      	str	r4, [sp, #40]	; 0x28
 8007154:	46c1      	mov	r9, r8
 8007156:	9208      	str	r2, [sp, #32]
 8007158:	46d8      	mov	r8, fp
 800715a:	9106      	str	r1, [sp, #24]
 800715c:	f04f 0e00 	mov.w	lr, #0
 8007160:	469b      	mov	fp, r3
 8007162:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007164:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007166:	449e      	add	lr, r3
 8007168:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800716c:	441a      	add	r2, r3
 800716e:	920e      	str	r2, [sp, #56]	; 0x38
 8007170:	441a      	add	r2, r3
 8007172:	18d4      	adds	r4, r2, r3
 8007174:	18e5      	adds	r5, r4, r3
 8007176:	18ee      	adds	r6, r5, r3
 8007178:	18f7      	adds	r7, r6, r3
 800717a:	eb07 0c03 	add.w	ip, r7, r3
 800717e:	920d      	str	r2, [sp, #52]	; 0x34
 8007180:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8007184:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8007188:	910c      	str	r1, [sp, #48]	; 0x30
 800718a:	4419      	add	r1, r3
 800718c:	9103      	str	r1, [sp, #12]
 800718e:	4419      	add	r1, r3
 8007190:	18ca      	adds	r2, r1, r3
 8007192:	9202      	str	r2, [sp, #8]
 8007194:	441a      	add	r2, r3
 8007196:	18d0      	adds	r0, r2, r3
 8007198:	ed92 ea01 	vldr	s28, [r2, #4]
 800719c:	9a02      	ldr	r2, [sp, #8]
 800719e:	edd4 7a00 	vldr	s15, [r4]
 80071a2:	edd2 da01 	vldr	s27, [r2, #4]
 80071a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071a8:	ed91 da01 	vldr	s26, [r1, #4]
 80071ac:	ed92 ca01 	vldr	s24, [r2, #4]
 80071b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071b2:	9903      	ldr	r1, [sp, #12]
 80071b4:	edcd 7a03 	vstr	s15, [sp, #12]
 80071b8:	edd2 7a00 	vldr	s15, [r2]
 80071bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071be:	edcd 7a02 	vstr	s15, [sp, #8]
 80071c2:	edd2 7a00 	vldr	s15, [r2]
 80071c6:	edd0 ea01 	vldr	s29, [r0, #4]
 80071ca:	edd1 ca01 	vldr	s25, [r1, #4]
 80071ce:	eddc ba00 	vldr	s23, [ip]
 80071d2:	edd7 aa00 	vldr	s21, [r7]
 80071d6:	ed96 aa00 	vldr	s20, [r6]
 80071da:	edd5 9a00 	vldr	s19, [r5]
 80071de:	edcd 7a01 	vstr	s15, [sp, #4]
 80071e2:	4403      	add	r3, r0
 80071e4:	ed93 fa01 	vldr	s30, [r3, #4]
 80071e8:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80071ec:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80071f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80071f8:	46cc      	mov	ip, r9
 80071fa:	e001      	b.n	8007200 <arm_radix8_butterfly_f32+0x2fc>
 80071fc:	3f3504f3 	.word	0x3f3504f3
 8007200:	ed91 6a00 	vldr	s12, [r1]
 8007204:	ed93 5a00 	vldr	s10, [r3]
 8007208:	edd0 fa00 	vldr	s31, [r0]
 800720c:	edd4 7a00 	vldr	s15, [r4]
 8007210:	ed95 7a00 	vldr	s14, [r5]
 8007214:	ed56 3a01 	vldr	s7, [r6, #-4]
 8007218:	ed17 3a01 	vldr	s6, [r7, #-4]
 800721c:	ed92 2a00 	vldr	s4, [r2]
 8007220:	ed96 0a00 	vldr	s0, [r6]
 8007224:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007228:	ee32 1a06 	vadd.f32	s2, s4, s12
 800722c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8007230:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007234:	ee78 1a04 	vadd.f32	s3, s16, s8
 8007238:	ee71 6a24 	vadd.f32	s13, s2, s9
 800723c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007240:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007244:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007248:	ed06 6a01 	vstr	s12, [r6, #-4]
 800724c:	edd4 8a01 	vldr	s17, [r4, #4]
 8007250:	ed92 9a01 	vldr	s18, [r2, #4]
 8007254:	edd7 0a00 	vldr	s1, [r7]
 8007258:	edd1 2a01 	vldr	s5, [r1, #4]
 800725c:	ed95 7a01 	vldr	s14, [r5, #4]
 8007260:	ed93 6a01 	vldr	s12, [r3, #4]
 8007264:	edd0 5a01 	vldr	s11, [r0, #4]
 8007268:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800726c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8007270:	ee39 5a62 	vsub.f32	s10, s18, s5
 8007274:	ee78 fac7 	vsub.f32	s31, s17, s14
 8007278:	ee38 4a44 	vsub.f32	s8, s16, s8
 800727c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007280:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8007284:	ee79 2a22 	vadd.f32	s5, s18, s5
 8007288:	ee32 9a27 	vadd.f32	s18, s4, s15
 800728c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8007290:	ee30 2a06 	vadd.f32	s4, s0, s12
 8007294:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8007298:	ee71 4a64 	vsub.f32	s9, s2, s9
 800729c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80072a0:	ee32 1a08 	vadd.f32	s2, s4, s16
 80072a4:	ee72 fa87 	vadd.f32	s31, s5, s14
 80072a8:	ee32 2a48 	vsub.f32	s4, s4, s16
 80072ac:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80072b0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80072b4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80072b8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80072bc:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80072c0:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80072c4:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80072c8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80072cc:	ee30 6a46 	vsub.f32	s12, s0, s12
 80072d0:	ee74 0a22 	vadd.f32	s1, s8, s5
 80072d4:	ee36 0a28 	vadd.f32	s0, s12, s17
 80072d8:	ee74 2a62 	vsub.f32	s5, s8, s5
 80072dc:	ee36 6a68 	vsub.f32	s12, s12, s17
 80072e0:	ee32 4a64 	vsub.f32	s8, s4, s9
 80072e4:	ee73 8a09 	vadd.f32	s17, s6, s18
 80072e8:	ee74 4a82 	vadd.f32	s9, s9, s4
 80072ec:	ee33 9a49 	vsub.f32	s18, s6, s18
 80072f0:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80072f4:	ee35 3a85 	vadd.f32	s6, s11, s10
 80072f8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80072fc:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8007300:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007304:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8007308:	ee30 7a68 	vsub.f32	s14, s0, s17
 800730c:	ee35 8a03 	vadd.f32	s16, s10, s6
 8007310:	ee38 0a80 	vadd.f32	s0, s17, s0
 8007314:	ee73 3a82 	vadd.f32	s7, s7, s4
 8007318:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800731c:	ed9d 2a01 	vldr	s4, [sp, #4]
 8007320:	eddd 1a02 	vldr	s3, [sp, #8]
 8007324:	ee35 5a43 	vsub.f32	s10, s10, s6
 8007328:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800732c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007330:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8007334:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007338:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800733c:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007340:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8007344:	ee39 6a06 	vadd.f32	s12, s18, s12
 8007348:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800734c:	ee21 4a84 	vmul.f32	s8, s3, s8
 8007350:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8007354:	ee22 7a07 	vmul.f32	s14, s4, s14
 8007358:	ee22 2a08 	vmul.f32	s4, s4, s16
 800735c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007360:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8007364:	ee31 1a09 	vadd.f32	s2, s2, s18
 8007368:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800736c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8007370:	ee74 0a60 	vsub.f32	s1, s8, s1
 8007374:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007378:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800737c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8007380:	ee72 1a21 	vadd.f32	s3, s4, s3
 8007384:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8007388:	ee38 2a89 	vadd.f32	s4, s17, s18
 800738c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8007390:	ee38 8a04 	vadd.f32	s16, s16, s8
 8007394:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8007398:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800739c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80073a0:	eddd 5a03 	vldr	s11, [sp, #12]
 80073a4:	edc6 fa00 	vstr	s31, [r6]
 80073a8:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80073ac:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80073b0:	ee30 0a45 	vsub.f32	s0, s0, s10
 80073b4:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80073b8:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80073bc:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80073c0:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80073c4:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80073c8:	ee25 6a86 	vmul.f32	s12, s11, s12
 80073cc:	ee74 4a89 	vadd.f32	s9, s9, s18
 80073d0:	ee34 3a43 	vsub.f32	s6, s8, s6
 80073d4:	ee78 8a85 	vadd.f32	s17, s17, s10
 80073d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80073dc:	44c4      	add	ip, r8
 80073de:	45e3      	cmp	fp, ip
 80073e0:	edc3 3a00 	vstr	s7, [r3]
 80073e4:	edc3 6a01 	vstr	s13, [r3, #4]
 80073e8:	4456      	add	r6, sl
 80073ea:	ed07 1a01 	vstr	s2, [r7, #-4]
 80073ee:	edc7 0a00 	vstr	s1, [r7]
 80073f2:	4453      	add	r3, sl
 80073f4:	ed80 2a00 	vstr	s4, [r0]
 80073f8:	edc0 2a01 	vstr	s5, [r0, #4]
 80073fc:	4457      	add	r7, sl
 80073fe:	edc2 1a00 	vstr	s3, [r2]
 8007402:	ed82 7a01 	vstr	s14, [r2, #4]
 8007406:	4450      	add	r0, sl
 8007408:	ed85 8a00 	vstr	s16, [r5]
 800740c:	ed85 0a01 	vstr	s0, [r5, #4]
 8007410:	4452      	add	r2, sl
 8007412:	edc1 4a00 	vstr	s9, [r1]
 8007416:	4455      	add	r5, sl
 8007418:	ed81 3a01 	vstr	s6, [r1, #4]
 800741c:	edc4 8a00 	vstr	s17, [r4]
 8007420:	ed84 6a01 	vstr	s12, [r4, #4]
 8007424:	4451      	add	r1, sl
 8007426:	4454      	add	r4, sl
 8007428:	f63f aeea 	bhi.w	8007200 <arm_radix8_butterfly_f32+0x2fc>
 800742c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800742e:	3308      	adds	r3, #8
 8007430:	930b      	str	r3, [sp, #44]	; 0x2c
 8007432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007434:	3308      	adds	r3, #8
 8007436:	930a      	str	r3, [sp, #40]	; 0x28
 8007438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743a:	3308      	adds	r3, #8
 800743c:	9309      	str	r3, [sp, #36]	; 0x24
 800743e:	9b08      	ldr	r3, [sp, #32]
 8007440:	3308      	adds	r3, #8
 8007442:	9308      	str	r3, [sp, #32]
 8007444:	9b07      	ldr	r3, [sp, #28]
 8007446:	3308      	adds	r3, #8
 8007448:	9307      	str	r3, [sp, #28]
 800744a:	9b06      	ldr	r3, [sp, #24]
 800744c:	3308      	adds	r3, #8
 800744e:	9306      	str	r3, [sp, #24]
 8007450:	9b05      	ldr	r3, [sp, #20]
 8007452:	3308      	adds	r3, #8
 8007454:	9305      	str	r3, [sp, #20]
 8007456:	9b04      	ldr	r3, [sp, #16]
 8007458:	3308      	adds	r3, #8
 800745a:	9304      	str	r3, [sp, #16]
 800745c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800745e:	f109 0901 	add.w	r9, r9, #1
 8007462:	454b      	cmp	r3, r9
 8007464:	f47f ae7d 	bne.w	8007162 <arm_radix8_butterfly_f32+0x25e>
 8007468:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	b29b      	uxth	r3, r3
 800746e:	46d9      	mov	r9, fp
 8007470:	9310      	str	r3, [sp, #64]	; 0x40
 8007472:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8007476:	e554      	b.n	8006f22 <arm_radix8_butterfly_f32+0x1e>
 8007478:	b015      	add	sp, #84	; 0x54
 800747a:	ecbd 8b10 	vpop	{d8-d15}
 800747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007482:	bf00      	nop

08007484 <__errno>:
 8007484:	4b01      	ldr	r3, [pc, #4]	; (800748c <__errno+0x8>)
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	2000000c 	.word	0x2000000c

08007490 <__libc_init_array>:
 8007490:	b570      	push	{r4, r5, r6, lr}
 8007492:	4d0d      	ldr	r5, [pc, #52]	; (80074c8 <__libc_init_array+0x38>)
 8007494:	4c0d      	ldr	r4, [pc, #52]	; (80074cc <__libc_init_array+0x3c>)
 8007496:	1b64      	subs	r4, r4, r5
 8007498:	10a4      	asrs	r4, r4, #2
 800749a:	2600      	movs	r6, #0
 800749c:	42a6      	cmp	r6, r4
 800749e:	d109      	bne.n	80074b4 <__libc_init_array+0x24>
 80074a0:	4d0b      	ldr	r5, [pc, #44]	; (80074d0 <__libc_init_array+0x40>)
 80074a2:	4c0c      	ldr	r4, [pc, #48]	; (80074d4 <__libc_init_array+0x44>)
 80074a4:	f004 fc88 	bl	800bdb8 <_init>
 80074a8:	1b64      	subs	r4, r4, r5
 80074aa:	10a4      	asrs	r4, r4, #2
 80074ac:	2600      	movs	r6, #0
 80074ae:	42a6      	cmp	r6, r4
 80074b0:	d105      	bne.n	80074be <__libc_init_array+0x2e>
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b8:	4798      	blx	r3
 80074ba:	3601      	adds	r6, #1
 80074bc:	e7ee      	b.n	800749c <__libc_init_array+0xc>
 80074be:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c2:	4798      	blx	r3
 80074c4:	3601      	adds	r6, #1
 80074c6:	e7f2      	b.n	80074ae <__libc_init_array+0x1e>
 80074c8:	0801f2cc 	.word	0x0801f2cc
 80074cc:	0801f2cc 	.word	0x0801f2cc
 80074d0:	0801f2cc 	.word	0x0801f2cc
 80074d4:	0801f2d0 	.word	0x0801f2d0

080074d8 <memset>:
 80074d8:	4402      	add	r2, r0
 80074da:	4603      	mov	r3, r0
 80074dc:	4293      	cmp	r3, r2
 80074de:	d100      	bne.n	80074e2 <memset+0xa>
 80074e0:	4770      	bx	lr
 80074e2:	f803 1b01 	strb.w	r1, [r3], #1
 80074e6:	e7f9      	b.n	80074dc <memset+0x4>

080074e8 <__cvt>:
 80074e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074ec:	ec55 4b10 	vmov	r4, r5, d0
 80074f0:	2d00      	cmp	r5, #0
 80074f2:	460e      	mov	r6, r1
 80074f4:	4619      	mov	r1, r3
 80074f6:	462b      	mov	r3, r5
 80074f8:	bfbb      	ittet	lt
 80074fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074fe:	461d      	movlt	r5, r3
 8007500:	2300      	movge	r3, #0
 8007502:	232d      	movlt	r3, #45	; 0x2d
 8007504:	700b      	strb	r3, [r1, #0]
 8007506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007508:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800750c:	4691      	mov	r9, r2
 800750e:	f023 0820 	bic.w	r8, r3, #32
 8007512:	bfbc      	itt	lt
 8007514:	4622      	movlt	r2, r4
 8007516:	4614      	movlt	r4, r2
 8007518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800751c:	d005      	beq.n	800752a <__cvt+0x42>
 800751e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007522:	d100      	bne.n	8007526 <__cvt+0x3e>
 8007524:	3601      	adds	r6, #1
 8007526:	2102      	movs	r1, #2
 8007528:	e000      	b.n	800752c <__cvt+0x44>
 800752a:	2103      	movs	r1, #3
 800752c:	ab03      	add	r3, sp, #12
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	ab02      	add	r3, sp, #8
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	ec45 4b10 	vmov	d0, r4, r5
 8007538:	4653      	mov	r3, sl
 800753a:	4632      	mov	r2, r6
 800753c:	f001 fdcc 	bl	80090d8 <_dtoa_r>
 8007540:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007544:	4607      	mov	r7, r0
 8007546:	d102      	bne.n	800754e <__cvt+0x66>
 8007548:	f019 0f01 	tst.w	r9, #1
 800754c:	d022      	beq.n	8007594 <__cvt+0xac>
 800754e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007552:	eb07 0906 	add.w	r9, r7, r6
 8007556:	d110      	bne.n	800757a <__cvt+0x92>
 8007558:	783b      	ldrb	r3, [r7, #0]
 800755a:	2b30      	cmp	r3, #48	; 0x30
 800755c:	d10a      	bne.n	8007574 <__cvt+0x8c>
 800755e:	2200      	movs	r2, #0
 8007560:	2300      	movs	r3, #0
 8007562:	4620      	mov	r0, r4
 8007564:	4629      	mov	r1, r5
 8007566:	f7f9 faaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800756a:	b918      	cbnz	r0, 8007574 <__cvt+0x8c>
 800756c:	f1c6 0601 	rsb	r6, r6, #1
 8007570:	f8ca 6000 	str.w	r6, [sl]
 8007574:	f8da 3000 	ldr.w	r3, [sl]
 8007578:	4499      	add	r9, r3
 800757a:	2200      	movs	r2, #0
 800757c:	2300      	movs	r3, #0
 800757e:	4620      	mov	r0, r4
 8007580:	4629      	mov	r1, r5
 8007582:	f7f9 faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007586:	b108      	cbz	r0, 800758c <__cvt+0xa4>
 8007588:	f8cd 900c 	str.w	r9, [sp, #12]
 800758c:	2230      	movs	r2, #48	; 0x30
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	454b      	cmp	r3, r9
 8007592:	d307      	bcc.n	80075a4 <__cvt+0xbc>
 8007594:	9b03      	ldr	r3, [sp, #12]
 8007596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007598:	1bdb      	subs	r3, r3, r7
 800759a:	4638      	mov	r0, r7
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	b004      	add	sp, #16
 80075a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a4:	1c59      	adds	r1, r3, #1
 80075a6:	9103      	str	r1, [sp, #12]
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	e7f0      	b.n	800758e <__cvt+0xa6>

080075ac <__exponent>:
 80075ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ae:	4603      	mov	r3, r0
 80075b0:	2900      	cmp	r1, #0
 80075b2:	bfb8      	it	lt
 80075b4:	4249      	neglt	r1, r1
 80075b6:	f803 2b02 	strb.w	r2, [r3], #2
 80075ba:	bfb4      	ite	lt
 80075bc:	222d      	movlt	r2, #45	; 0x2d
 80075be:	222b      	movge	r2, #43	; 0x2b
 80075c0:	2909      	cmp	r1, #9
 80075c2:	7042      	strb	r2, [r0, #1]
 80075c4:	dd2a      	ble.n	800761c <__exponent+0x70>
 80075c6:	f10d 0407 	add.w	r4, sp, #7
 80075ca:	46a4      	mov	ip, r4
 80075cc:	270a      	movs	r7, #10
 80075ce:	46a6      	mov	lr, r4
 80075d0:	460a      	mov	r2, r1
 80075d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80075d6:	fb07 1516 	mls	r5, r7, r6, r1
 80075da:	3530      	adds	r5, #48	; 0x30
 80075dc:	2a63      	cmp	r2, #99	; 0x63
 80075de:	f104 34ff 	add.w	r4, r4, #4294967295
 80075e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80075e6:	4631      	mov	r1, r6
 80075e8:	dcf1      	bgt.n	80075ce <__exponent+0x22>
 80075ea:	3130      	adds	r1, #48	; 0x30
 80075ec:	f1ae 0502 	sub.w	r5, lr, #2
 80075f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80075f4:	1c44      	adds	r4, r0, #1
 80075f6:	4629      	mov	r1, r5
 80075f8:	4561      	cmp	r1, ip
 80075fa:	d30a      	bcc.n	8007612 <__exponent+0x66>
 80075fc:	f10d 0209 	add.w	r2, sp, #9
 8007600:	eba2 020e 	sub.w	r2, r2, lr
 8007604:	4565      	cmp	r5, ip
 8007606:	bf88      	it	hi
 8007608:	2200      	movhi	r2, #0
 800760a:	4413      	add	r3, r2
 800760c:	1a18      	subs	r0, r3, r0
 800760e:	b003      	add	sp, #12
 8007610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007616:	f804 2f01 	strb.w	r2, [r4, #1]!
 800761a:	e7ed      	b.n	80075f8 <__exponent+0x4c>
 800761c:	2330      	movs	r3, #48	; 0x30
 800761e:	3130      	adds	r1, #48	; 0x30
 8007620:	7083      	strb	r3, [r0, #2]
 8007622:	70c1      	strb	r1, [r0, #3]
 8007624:	1d03      	adds	r3, r0, #4
 8007626:	e7f1      	b.n	800760c <__exponent+0x60>

08007628 <_printf_float>:
 8007628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762c:	ed2d 8b02 	vpush	{d8}
 8007630:	b08d      	sub	sp, #52	; 0x34
 8007632:	460c      	mov	r4, r1
 8007634:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007638:	4616      	mov	r6, r2
 800763a:	461f      	mov	r7, r3
 800763c:	4605      	mov	r5, r0
 800763e:	f002 ff9b 	bl	800a578 <_localeconv_r>
 8007642:	f8d0 a000 	ldr.w	sl, [r0]
 8007646:	4650      	mov	r0, sl
 8007648:	f7f8 fdc2 	bl	80001d0 <strlen>
 800764c:	2300      	movs	r3, #0
 800764e:	930a      	str	r3, [sp, #40]	; 0x28
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	9305      	str	r3, [sp, #20]
 8007654:	f8d8 3000 	ldr.w	r3, [r8]
 8007658:	f894 b018 	ldrb.w	fp, [r4, #24]
 800765c:	3307      	adds	r3, #7
 800765e:	f023 0307 	bic.w	r3, r3, #7
 8007662:	f103 0208 	add.w	r2, r3, #8
 8007666:	f8c8 2000 	str.w	r2, [r8]
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007672:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007676:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800767a:	9307      	str	r3, [sp, #28]
 800767c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007680:	ee08 0a10 	vmov	s16, r0
 8007684:	4b9f      	ldr	r3, [pc, #636]	; (8007904 <_printf_float+0x2dc>)
 8007686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800768a:	f04f 32ff 	mov.w	r2, #4294967295
 800768e:	f7f9 fa4d 	bl	8000b2c <__aeabi_dcmpun>
 8007692:	bb88      	cbnz	r0, 80076f8 <_printf_float+0xd0>
 8007694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007698:	4b9a      	ldr	r3, [pc, #616]	; (8007904 <_printf_float+0x2dc>)
 800769a:	f04f 32ff 	mov.w	r2, #4294967295
 800769e:	f7f9 fa27 	bl	8000af0 <__aeabi_dcmple>
 80076a2:	bb48      	cbnz	r0, 80076f8 <_printf_float+0xd0>
 80076a4:	2200      	movs	r2, #0
 80076a6:	2300      	movs	r3, #0
 80076a8:	4640      	mov	r0, r8
 80076aa:	4649      	mov	r1, r9
 80076ac:	f7f9 fa16 	bl	8000adc <__aeabi_dcmplt>
 80076b0:	b110      	cbz	r0, 80076b8 <_printf_float+0x90>
 80076b2:	232d      	movs	r3, #45	; 0x2d
 80076b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b8:	4b93      	ldr	r3, [pc, #588]	; (8007908 <_printf_float+0x2e0>)
 80076ba:	4894      	ldr	r0, [pc, #592]	; (800790c <_printf_float+0x2e4>)
 80076bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80076c0:	bf94      	ite	ls
 80076c2:	4698      	movls	r8, r3
 80076c4:	4680      	movhi	r8, r0
 80076c6:	2303      	movs	r3, #3
 80076c8:	6123      	str	r3, [r4, #16]
 80076ca:	9b05      	ldr	r3, [sp, #20]
 80076cc:	f023 0204 	bic.w	r2, r3, #4
 80076d0:	6022      	str	r2, [r4, #0]
 80076d2:	f04f 0900 	mov.w	r9, #0
 80076d6:	9700      	str	r7, [sp, #0]
 80076d8:	4633      	mov	r3, r6
 80076da:	aa0b      	add	r2, sp, #44	; 0x2c
 80076dc:	4621      	mov	r1, r4
 80076de:	4628      	mov	r0, r5
 80076e0:	f000 f9d8 	bl	8007a94 <_printf_common>
 80076e4:	3001      	adds	r0, #1
 80076e6:	f040 8090 	bne.w	800780a <_printf_float+0x1e2>
 80076ea:	f04f 30ff 	mov.w	r0, #4294967295
 80076ee:	b00d      	add	sp, #52	; 0x34
 80076f0:	ecbd 8b02 	vpop	{d8}
 80076f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f8:	4642      	mov	r2, r8
 80076fa:	464b      	mov	r3, r9
 80076fc:	4640      	mov	r0, r8
 80076fe:	4649      	mov	r1, r9
 8007700:	f7f9 fa14 	bl	8000b2c <__aeabi_dcmpun>
 8007704:	b140      	cbz	r0, 8007718 <_printf_float+0xf0>
 8007706:	464b      	mov	r3, r9
 8007708:	2b00      	cmp	r3, #0
 800770a:	bfbc      	itt	lt
 800770c:	232d      	movlt	r3, #45	; 0x2d
 800770e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007712:	487f      	ldr	r0, [pc, #508]	; (8007910 <_printf_float+0x2e8>)
 8007714:	4b7f      	ldr	r3, [pc, #508]	; (8007914 <_printf_float+0x2ec>)
 8007716:	e7d1      	b.n	80076bc <_printf_float+0x94>
 8007718:	6863      	ldr	r3, [r4, #4]
 800771a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800771e:	9206      	str	r2, [sp, #24]
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	d13f      	bne.n	80077a4 <_printf_float+0x17c>
 8007724:	2306      	movs	r3, #6
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	9b05      	ldr	r3, [sp, #20]
 800772a:	6861      	ldr	r1, [r4, #4]
 800772c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007730:	2300      	movs	r3, #0
 8007732:	9303      	str	r3, [sp, #12]
 8007734:	ab0a      	add	r3, sp, #40	; 0x28
 8007736:	e9cd b301 	strd	fp, r3, [sp, #4]
 800773a:	ab09      	add	r3, sp, #36	; 0x24
 800773c:	ec49 8b10 	vmov	d0, r8, r9
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	6022      	str	r2, [r4, #0]
 8007744:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007748:	4628      	mov	r0, r5
 800774a:	f7ff fecd 	bl	80074e8 <__cvt>
 800774e:	9b06      	ldr	r3, [sp, #24]
 8007750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007752:	2b47      	cmp	r3, #71	; 0x47
 8007754:	4680      	mov	r8, r0
 8007756:	d108      	bne.n	800776a <_printf_float+0x142>
 8007758:	1cc8      	adds	r0, r1, #3
 800775a:	db02      	blt.n	8007762 <_printf_float+0x13a>
 800775c:	6863      	ldr	r3, [r4, #4]
 800775e:	4299      	cmp	r1, r3
 8007760:	dd41      	ble.n	80077e6 <_printf_float+0x1be>
 8007762:	f1ab 0b02 	sub.w	fp, fp, #2
 8007766:	fa5f fb8b 	uxtb.w	fp, fp
 800776a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800776e:	d820      	bhi.n	80077b2 <_printf_float+0x18a>
 8007770:	3901      	subs	r1, #1
 8007772:	465a      	mov	r2, fp
 8007774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007778:	9109      	str	r1, [sp, #36]	; 0x24
 800777a:	f7ff ff17 	bl	80075ac <__exponent>
 800777e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007780:	1813      	adds	r3, r2, r0
 8007782:	2a01      	cmp	r2, #1
 8007784:	4681      	mov	r9, r0
 8007786:	6123      	str	r3, [r4, #16]
 8007788:	dc02      	bgt.n	8007790 <_printf_float+0x168>
 800778a:	6822      	ldr	r2, [r4, #0]
 800778c:	07d2      	lsls	r2, r2, #31
 800778e:	d501      	bpl.n	8007794 <_printf_float+0x16c>
 8007790:	3301      	adds	r3, #1
 8007792:	6123      	str	r3, [r4, #16]
 8007794:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007798:	2b00      	cmp	r3, #0
 800779a:	d09c      	beq.n	80076d6 <_printf_float+0xae>
 800779c:	232d      	movs	r3, #45	; 0x2d
 800779e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a2:	e798      	b.n	80076d6 <_printf_float+0xae>
 80077a4:	9a06      	ldr	r2, [sp, #24]
 80077a6:	2a47      	cmp	r2, #71	; 0x47
 80077a8:	d1be      	bne.n	8007728 <_printf_float+0x100>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1bc      	bne.n	8007728 <_printf_float+0x100>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e7b9      	b.n	8007726 <_printf_float+0xfe>
 80077b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077b6:	d118      	bne.n	80077ea <_printf_float+0x1c2>
 80077b8:	2900      	cmp	r1, #0
 80077ba:	6863      	ldr	r3, [r4, #4]
 80077bc:	dd0b      	ble.n	80077d6 <_printf_float+0x1ae>
 80077be:	6121      	str	r1, [r4, #16]
 80077c0:	b913      	cbnz	r3, 80077c8 <_printf_float+0x1a0>
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	07d0      	lsls	r0, r2, #31
 80077c6:	d502      	bpl.n	80077ce <_printf_float+0x1a6>
 80077c8:	3301      	adds	r3, #1
 80077ca:	440b      	add	r3, r1
 80077cc:	6123      	str	r3, [r4, #16]
 80077ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80077d0:	f04f 0900 	mov.w	r9, #0
 80077d4:	e7de      	b.n	8007794 <_printf_float+0x16c>
 80077d6:	b913      	cbnz	r3, 80077de <_printf_float+0x1b6>
 80077d8:	6822      	ldr	r2, [r4, #0]
 80077da:	07d2      	lsls	r2, r2, #31
 80077dc:	d501      	bpl.n	80077e2 <_printf_float+0x1ba>
 80077de:	3302      	adds	r3, #2
 80077e0:	e7f4      	b.n	80077cc <_printf_float+0x1a4>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e7f2      	b.n	80077cc <_printf_float+0x1a4>
 80077e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ec:	4299      	cmp	r1, r3
 80077ee:	db05      	blt.n	80077fc <_printf_float+0x1d4>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	6121      	str	r1, [r4, #16]
 80077f4:	07d8      	lsls	r0, r3, #31
 80077f6:	d5ea      	bpl.n	80077ce <_printf_float+0x1a6>
 80077f8:	1c4b      	adds	r3, r1, #1
 80077fa:	e7e7      	b.n	80077cc <_printf_float+0x1a4>
 80077fc:	2900      	cmp	r1, #0
 80077fe:	bfd4      	ite	le
 8007800:	f1c1 0202 	rsble	r2, r1, #2
 8007804:	2201      	movgt	r2, #1
 8007806:	4413      	add	r3, r2
 8007808:	e7e0      	b.n	80077cc <_printf_float+0x1a4>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	055a      	lsls	r2, r3, #21
 800780e:	d407      	bmi.n	8007820 <_printf_float+0x1f8>
 8007810:	6923      	ldr	r3, [r4, #16]
 8007812:	4642      	mov	r2, r8
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	d12c      	bne.n	8007878 <_printf_float+0x250>
 800781e:	e764      	b.n	80076ea <_printf_float+0xc2>
 8007820:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007824:	f240 80e0 	bls.w	80079e8 <_printf_float+0x3c0>
 8007828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800782c:	2200      	movs	r2, #0
 800782e:	2300      	movs	r3, #0
 8007830:	f7f9 f94a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007834:	2800      	cmp	r0, #0
 8007836:	d034      	beq.n	80078a2 <_printf_float+0x27a>
 8007838:	4a37      	ldr	r2, [pc, #220]	; (8007918 <_printf_float+0x2f0>)
 800783a:	2301      	movs	r3, #1
 800783c:	4631      	mov	r1, r6
 800783e:	4628      	mov	r0, r5
 8007840:	47b8      	blx	r7
 8007842:	3001      	adds	r0, #1
 8007844:	f43f af51 	beq.w	80076ea <_printf_float+0xc2>
 8007848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800784c:	429a      	cmp	r2, r3
 800784e:	db02      	blt.n	8007856 <_printf_float+0x22e>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	07d8      	lsls	r0, r3, #31
 8007854:	d510      	bpl.n	8007878 <_printf_float+0x250>
 8007856:	ee18 3a10 	vmov	r3, s16
 800785a:	4652      	mov	r2, sl
 800785c:	4631      	mov	r1, r6
 800785e:	4628      	mov	r0, r5
 8007860:	47b8      	blx	r7
 8007862:	3001      	adds	r0, #1
 8007864:	f43f af41 	beq.w	80076ea <_printf_float+0xc2>
 8007868:	f04f 0800 	mov.w	r8, #0
 800786c:	f104 091a 	add.w	r9, r4, #26
 8007870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007872:	3b01      	subs	r3, #1
 8007874:	4543      	cmp	r3, r8
 8007876:	dc09      	bgt.n	800788c <_printf_float+0x264>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	079b      	lsls	r3, r3, #30
 800787c:	f100 8105 	bmi.w	8007a8a <_printf_float+0x462>
 8007880:	68e0      	ldr	r0, [r4, #12]
 8007882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007884:	4298      	cmp	r0, r3
 8007886:	bfb8      	it	lt
 8007888:	4618      	movlt	r0, r3
 800788a:	e730      	b.n	80076ee <_printf_float+0xc6>
 800788c:	2301      	movs	r3, #1
 800788e:	464a      	mov	r2, r9
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	f43f af27 	beq.w	80076ea <_printf_float+0xc2>
 800789c:	f108 0801 	add.w	r8, r8, #1
 80078a0:	e7e6      	b.n	8007870 <_printf_float+0x248>
 80078a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dc39      	bgt.n	800791c <_printf_float+0x2f4>
 80078a8:	4a1b      	ldr	r2, [pc, #108]	; (8007918 <_printf_float+0x2f0>)
 80078aa:	2301      	movs	r3, #1
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	f43f af19 	beq.w	80076ea <_printf_float+0xc2>
 80078b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078bc:	4313      	orrs	r3, r2
 80078be:	d102      	bne.n	80078c6 <_printf_float+0x29e>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	07d9      	lsls	r1, r3, #31
 80078c4:	d5d8      	bpl.n	8007878 <_printf_float+0x250>
 80078c6:	ee18 3a10 	vmov	r3, s16
 80078ca:	4652      	mov	r2, sl
 80078cc:	4631      	mov	r1, r6
 80078ce:	4628      	mov	r0, r5
 80078d0:	47b8      	blx	r7
 80078d2:	3001      	adds	r0, #1
 80078d4:	f43f af09 	beq.w	80076ea <_printf_float+0xc2>
 80078d8:	f04f 0900 	mov.w	r9, #0
 80078dc:	f104 0a1a 	add.w	sl, r4, #26
 80078e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e2:	425b      	negs	r3, r3
 80078e4:	454b      	cmp	r3, r9
 80078e6:	dc01      	bgt.n	80078ec <_printf_float+0x2c4>
 80078e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ea:	e792      	b.n	8007812 <_printf_float+0x1ea>
 80078ec:	2301      	movs	r3, #1
 80078ee:	4652      	mov	r2, sl
 80078f0:	4631      	mov	r1, r6
 80078f2:	4628      	mov	r0, r5
 80078f4:	47b8      	blx	r7
 80078f6:	3001      	adds	r0, #1
 80078f8:	f43f aef7 	beq.w	80076ea <_printf_float+0xc2>
 80078fc:	f109 0901 	add.w	r9, r9, #1
 8007900:	e7ee      	b.n	80078e0 <_printf_float+0x2b8>
 8007902:	bf00      	nop
 8007904:	7fefffff 	.word	0x7fefffff
 8007908:	0801ee14 	.word	0x0801ee14
 800790c:	0801ee18 	.word	0x0801ee18
 8007910:	0801ee20 	.word	0x0801ee20
 8007914:	0801ee1c 	.word	0x0801ee1c
 8007918:	0801ee24 	.word	0x0801ee24
 800791c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800791e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007920:	429a      	cmp	r2, r3
 8007922:	bfa8      	it	ge
 8007924:	461a      	movge	r2, r3
 8007926:	2a00      	cmp	r2, #0
 8007928:	4691      	mov	r9, r2
 800792a:	dc37      	bgt.n	800799c <_printf_float+0x374>
 800792c:	f04f 0b00 	mov.w	fp, #0
 8007930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007934:	f104 021a 	add.w	r2, r4, #26
 8007938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800793a:	9305      	str	r3, [sp, #20]
 800793c:	eba3 0309 	sub.w	r3, r3, r9
 8007940:	455b      	cmp	r3, fp
 8007942:	dc33      	bgt.n	80079ac <_printf_float+0x384>
 8007944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007948:	429a      	cmp	r2, r3
 800794a:	db3b      	blt.n	80079c4 <_printf_float+0x39c>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	07da      	lsls	r2, r3, #31
 8007950:	d438      	bmi.n	80079c4 <_printf_float+0x39c>
 8007952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007954:	9b05      	ldr	r3, [sp, #20]
 8007956:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	eba2 0901 	sub.w	r9, r2, r1
 800795e:	4599      	cmp	r9, r3
 8007960:	bfa8      	it	ge
 8007962:	4699      	movge	r9, r3
 8007964:	f1b9 0f00 	cmp.w	r9, #0
 8007968:	dc35      	bgt.n	80079d6 <_printf_float+0x3ae>
 800796a:	f04f 0800 	mov.w	r8, #0
 800796e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007972:	f104 0a1a 	add.w	sl, r4, #26
 8007976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800797a:	1a9b      	subs	r3, r3, r2
 800797c:	eba3 0309 	sub.w	r3, r3, r9
 8007980:	4543      	cmp	r3, r8
 8007982:	f77f af79 	ble.w	8007878 <_printf_float+0x250>
 8007986:	2301      	movs	r3, #1
 8007988:	4652      	mov	r2, sl
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	f43f aeaa 	beq.w	80076ea <_printf_float+0xc2>
 8007996:	f108 0801 	add.w	r8, r8, #1
 800799a:	e7ec      	b.n	8007976 <_printf_float+0x34e>
 800799c:	4613      	mov	r3, r2
 800799e:	4631      	mov	r1, r6
 80079a0:	4642      	mov	r2, r8
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b8      	blx	r7
 80079a6:	3001      	adds	r0, #1
 80079a8:	d1c0      	bne.n	800792c <_printf_float+0x304>
 80079aa:	e69e      	b.n	80076ea <_printf_float+0xc2>
 80079ac:	2301      	movs	r3, #1
 80079ae:	4631      	mov	r1, r6
 80079b0:	4628      	mov	r0, r5
 80079b2:	9205      	str	r2, [sp, #20]
 80079b4:	47b8      	blx	r7
 80079b6:	3001      	adds	r0, #1
 80079b8:	f43f ae97 	beq.w	80076ea <_printf_float+0xc2>
 80079bc:	9a05      	ldr	r2, [sp, #20]
 80079be:	f10b 0b01 	add.w	fp, fp, #1
 80079c2:	e7b9      	b.n	8007938 <_printf_float+0x310>
 80079c4:	ee18 3a10 	vmov	r3, s16
 80079c8:	4652      	mov	r2, sl
 80079ca:	4631      	mov	r1, r6
 80079cc:	4628      	mov	r0, r5
 80079ce:	47b8      	blx	r7
 80079d0:	3001      	adds	r0, #1
 80079d2:	d1be      	bne.n	8007952 <_printf_float+0x32a>
 80079d4:	e689      	b.n	80076ea <_printf_float+0xc2>
 80079d6:	9a05      	ldr	r2, [sp, #20]
 80079d8:	464b      	mov	r3, r9
 80079da:	4442      	add	r2, r8
 80079dc:	4631      	mov	r1, r6
 80079de:	4628      	mov	r0, r5
 80079e0:	47b8      	blx	r7
 80079e2:	3001      	adds	r0, #1
 80079e4:	d1c1      	bne.n	800796a <_printf_float+0x342>
 80079e6:	e680      	b.n	80076ea <_printf_float+0xc2>
 80079e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ea:	2a01      	cmp	r2, #1
 80079ec:	dc01      	bgt.n	80079f2 <_printf_float+0x3ca>
 80079ee:	07db      	lsls	r3, r3, #31
 80079f0:	d538      	bpl.n	8007a64 <_printf_float+0x43c>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4642      	mov	r2, r8
 80079f6:	4631      	mov	r1, r6
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b8      	blx	r7
 80079fc:	3001      	adds	r0, #1
 80079fe:	f43f ae74 	beq.w	80076ea <_printf_float+0xc2>
 8007a02:	ee18 3a10 	vmov	r3, s16
 8007a06:	4652      	mov	r2, sl
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f43f ae6b 	beq.w	80076ea <_printf_float+0xc2>
 8007a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f7f9 f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a20:	b9d8      	cbnz	r0, 8007a5a <_printf_float+0x432>
 8007a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a24:	f108 0201 	add.w	r2, r8, #1
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b8      	blx	r7
 8007a30:	3001      	adds	r0, #1
 8007a32:	d10e      	bne.n	8007a52 <_printf_float+0x42a>
 8007a34:	e659      	b.n	80076ea <_printf_float+0xc2>
 8007a36:	2301      	movs	r3, #1
 8007a38:	4652      	mov	r2, sl
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	f43f ae52 	beq.w	80076ea <_printf_float+0xc2>
 8007a46:	f108 0801 	add.w	r8, r8, #1
 8007a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	4543      	cmp	r3, r8
 8007a50:	dcf1      	bgt.n	8007a36 <_printf_float+0x40e>
 8007a52:	464b      	mov	r3, r9
 8007a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a58:	e6dc      	b.n	8007814 <_printf_float+0x1ec>
 8007a5a:	f04f 0800 	mov.w	r8, #0
 8007a5e:	f104 0a1a 	add.w	sl, r4, #26
 8007a62:	e7f2      	b.n	8007a4a <_printf_float+0x422>
 8007a64:	2301      	movs	r3, #1
 8007a66:	4642      	mov	r2, r8
 8007a68:	e7df      	b.n	8007a2a <_printf_float+0x402>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	464a      	mov	r2, r9
 8007a6e:	4631      	mov	r1, r6
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b8      	blx	r7
 8007a74:	3001      	adds	r0, #1
 8007a76:	f43f ae38 	beq.w	80076ea <_printf_float+0xc2>
 8007a7a:	f108 0801 	add.w	r8, r8, #1
 8007a7e:	68e3      	ldr	r3, [r4, #12]
 8007a80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a82:	1a5b      	subs	r3, r3, r1
 8007a84:	4543      	cmp	r3, r8
 8007a86:	dcf0      	bgt.n	8007a6a <_printf_float+0x442>
 8007a88:	e6fa      	b.n	8007880 <_printf_float+0x258>
 8007a8a:	f04f 0800 	mov.w	r8, #0
 8007a8e:	f104 0919 	add.w	r9, r4, #25
 8007a92:	e7f4      	b.n	8007a7e <_printf_float+0x456>

08007a94 <_printf_common>:
 8007a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	4616      	mov	r6, r2
 8007a9a:	4699      	mov	r9, r3
 8007a9c:	688a      	ldr	r2, [r1, #8]
 8007a9e:	690b      	ldr	r3, [r1, #16]
 8007aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	bfb8      	it	lt
 8007aa8:	4613      	movlt	r3, r2
 8007aaa:	6033      	str	r3, [r6, #0]
 8007aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ab0:	4607      	mov	r7, r0
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	b10a      	cbz	r2, 8007aba <_printf_common+0x26>
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	6033      	str	r3, [r6, #0]
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	0699      	lsls	r1, r3, #26
 8007abe:	bf42      	ittt	mi
 8007ac0:	6833      	ldrmi	r3, [r6, #0]
 8007ac2:	3302      	addmi	r3, #2
 8007ac4:	6033      	strmi	r3, [r6, #0]
 8007ac6:	6825      	ldr	r5, [r4, #0]
 8007ac8:	f015 0506 	ands.w	r5, r5, #6
 8007acc:	d106      	bne.n	8007adc <_printf_common+0x48>
 8007ace:	f104 0a19 	add.w	sl, r4, #25
 8007ad2:	68e3      	ldr	r3, [r4, #12]
 8007ad4:	6832      	ldr	r2, [r6, #0]
 8007ad6:	1a9b      	subs	r3, r3, r2
 8007ad8:	42ab      	cmp	r3, r5
 8007ada:	dc26      	bgt.n	8007b2a <_printf_common+0x96>
 8007adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ae0:	1e13      	subs	r3, r2, #0
 8007ae2:	6822      	ldr	r2, [r4, #0]
 8007ae4:	bf18      	it	ne
 8007ae6:	2301      	movne	r3, #1
 8007ae8:	0692      	lsls	r2, r2, #26
 8007aea:	d42b      	bmi.n	8007b44 <_printf_common+0xb0>
 8007aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007af0:	4649      	mov	r1, r9
 8007af2:	4638      	mov	r0, r7
 8007af4:	47c0      	blx	r8
 8007af6:	3001      	adds	r0, #1
 8007af8:	d01e      	beq.n	8007b38 <_printf_common+0xa4>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	68e5      	ldr	r5, [r4, #12]
 8007afe:	6832      	ldr	r2, [r6, #0]
 8007b00:	f003 0306 	and.w	r3, r3, #6
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	bf08      	it	eq
 8007b08:	1aad      	subeq	r5, r5, r2
 8007b0a:	68a3      	ldr	r3, [r4, #8]
 8007b0c:	6922      	ldr	r2, [r4, #16]
 8007b0e:	bf0c      	ite	eq
 8007b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b14:	2500      	movne	r5, #0
 8007b16:	4293      	cmp	r3, r2
 8007b18:	bfc4      	itt	gt
 8007b1a:	1a9b      	subgt	r3, r3, r2
 8007b1c:	18ed      	addgt	r5, r5, r3
 8007b1e:	2600      	movs	r6, #0
 8007b20:	341a      	adds	r4, #26
 8007b22:	42b5      	cmp	r5, r6
 8007b24:	d11a      	bne.n	8007b5c <_printf_common+0xc8>
 8007b26:	2000      	movs	r0, #0
 8007b28:	e008      	b.n	8007b3c <_printf_common+0xa8>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	4652      	mov	r2, sl
 8007b2e:	4649      	mov	r1, r9
 8007b30:	4638      	mov	r0, r7
 8007b32:	47c0      	blx	r8
 8007b34:	3001      	adds	r0, #1
 8007b36:	d103      	bne.n	8007b40 <_printf_common+0xac>
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b40:	3501      	adds	r5, #1
 8007b42:	e7c6      	b.n	8007ad2 <_printf_common+0x3e>
 8007b44:	18e1      	adds	r1, r4, r3
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	2030      	movs	r0, #48	; 0x30
 8007b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b4e:	4422      	add	r2, r4
 8007b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b58:	3302      	adds	r3, #2
 8007b5a:	e7c7      	b.n	8007aec <_printf_common+0x58>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4622      	mov	r2, r4
 8007b60:	4649      	mov	r1, r9
 8007b62:	4638      	mov	r0, r7
 8007b64:	47c0      	blx	r8
 8007b66:	3001      	adds	r0, #1
 8007b68:	d0e6      	beq.n	8007b38 <_printf_common+0xa4>
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	e7d9      	b.n	8007b22 <_printf_common+0x8e>
	...

08007b70 <_printf_i>:
 8007b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b74:	460c      	mov	r4, r1
 8007b76:	4691      	mov	r9, r2
 8007b78:	7e27      	ldrb	r7, [r4, #24]
 8007b7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b7c:	2f78      	cmp	r7, #120	; 0x78
 8007b7e:	4680      	mov	r8, r0
 8007b80:	469a      	mov	sl, r3
 8007b82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b86:	d807      	bhi.n	8007b98 <_printf_i+0x28>
 8007b88:	2f62      	cmp	r7, #98	; 0x62
 8007b8a:	d80a      	bhi.n	8007ba2 <_printf_i+0x32>
 8007b8c:	2f00      	cmp	r7, #0
 8007b8e:	f000 80d8 	beq.w	8007d42 <_printf_i+0x1d2>
 8007b92:	2f58      	cmp	r7, #88	; 0x58
 8007b94:	f000 80a3 	beq.w	8007cde <_printf_i+0x16e>
 8007b98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ba0:	e03a      	b.n	8007c18 <_printf_i+0xa8>
 8007ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ba6:	2b15      	cmp	r3, #21
 8007ba8:	d8f6      	bhi.n	8007b98 <_printf_i+0x28>
 8007baa:	a001      	add	r0, pc, #4	; (adr r0, 8007bb0 <_printf_i+0x40>)
 8007bac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007bb0:	08007c09 	.word	0x08007c09
 8007bb4:	08007c1d 	.word	0x08007c1d
 8007bb8:	08007b99 	.word	0x08007b99
 8007bbc:	08007b99 	.word	0x08007b99
 8007bc0:	08007b99 	.word	0x08007b99
 8007bc4:	08007b99 	.word	0x08007b99
 8007bc8:	08007c1d 	.word	0x08007c1d
 8007bcc:	08007b99 	.word	0x08007b99
 8007bd0:	08007b99 	.word	0x08007b99
 8007bd4:	08007b99 	.word	0x08007b99
 8007bd8:	08007b99 	.word	0x08007b99
 8007bdc:	08007d29 	.word	0x08007d29
 8007be0:	08007c4d 	.word	0x08007c4d
 8007be4:	08007d0b 	.word	0x08007d0b
 8007be8:	08007b99 	.word	0x08007b99
 8007bec:	08007b99 	.word	0x08007b99
 8007bf0:	08007d4b 	.word	0x08007d4b
 8007bf4:	08007b99 	.word	0x08007b99
 8007bf8:	08007c4d 	.word	0x08007c4d
 8007bfc:	08007b99 	.word	0x08007b99
 8007c00:	08007b99 	.word	0x08007b99
 8007c04:	08007d13 	.word	0x08007d13
 8007c08:	680b      	ldr	r3, [r1, #0]
 8007c0a:	1d1a      	adds	r2, r3, #4
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	600a      	str	r2, [r1, #0]
 8007c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e0a3      	b.n	8007d64 <_printf_i+0x1f4>
 8007c1c:	6825      	ldr	r5, [r4, #0]
 8007c1e:	6808      	ldr	r0, [r1, #0]
 8007c20:	062e      	lsls	r6, r5, #24
 8007c22:	f100 0304 	add.w	r3, r0, #4
 8007c26:	d50a      	bpl.n	8007c3e <_printf_i+0xce>
 8007c28:	6805      	ldr	r5, [r0, #0]
 8007c2a:	600b      	str	r3, [r1, #0]
 8007c2c:	2d00      	cmp	r5, #0
 8007c2e:	da03      	bge.n	8007c38 <_printf_i+0xc8>
 8007c30:	232d      	movs	r3, #45	; 0x2d
 8007c32:	426d      	negs	r5, r5
 8007c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c38:	485e      	ldr	r0, [pc, #376]	; (8007db4 <_printf_i+0x244>)
 8007c3a:	230a      	movs	r3, #10
 8007c3c:	e019      	b.n	8007c72 <_printf_i+0x102>
 8007c3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c42:	6805      	ldr	r5, [r0, #0]
 8007c44:	600b      	str	r3, [r1, #0]
 8007c46:	bf18      	it	ne
 8007c48:	b22d      	sxthne	r5, r5
 8007c4a:	e7ef      	b.n	8007c2c <_printf_i+0xbc>
 8007c4c:	680b      	ldr	r3, [r1, #0]
 8007c4e:	6825      	ldr	r5, [r4, #0]
 8007c50:	1d18      	adds	r0, r3, #4
 8007c52:	6008      	str	r0, [r1, #0]
 8007c54:	0628      	lsls	r0, r5, #24
 8007c56:	d501      	bpl.n	8007c5c <_printf_i+0xec>
 8007c58:	681d      	ldr	r5, [r3, #0]
 8007c5a:	e002      	b.n	8007c62 <_printf_i+0xf2>
 8007c5c:	0669      	lsls	r1, r5, #25
 8007c5e:	d5fb      	bpl.n	8007c58 <_printf_i+0xe8>
 8007c60:	881d      	ldrh	r5, [r3, #0]
 8007c62:	4854      	ldr	r0, [pc, #336]	; (8007db4 <_printf_i+0x244>)
 8007c64:	2f6f      	cmp	r7, #111	; 0x6f
 8007c66:	bf0c      	ite	eq
 8007c68:	2308      	moveq	r3, #8
 8007c6a:	230a      	movne	r3, #10
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c72:	6866      	ldr	r6, [r4, #4]
 8007c74:	60a6      	str	r6, [r4, #8]
 8007c76:	2e00      	cmp	r6, #0
 8007c78:	bfa2      	ittt	ge
 8007c7a:	6821      	ldrge	r1, [r4, #0]
 8007c7c:	f021 0104 	bicge.w	r1, r1, #4
 8007c80:	6021      	strge	r1, [r4, #0]
 8007c82:	b90d      	cbnz	r5, 8007c88 <_printf_i+0x118>
 8007c84:	2e00      	cmp	r6, #0
 8007c86:	d04d      	beq.n	8007d24 <_printf_i+0x1b4>
 8007c88:	4616      	mov	r6, r2
 8007c8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c8e:	fb03 5711 	mls	r7, r3, r1, r5
 8007c92:	5dc7      	ldrb	r7, [r0, r7]
 8007c94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c98:	462f      	mov	r7, r5
 8007c9a:	42bb      	cmp	r3, r7
 8007c9c:	460d      	mov	r5, r1
 8007c9e:	d9f4      	bls.n	8007c8a <_printf_i+0x11a>
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d10b      	bne.n	8007cbc <_printf_i+0x14c>
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	07df      	lsls	r7, r3, #31
 8007ca8:	d508      	bpl.n	8007cbc <_printf_i+0x14c>
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	6861      	ldr	r1, [r4, #4]
 8007cae:	4299      	cmp	r1, r3
 8007cb0:	bfde      	ittt	le
 8007cb2:	2330      	movle	r3, #48	; 0x30
 8007cb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cbc:	1b92      	subs	r2, r2, r6
 8007cbe:	6122      	str	r2, [r4, #16]
 8007cc0:	f8cd a000 	str.w	sl, [sp]
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	aa03      	add	r2, sp, #12
 8007cc8:	4621      	mov	r1, r4
 8007cca:	4640      	mov	r0, r8
 8007ccc:	f7ff fee2 	bl	8007a94 <_printf_common>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d14c      	bne.n	8007d6e <_printf_i+0x1fe>
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	b004      	add	sp, #16
 8007cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cde:	4835      	ldr	r0, [pc, #212]	; (8007db4 <_printf_i+0x244>)
 8007ce0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	680e      	ldr	r6, [r1, #0]
 8007ce8:	061f      	lsls	r7, r3, #24
 8007cea:	f856 5b04 	ldr.w	r5, [r6], #4
 8007cee:	600e      	str	r6, [r1, #0]
 8007cf0:	d514      	bpl.n	8007d1c <_printf_i+0x1ac>
 8007cf2:	07d9      	lsls	r1, r3, #31
 8007cf4:	bf44      	itt	mi
 8007cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8007cfa:	6023      	strmi	r3, [r4, #0]
 8007cfc:	b91d      	cbnz	r5, 8007d06 <_printf_i+0x196>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	f023 0320 	bic.w	r3, r3, #32
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	2310      	movs	r3, #16
 8007d08:	e7b0      	b.n	8007c6c <_printf_i+0xfc>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	f043 0320 	orr.w	r3, r3, #32
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	2378      	movs	r3, #120	; 0x78
 8007d14:	4828      	ldr	r0, [pc, #160]	; (8007db8 <_printf_i+0x248>)
 8007d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d1a:	e7e3      	b.n	8007ce4 <_printf_i+0x174>
 8007d1c:	065e      	lsls	r6, r3, #25
 8007d1e:	bf48      	it	mi
 8007d20:	b2ad      	uxthmi	r5, r5
 8007d22:	e7e6      	b.n	8007cf2 <_printf_i+0x182>
 8007d24:	4616      	mov	r6, r2
 8007d26:	e7bb      	b.n	8007ca0 <_printf_i+0x130>
 8007d28:	680b      	ldr	r3, [r1, #0]
 8007d2a:	6826      	ldr	r6, [r4, #0]
 8007d2c:	6960      	ldr	r0, [r4, #20]
 8007d2e:	1d1d      	adds	r5, r3, #4
 8007d30:	600d      	str	r5, [r1, #0]
 8007d32:	0635      	lsls	r5, r6, #24
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	d501      	bpl.n	8007d3c <_printf_i+0x1cc>
 8007d38:	6018      	str	r0, [r3, #0]
 8007d3a:	e002      	b.n	8007d42 <_printf_i+0x1d2>
 8007d3c:	0671      	lsls	r1, r6, #25
 8007d3e:	d5fb      	bpl.n	8007d38 <_printf_i+0x1c8>
 8007d40:	8018      	strh	r0, [r3, #0]
 8007d42:	2300      	movs	r3, #0
 8007d44:	6123      	str	r3, [r4, #16]
 8007d46:	4616      	mov	r6, r2
 8007d48:	e7ba      	b.n	8007cc0 <_printf_i+0x150>
 8007d4a:	680b      	ldr	r3, [r1, #0]
 8007d4c:	1d1a      	adds	r2, r3, #4
 8007d4e:	600a      	str	r2, [r1, #0]
 8007d50:	681e      	ldr	r6, [r3, #0]
 8007d52:	6862      	ldr	r2, [r4, #4]
 8007d54:	2100      	movs	r1, #0
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7f8 fa42 	bl	80001e0 <memchr>
 8007d5c:	b108      	cbz	r0, 8007d62 <_printf_i+0x1f2>
 8007d5e:	1b80      	subs	r0, r0, r6
 8007d60:	6060      	str	r0, [r4, #4]
 8007d62:	6863      	ldr	r3, [r4, #4]
 8007d64:	6123      	str	r3, [r4, #16]
 8007d66:	2300      	movs	r3, #0
 8007d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d6c:	e7a8      	b.n	8007cc0 <_printf_i+0x150>
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	4632      	mov	r2, r6
 8007d72:	4649      	mov	r1, r9
 8007d74:	4640      	mov	r0, r8
 8007d76:	47d0      	blx	sl
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d0ab      	beq.n	8007cd4 <_printf_i+0x164>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	079b      	lsls	r3, r3, #30
 8007d80:	d413      	bmi.n	8007daa <_printf_i+0x23a>
 8007d82:	68e0      	ldr	r0, [r4, #12]
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	4298      	cmp	r0, r3
 8007d88:	bfb8      	it	lt
 8007d8a:	4618      	movlt	r0, r3
 8007d8c:	e7a4      	b.n	8007cd8 <_printf_i+0x168>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4632      	mov	r2, r6
 8007d92:	4649      	mov	r1, r9
 8007d94:	4640      	mov	r0, r8
 8007d96:	47d0      	blx	sl
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d09b      	beq.n	8007cd4 <_printf_i+0x164>
 8007d9c:	3501      	adds	r5, #1
 8007d9e:	68e3      	ldr	r3, [r4, #12]
 8007da0:	9903      	ldr	r1, [sp, #12]
 8007da2:	1a5b      	subs	r3, r3, r1
 8007da4:	42ab      	cmp	r3, r5
 8007da6:	dcf2      	bgt.n	8007d8e <_printf_i+0x21e>
 8007da8:	e7eb      	b.n	8007d82 <_printf_i+0x212>
 8007daa:	2500      	movs	r5, #0
 8007dac:	f104 0619 	add.w	r6, r4, #25
 8007db0:	e7f5      	b.n	8007d9e <_printf_i+0x22e>
 8007db2:	bf00      	nop
 8007db4:	0801ee26 	.word	0x0801ee26
 8007db8:	0801ee37 	.word	0x0801ee37

08007dbc <_scanf_float>:
 8007dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc0:	b087      	sub	sp, #28
 8007dc2:	4617      	mov	r7, r2
 8007dc4:	9303      	str	r3, [sp, #12]
 8007dc6:	688b      	ldr	r3, [r1, #8]
 8007dc8:	1e5a      	subs	r2, r3, #1
 8007dca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007dce:	bf83      	ittte	hi
 8007dd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007dd4:	195b      	addhi	r3, r3, r5
 8007dd6:	9302      	strhi	r3, [sp, #8]
 8007dd8:	2300      	movls	r3, #0
 8007dda:	bf86      	itte	hi
 8007ddc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007de0:	608b      	strhi	r3, [r1, #8]
 8007de2:	9302      	strls	r3, [sp, #8]
 8007de4:	680b      	ldr	r3, [r1, #0]
 8007de6:	468b      	mov	fp, r1
 8007de8:	2500      	movs	r5, #0
 8007dea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007dee:	f84b 3b1c 	str.w	r3, [fp], #28
 8007df2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007df6:	4680      	mov	r8, r0
 8007df8:	460c      	mov	r4, r1
 8007dfa:	465e      	mov	r6, fp
 8007dfc:	46aa      	mov	sl, r5
 8007dfe:	46a9      	mov	r9, r5
 8007e00:	9501      	str	r5, [sp, #4]
 8007e02:	68a2      	ldr	r2, [r4, #8]
 8007e04:	b152      	cbz	r2, 8007e1c <_scanf_float+0x60>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b4e      	cmp	r3, #78	; 0x4e
 8007e0c:	d864      	bhi.n	8007ed8 <_scanf_float+0x11c>
 8007e0e:	2b40      	cmp	r3, #64	; 0x40
 8007e10:	d83c      	bhi.n	8007e8c <_scanf_float+0xd0>
 8007e12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007e16:	b2c8      	uxtb	r0, r1
 8007e18:	280e      	cmp	r0, #14
 8007e1a:	d93a      	bls.n	8007e92 <_scanf_float+0xd6>
 8007e1c:	f1b9 0f00 	cmp.w	r9, #0
 8007e20:	d003      	beq.n	8007e2a <_scanf_float+0x6e>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e2e:	f1ba 0f01 	cmp.w	sl, #1
 8007e32:	f200 8113 	bhi.w	800805c <_scanf_float+0x2a0>
 8007e36:	455e      	cmp	r6, fp
 8007e38:	f200 8105 	bhi.w	8008046 <_scanf_float+0x28a>
 8007e3c:	2501      	movs	r5, #1
 8007e3e:	4628      	mov	r0, r5
 8007e40:	b007      	add	sp, #28
 8007e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007e4a:	2a0d      	cmp	r2, #13
 8007e4c:	d8e6      	bhi.n	8007e1c <_scanf_float+0x60>
 8007e4e:	a101      	add	r1, pc, #4	; (adr r1, 8007e54 <_scanf_float+0x98>)
 8007e50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e54:	08007f93 	.word	0x08007f93
 8007e58:	08007e1d 	.word	0x08007e1d
 8007e5c:	08007e1d 	.word	0x08007e1d
 8007e60:	08007e1d 	.word	0x08007e1d
 8007e64:	08007ff3 	.word	0x08007ff3
 8007e68:	08007fcb 	.word	0x08007fcb
 8007e6c:	08007e1d 	.word	0x08007e1d
 8007e70:	08007e1d 	.word	0x08007e1d
 8007e74:	08007fa1 	.word	0x08007fa1
 8007e78:	08007e1d 	.word	0x08007e1d
 8007e7c:	08007e1d 	.word	0x08007e1d
 8007e80:	08007e1d 	.word	0x08007e1d
 8007e84:	08007e1d 	.word	0x08007e1d
 8007e88:	08007f59 	.word	0x08007f59
 8007e8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007e90:	e7db      	b.n	8007e4a <_scanf_float+0x8e>
 8007e92:	290e      	cmp	r1, #14
 8007e94:	d8c2      	bhi.n	8007e1c <_scanf_float+0x60>
 8007e96:	a001      	add	r0, pc, #4	; (adr r0, 8007e9c <_scanf_float+0xe0>)
 8007e98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007e9c:	08007f4b 	.word	0x08007f4b
 8007ea0:	08007e1d 	.word	0x08007e1d
 8007ea4:	08007f4b 	.word	0x08007f4b
 8007ea8:	08007fdf 	.word	0x08007fdf
 8007eac:	08007e1d 	.word	0x08007e1d
 8007eb0:	08007ef9 	.word	0x08007ef9
 8007eb4:	08007f35 	.word	0x08007f35
 8007eb8:	08007f35 	.word	0x08007f35
 8007ebc:	08007f35 	.word	0x08007f35
 8007ec0:	08007f35 	.word	0x08007f35
 8007ec4:	08007f35 	.word	0x08007f35
 8007ec8:	08007f35 	.word	0x08007f35
 8007ecc:	08007f35 	.word	0x08007f35
 8007ed0:	08007f35 	.word	0x08007f35
 8007ed4:	08007f35 	.word	0x08007f35
 8007ed8:	2b6e      	cmp	r3, #110	; 0x6e
 8007eda:	d809      	bhi.n	8007ef0 <_scanf_float+0x134>
 8007edc:	2b60      	cmp	r3, #96	; 0x60
 8007ede:	d8b2      	bhi.n	8007e46 <_scanf_float+0x8a>
 8007ee0:	2b54      	cmp	r3, #84	; 0x54
 8007ee2:	d077      	beq.n	8007fd4 <_scanf_float+0x218>
 8007ee4:	2b59      	cmp	r3, #89	; 0x59
 8007ee6:	d199      	bne.n	8007e1c <_scanf_float+0x60>
 8007ee8:	2d07      	cmp	r5, #7
 8007eea:	d197      	bne.n	8007e1c <_scanf_float+0x60>
 8007eec:	2508      	movs	r5, #8
 8007eee:	e029      	b.n	8007f44 <_scanf_float+0x188>
 8007ef0:	2b74      	cmp	r3, #116	; 0x74
 8007ef2:	d06f      	beq.n	8007fd4 <_scanf_float+0x218>
 8007ef4:	2b79      	cmp	r3, #121	; 0x79
 8007ef6:	e7f6      	b.n	8007ee6 <_scanf_float+0x12a>
 8007ef8:	6821      	ldr	r1, [r4, #0]
 8007efa:	05c8      	lsls	r0, r1, #23
 8007efc:	d51a      	bpl.n	8007f34 <_scanf_float+0x178>
 8007efe:	9b02      	ldr	r3, [sp, #8]
 8007f00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007f04:	6021      	str	r1, [r4, #0]
 8007f06:	f109 0901 	add.w	r9, r9, #1
 8007f0a:	b11b      	cbz	r3, 8007f14 <_scanf_float+0x158>
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	3201      	adds	r2, #1
 8007f10:	9302      	str	r3, [sp, #8]
 8007f12:	60a2      	str	r2, [r4, #8]
 8007f14:	68a3      	ldr	r3, [r4, #8]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	60a3      	str	r3, [r4, #8]
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	6123      	str	r3, [r4, #16]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	607b      	str	r3, [r7, #4]
 8007f28:	f340 8084 	ble.w	8008034 <_scanf_float+0x278>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	e766      	b.n	8007e02 <_scanf_float+0x46>
 8007f34:	eb1a 0f05 	cmn.w	sl, r5
 8007f38:	f47f af70 	bne.w	8007e1c <_scanf_float+0x60>
 8007f3c:	6822      	ldr	r2, [r4, #0]
 8007f3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007f42:	6022      	str	r2, [r4, #0]
 8007f44:	f806 3b01 	strb.w	r3, [r6], #1
 8007f48:	e7e4      	b.n	8007f14 <_scanf_float+0x158>
 8007f4a:	6822      	ldr	r2, [r4, #0]
 8007f4c:	0610      	lsls	r0, r2, #24
 8007f4e:	f57f af65 	bpl.w	8007e1c <_scanf_float+0x60>
 8007f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f56:	e7f4      	b.n	8007f42 <_scanf_float+0x186>
 8007f58:	f1ba 0f00 	cmp.w	sl, #0
 8007f5c:	d10e      	bne.n	8007f7c <_scanf_float+0x1c0>
 8007f5e:	f1b9 0f00 	cmp.w	r9, #0
 8007f62:	d10e      	bne.n	8007f82 <_scanf_float+0x1c6>
 8007f64:	6822      	ldr	r2, [r4, #0]
 8007f66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007f6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007f6e:	d108      	bne.n	8007f82 <_scanf_float+0x1c6>
 8007f70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f74:	6022      	str	r2, [r4, #0]
 8007f76:	f04f 0a01 	mov.w	sl, #1
 8007f7a:	e7e3      	b.n	8007f44 <_scanf_float+0x188>
 8007f7c:	f1ba 0f02 	cmp.w	sl, #2
 8007f80:	d055      	beq.n	800802e <_scanf_float+0x272>
 8007f82:	2d01      	cmp	r5, #1
 8007f84:	d002      	beq.n	8007f8c <_scanf_float+0x1d0>
 8007f86:	2d04      	cmp	r5, #4
 8007f88:	f47f af48 	bne.w	8007e1c <_scanf_float+0x60>
 8007f8c:	3501      	adds	r5, #1
 8007f8e:	b2ed      	uxtb	r5, r5
 8007f90:	e7d8      	b.n	8007f44 <_scanf_float+0x188>
 8007f92:	f1ba 0f01 	cmp.w	sl, #1
 8007f96:	f47f af41 	bne.w	8007e1c <_scanf_float+0x60>
 8007f9a:	f04f 0a02 	mov.w	sl, #2
 8007f9e:	e7d1      	b.n	8007f44 <_scanf_float+0x188>
 8007fa0:	b97d      	cbnz	r5, 8007fc2 <_scanf_float+0x206>
 8007fa2:	f1b9 0f00 	cmp.w	r9, #0
 8007fa6:	f47f af3c 	bne.w	8007e22 <_scanf_float+0x66>
 8007faa:	6822      	ldr	r2, [r4, #0]
 8007fac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007fb0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007fb4:	f47f af39 	bne.w	8007e2a <_scanf_float+0x6e>
 8007fb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007fbc:	6022      	str	r2, [r4, #0]
 8007fbe:	2501      	movs	r5, #1
 8007fc0:	e7c0      	b.n	8007f44 <_scanf_float+0x188>
 8007fc2:	2d03      	cmp	r5, #3
 8007fc4:	d0e2      	beq.n	8007f8c <_scanf_float+0x1d0>
 8007fc6:	2d05      	cmp	r5, #5
 8007fc8:	e7de      	b.n	8007f88 <_scanf_float+0x1cc>
 8007fca:	2d02      	cmp	r5, #2
 8007fcc:	f47f af26 	bne.w	8007e1c <_scanf_float+0x60>
 8007fd0:	2503      	movs	r5, #3
 8007fd2:	e7b7      	b.n	8007f44 <_scanf_float+0x188>
 8007fd4:	2d06      	cmp	r5, #6
 8007fd6:	f47f af21 	bne.w	8007e1c <_scanf_float+0x60>
 8007fda:	2507      	movs	r5, #7
 8007fdc:	e7b2      	b.n	8007f44 <_scanf_float+0x188>
 8007fde:	6822      	ldr	r2, [r4, #0]
 8007fe0:	0591      	lsls	r1, r2, #22
 8007fe2:	f57f af1b 	bpl.w	8007e1c <_scanf_float+0x60>
 8007fe6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007fea:	6022      	str	r2, [r4, #0]
 8007fec:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ff0:	e7a8      	b.n	8007f44 <_scanf_float+0x188>
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007ff8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007ffc:	d006      	beq.n	800800c <_scanf_float+0x250>
 8007ffe:	0550      	lsls	r0, r2, #21
 8008000:	f57f af0c 	bpl.w	8007e1c <_scanf_float+0x60>
 8008004:	f1b9 0f00 	cmp.w	r9, #0
 8008008:	f43f af0f 	beq.w	8007e2a <_scanf_float+0x6e>
 800800c:	0591      	lsls	r1, r2, #22
 800800e:	bf58      	it	pl
 8008010:	9901      	ldrpl	r1, [sp, #4]
 8008012:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008016:	bf58      	it	pl
 8008018:	eba9 0101 	subpl.w	r1, r9, r1
 800801c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008020:	bf58      	it	pl
 8008022:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008026:	6022      	str	r2, [r4, #0]
 8008028:	f04f 0900 	mov.w	r9, #0
 800802c:	e78a      	b.n	8007f44 <_scanf_float+0x188>
 800802e:	f04f 0a03 	mov.w	sl, #3
 8008032:	e787      	b.n	8007f44 <_scanf_float+0x188>
 8008034:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008038:	4639      	mov	r1, r7
 800803a:	4640      	mov	r0, r8
 800803c:	4798      	blx	r3
 800803e:	2800      	cmp	r0, #0
 8008040:	f43f aedf 	beq.w	8007e02 <_scanf_float+0x46>
 8008044:	e6ea      	b.n	8007e1c <_scanf_float+0x60>
 8008046:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800804a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800804e:	463a      	mov	r2, r7
 8008050:	4640      	mov	r0, r8
 8008052:	4798      	blx	r3
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	3b01      	subs	r3, #1
 8008058:	6123      	str	r3, [r4, #16]
 800805a:	e6ec      	b.n	8007e36 <_scanf_float+0x7a>
 800805c:	1e6b      	subs	r3, r5, #1
 800805e:	2b06      	cmp	r3, #6
 8008060:	d825      	bhi.n	80080ae <_scanf_float+0x2f2>
 8008062:	2d02      	cmp	r5, #2
 8008064:	d836      	bhi.n	80080d4 <_scanf_float+0x318>
 8008066:	455e      	cmp	r6, fp
 8008068:	f67f aee8 	bls.w	8007e3c <_scanf_float+0x80>
 800806c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008070:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008074:	463a      	mov	r2, r7
 8008076:	4640      	mov	r0, r8
 8008078:	4798      	blx	r3
 800807a:	6923      	ldr	r3, [r4, #16]
 800807c:	3b01      	subs	r3, #1
 800807e:	6123      	str	r3, [r4, #16]
 8008080:	e7f1      	b.n	8008066 <_scanf_float+0x2aa>
 8008082:	9802      	ldr	r0, [sp, #8]
 8008084:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008088:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800808c:	9002      	str	r0, [sp, #8]
 800808e:	463a      	mov	r2, r7
 8008090:	4640      	mov	r0, r8
 8008092:	4798      	blx	r3
 8008094:	6923      	ldr	r3, [r4, #16]
 8008096:	3b01      	subs	r3, #1
 8008098:	6123      	str	r3, [r4, #16]
 800809a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800809e:	fa5f fa8a 	uxtb.w	sl, sl
 80080a2:	f1ba 0f02 	cmp.w	sl, #2
 80080a6:	d1ec      	bne.n	8008082 <_scanf_float+0x2c6>
 80080a8:	3d03      	subs	r5, #3
 80080aa:	b2ed      	uxtb	r5, r5
 80080ac:	1b76      	subs	r6, r6, r5
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	05da      	lsls	r2, r3, #23
 80080b2:	d52f      	bpl.n	8008114 <_scanf_float+0x358>
 80080b4:	055b      	lsls	r3, r3, #21
 80080b6:	d510      	bpl.n	80080da <_scanf_float+0x31e>
 80080b8:	455e      	cmp	r6, fp
 80080ba:	f67f aebf 	bls.w	8007e3c <_scanf_float+0x80>
 80080be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080c6:	463a      	mov	r2, r7
 80080c8:	4640      	mov	r0, r8
 80080ca:	4798      	blx	r3
 80080cc:	6923      	ldr	r3, [r4, #16]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	6123      	str	r3, [r4, #16]
 80080d2:	e7f1      	b.n	80080b8 <_scanf_float+0x2fc>
 80080d4:	46aa      	mov	sl, r5
 80080d6:	9602      	str	r6, [sp, #8]
 80080d8:	e7df      	b.n	800809a <_scanf_float+0x2de>
 80080da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80080de:	6923      	ldr	r3, [r4, #16]
 80080e0:	2965      	cmp	r1, #101	; 0x65
 80080e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80080e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80080ea:	6123      	str	r3, [r4, #16]
 80080ec:	d00c      	beq.n	8008108 <_scanf_float+0x34c>
 80080ee:	2945      	cmp	r1, #69	; 0x45
 80080f0:	d00a      	beq.n	8008108 <_scanf_float+0x34c>
 80080f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080f6:	463a      	mov	r2, r7
 80080f8:	4640      	mov	r0, r8
 80080fa:	4798      	blx	r3
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008102:	3b01      	subs	r3, #1
 8008104:	1eb5      	subs	r5, r6, #2
 8008106:	6123      	str	r3, [r4, #16]
 8008108:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800810c:	463a      	mov	r2, r7
 800810e:	4640      	mov	r0, r8
 8008110:	4798      	blx	r3
 8008112:	462e      	mov	r6, r5
 8008114:	6825      	ldr	r5, [r4, #0]
 8008116:	f015 0510 	ands.w	r5, r5, #16
 800811a:	d158      	bne.n	80081ce <_scanf_float+0x412>
 800811c:	7035      	strb	r5, [r6, #0]
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008128:	d11c      	bne.n	8008164 <_scanf_float+0x3a8>
 800812a:	9b01      	ldr	r3, [sp, #4]
 800812c:	454b      	cmp	r3, r9
 800812e:	eba3 0209 	sub.w	r2, r3, r9
 8008132:	d124      	bne.n	800817e <_scanf_float+0x3c2>
 8008134:	2200      	movs	r2, #0
 8008136:	4659      	mov	r1, fp
 8008138:	4640      	mov	r0, r8
 800813a:	f000 feb3 	bl	8008ea4 <_strtod_r>
 800813e:	9b03      	ldr	r3, [sp, #12]
 8008140:	6821      	ldr	r1, [r4, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f011 0f02 	tst.w	r1, #2
 8008148:	ec57 6b10 	vmov	r6, r7, d0
 800814c:	f103 0204 	add.w	r2, r3, #4
 8008150:	d020      	beq.n	8008194 <_scanf_float+0x3d8>
 8008152:	9903      	ldr	r1, [sp, #12]
 8008154:	600a      	str	r2, [r1, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	e9c3 6700 	strd	r6, r7, [r3]
 800815c:	68e3      	ldr	r3, [r4, #12]
 800815e:	3301      	adds	r3, #1
 8008160:	60e3      	str	r3, [r4, #12]
 8008162:	e66c      	b.n	8007e3e <_scanf_float+0x82>
 8008164:	9b04      	ldr	r3, [sp, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0e4      	beq.n	8008134 <_scanf_float+0x378>
 800816a:	9905      	ldr	r1, [sp, #20]
 800816c:	230a      	movs	r3, #10
 800816e:	462a      	mov	r2, r5
 8008170:	3101      	adds	r1, #1
 8008172:	4640      	mov	r0, r8
 8008174:	f000 ff20 	bl	8008fb8 <_strtol_r>
 8008178:	9b04      	ldr	r3, [sp, #16]
 800817a:	9e05      	ldr	r6, [sp, #20]
 800817c:	1ac2      	subs	r2, r0, r3
 800817e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008182:	429e      	cmp	r6, r3
 8008184:	bf28      	it	cs
 8008186:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800818a:	4912      	ldr	r1, [pc, #72]	; (80081d4 <_scanf_float+0x418>)
 800818c:	4630      	mov	r0, r6
 800818e:	f000 f843 	bl	8008218 <siprintf>
 8008192:	e7cf      	b.n	8008134 <_scanf_float+0x378>
 8008194:	f011 0f04 	tst.w	r1, #4
 8008198:	9903      	ldr	r1, [sp, #12]
 800819a:	600a      	str	r2, [r1, #0]
 800819c:	d1db      	bne.n	8008156 <_scanf_float+0x39a>
 800819e:	f8d3 8000 	ldr.w	r8, [r3]
 80081a2:	ee10 2a10 	vmov	r2, s0
 80081a6:	ee10 0a10 	vmov	r0, s0
 80081aa:	463b      	mov	r3, r7
 80081ac:	4639      	mov	r1, r7
 80081ae:	f7f8 fcbd 	bl	8000b2c <__aeabi_dcmpun>
 80081b2:	b128      	cbz	r0, 80081c0 <_scanf_float+0x404>
 80081b4:	4808      	ldr	r0, [pc, #32]	; (80081d8 <_scanf_float+0x41c>)
 80081b6:	f000 f829 	bl	800820c <nanf>
 80081ba:	ed88 0a00 	vstr	s0, [r8]
 80081be:	e7cd      	b.n	800815c <_scanf_float+0x3a0>
 80081c0:	4630      	mov	r0, r6
 80081c2:	4639      	mov	r1, r7
 80081c4:	f7f8 fd10 	bl	8000be8 <__aeabi_d2f>
 80081c8:	f8c8 0000 	str.w	r0, [r8]
 80081cc:	e7c6      	b.n	800815c <_scanf_float+0x3a0>
 80081ce:	2500      	movs	r5, #0
 80081d0:	e635      	b.n	8007e3e <_scanf_float+0x82>
 80081d2:	bf00      	nop
 80081d4:	0801ee48 	.word	0x0801ee48
 80081d8:	0801f2c0 	.word	0x0801f2c0

080081dc <iprintf>:
 80081dc:	b40f      	push	{r0, r1, r2, r3}
 80081de:	4b0a      	ldr	r3, [pc, #40]	; (8008208 <iprintf+0x2c>)
 80081e0:	b513      	push	{r0, r1, r4, lr}
 80081e2:	681c      	ldr	r4, [r3, #0]
 80081e4:	b124      	cbz	r4, 80081f0 <iprintf+0x14>
 80081e6:	69a3      	ldr	r3, [r4, #24]
 80081e8:	b913      	cbnz	r3, 80081f0 <iprintf+0x14>
 80081ea:	4620      	mov	r0, r4
 80081ec:	f001 fdb8 	bl	8009d60 <__sinit>
 80081f0:	ab05      	add	r3, sp, #20
 80081f2:	9a04      	ldr	r2, [sp, #16]
 80081f4:	68a1      	ldr	r1, [r4, #8]
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	4620      	mov	r0, r4
 80081fa:	f003 f8e7 	bl	800b3cc <_vfiprintf_r>
 80081fe:	b002      	add	sp, #8
 8008200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008204:	b004      	add	sp, #16
 8008206:	4770      	bx	lr
 8008208:	2000000c 	.word	0x2000000c

0800820c <nanf>:
 800820c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008214 <nanf+0x8>
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	7fc00000 	.word	0x7fc00000

08008218 <siprintf>:
 8008218:	b40e      	push	{r1, r2, r3}
 800821a:	b500      	push	{lr}
 800821c:	b09c      	sub	sp, #112	; 0x70
 800821e:	ab1d      	add	r3, sp, #116	; 0x74
 8008220:	9002      	str	r0, [sp, #8]
 8008222:	9006      	str	r0, [sp, #24]
 8008224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008228:	4809      	ldr	r0, [pc, #36]	; (8008250 <siprintf+0x38>)
 800822a:	9107      	str	r1, [sp, #28]
 800822c:	9104      	str	r1, [sp, #16]
 800822e:	4909      	ldr	r1, [pc, #36]	; (8008254 <siprintf+0x3c>)
 8008230:	f853 2b04 	ldr.w	r2, [r3], #4
 8008234:	9105      	str	r1, [sp, #20]
 8008236:	6800      	ldr	r0, [r0, #0]
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	a902      	add	r1, sp, #8
 800823c:	f002 ff9c 	bl	800b178 <_svfiprintf_r>
 8008240:	9b02      	ldr	r3, [sp, #8]
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
 8008246:	b01c      	add	sp, #112	; 0x70
 8008248:	f85d eb04 	ldr.w	lr, [sp], #4
 800824c:	b003      	add	sp, #12
 800824e:	4770      	bx	lr
 8008250:	2000000c 	.word	0x2000000c
 8008254:	ffff0208 	.word	0xffff0208

08008258 <sulp>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	4604      	mov	r4, r0
 800825c:	460d      	mov	r5, r1
 800825e:	ec45 4b10 	vmov	d0, r4, r5
 8008262:	4616      	mov	r6, r2
 8008264:	f002 fd24 	bl	800acb0 <__ulp>
 8008268:	ec51 0b10 	vmov	r0, r1, d0
 800826c:	b17e      	cbz	r6, 800828e <sulp+0x36>
 800826e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008272:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008276:	2b00      	cmp	r3, #0
 8008278:	dd09      	ble.n	800828e <sulp+0x36>
 800827a:	051b      	lsls	r3, r3, #20
 800827c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008280:	2400      	movs	r4, #0
 8008282:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008286:	4622      	mov	r2, r4
 8008288:	462b      	mov	r3, r5
 800828a:	f7f8 f9b5 	bl	80005f8 <__aeabi_dmul>
 800828e:	bd70      	pop	{r4, r5, r6, pc}

08008290 <_strtod_l>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	b0a3      	sub	sp, #140	; 0x8c
 8008296:	461f      	mov	r7, r3
 8008298:	2300      	movs	r3, #0
 800829a:	931e      	str	r3, [sp, #120]	; 0x78
 800829c:	4ba4      	ldr	r3, [pc, #656]	; (8008530 <_strtod_l+0x2a0>)
 800829e:	9219      	str	r2, [sp, #100]	; 0x64
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	9307      	str	r3, [sp, #28]
 80082a4:	4604      	mov	r4, r0
 80082a6:	4618      	mov	r0, r3
 80082a8:	4688      	mov	r8, r1
 80082aa:	f7f7 ff91 	bl	80001d0 <strlen>
 80082ae:	f04f 0a00 	mov.w	sl, #0
 80082b2:	4605      	mov	r5, r0
 80082b4:	f04f 0b00 	mov.w	fp, #0
 80082b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80082bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082be:	781a      	ldrb	r2, [r3, #0]
 80082c0:	2a2b      	cmp	r2, #43	; 0x2b
 80082c2:	d04c      	beq.n	800835e <_strtod_l+0xce>
 80082c4:	d839      	bhi.n	800833a <_strtod_l+0xaa>
 80082c6:	2a0d      	cmp	r2, #13
 80082c8:	d832      	bhi.n	8008330 <_strtod_l+0xa0>
 80082ca:	2a08      	cmp	r2, #8
 80082cc:	d832      	bhi.n	8008334 <_strtod_l+0xa4>
 80082ce:	2a00      	cmp	r2, #0
 80082d0:	d03c      	beq.n	800834c <_strtod_l+0xbc>
 80082d2:	2300      	movs	r3, #0
 80082d4:	930e      	str	r3, [sp, #56]	; 0x38
 80082d6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80082d8:	7833      	ldrb	r3, [r6, #0]
 80082da:	2b30      	cmp	r3, #48	; 0x30
 80082dc:	f040 80b4 	bne.w	8008448 <_strtod_l+0x1b8>
 80082e0:	7873      	ldrb	r3, [r6, #1]
 80082e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80082e6:	2b58      	cmp	r3, #88	; 0x58
 80082e8:	d16c      	bne.n	80083c4 <_strtod_l+0x134>
 80082ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	ab1e      	add	r3, sp, #120	; 0x78
 80082f0:	9702      	str	r7, [sp, #8]
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	4a8f      	ldr	r2, [pc, #572]	; (8008534 <_strtod_l+0x2a4>)
 80082f6:	ab1f      	add	r3, sp, #124	; 0x7c
 80082f8:	a91d      	add	r1, sp, #116	; 0x74
 80082fa:	4620      	mov	r0, r4
 80082fc:	f001 fe34 	bl	8009f68 <__gethex>
 8008300:	f010 0707 	ands.w	r7, r0, #7
 8008304:	4605      	mov	r5, r0
 8008306:	d005      	beq.n	8008314 <_strtod_l+0x84>
 8008308:	2f06      	cmp	r7, #6
 800830a:	d12a      	bne.n	8008362 <_strtod_l+0xd2>
 800830c:	3601      	adds	r6, #1
 800830e:	2300      	movs	r3, #0
 8008310:	961d      	str	r6, [sp, #116]	; 0x74
 8008312:	930e      	str	r3, [sp, #56]	; 0x38
 8008314:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008316:	2b00      	cmp	r3, #0
 8008318:	f040 8596 	bne.w	8008e48 <_strtod_l+0xbb8>
 800831c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800831e:	b1db      	cbz	r3, 8008358 <_strtod_l+0xc8>
 8008320:	4652      	mov	r2, sl
 8008322:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008326:	ec43 2b10 	vmov	d0, r2, r3
 800832a:	b023      	add	sp, #140	; 0x8c
 800832c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008330:	2a20      	cmp	r2, #32
 8008332:	d1ce      	bne.n	80082d2 <_strtod_l+0x42>
 8008334:	3301      	adds	r3, #1
 8008336:	931d      	str	r3, [sp, #116]	; 0x74
 8008338:	e7c0      	b.n	80082bc <_strtod_l+0x2c>
 800833a:	2a2d      	cmp	r2, #45	; 0x2d
 800833c:	d1c9      	bne.n	80082d2 <_strtod_l+0x42>
 800833e:	2201      	movs	r2, #1
 8008340:	920e      	str	r2, [sp, #56]	; 0x38
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	921d      	str	r2, [sp, #116]	; 0x74
 8008346:	785b      	ldrb	r3, [r3, #1]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1c4      	bne.n	80082d6 <_strtod_l+0x46>
 800834c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800834e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008352:	2b00      	cmp	r3, #0
 8008354:	f040 8576 	bne.w	8008e44 <_strtod_l+0xbb4>
 8008358:	4652      	mov	r2, sl
 800835a:	465b      	mov	r3, fp
 800835c:	e7e3      	b.n	8008326 <_strtod_l+0x96>
 800835e:	2200      	movs	r2, #0
 8008360:	e7ee      	b.n	8008340 <_strtod_l+0xb0>
 8008362:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008364:	b13a      	cbz	r2, 8008376 <_strtod_l+0xe6>
 8008366:	2135      	movs	r1, #53	; 0x35
 8008368:	a820      	add	r0, sp, #128	; 0x80
 800836a:	f002 fdac 	bl	800aec6 <__copybits>
 800836e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008370:	4620      	mov	r0, r4
 8008372:	f002 f971 	bl	800a658 <_Bfree>
 8008376:	3f01      	subs	r7, #1
 8008378:	2f05      	cmp	r7, #5
 800837a:	d807      	bhi.n	800838c <_strtod_l+0xfc>
 800837c:	e8df f007 	tbb	[pc, r7]
 8008380:	1d180b0e 	.word	0x1d180b0e
 8008384:	030e      	.short	0x030e
 8008386:	f04f 0b00 	mov.w	fp, #0
 800838a:	46da      	mov	sl, fp
 800838c:	0728      	lsls	r0, r5, #28
 800838e:	d5c1      	bpl.n	8008314 <_strtod_l+0x84>
 8008390:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008394:	e7be      	b.n	8008314 <_strtod_l+0x84>
 8008396:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800839a:	e7f7      	b.n	800838c <_strtod_l+0xfc>
 800839c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80083a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80083a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80083a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80083aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80083ae:	e7ed      	b.n	800838c <_strtod_l+0xfc>
 80083b0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008538 <_strtod_l+0x2a8>
 80083b4:	f04f 0a00 	mov.w	sl, #0
 80083b8:	e7e8      	b.n	800838c <_strtod_l+0xfc>
 80083ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80083be:	f04f 3aff 	mov.w	sl, #4294967295
 80083c2:	e7e3      	b.n	800838c <_strtod_l+0xfc>
 80083c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	921d      	str	r2, [sp, #116]	; 0x74
 80083ca:	785b      	ldrb	r3, [r3, #1]
 80083cc:	2b30      	cmp	r3, #48	; 0x30
 80083ce:	d0f9      	beq.n	80083c4 <_strtod_l+0x134>
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d09f      	beq.n	8008314 <_strtod_l+0x84>
 80083d4:	2301      	movs	r3, #1
 80083d6:	f04f 0900 	mov.w	r9, #0
 80083da:	9304      	str	r3, [sp, #16]
 80083dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083de:	930a      	str	r3, [sp, #40]	; 0x28
 80083e0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80083e4:	464f      	mov	r7, r9
 80083e6:	220a      	movs	r2, #10
 80083e8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80083ea:	7806      	ldrb	r6, [r0, #0]
 80083ec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80083f0:	b2d9      	uxtb	r1, r3
 80083f2:	2909      	cmp	r1, #9
 80083f4:	d92a      	bls.n	800844c <_strtod_l+0x1bc>
 80083f6:	9907      	ldr	r1, [sp, #28]
 80083f8:	462a      	mov	r2, r5
 80083fa:	f003 f974 	bl	800b6e6 <strncmp>
 80083fe:	b398      	cbz	r0, 8008468 <_strtod_l+0x1d8>
 8008400:	2000      	movs	r0, #0
 8008402:	4633      	mov	r3, r6
 8008404:	463d      	mov	r5, r7
 8008406:	9007      	str	r0, [sp, #28]
 8008408:	4602      	mov	r2, r0
 800840a:	2b65      	cmp	r3, #101	; 0x65
 800840c:	d001      	beq.n	8008412 <_strtod_l+0x182>
 800840e:	2b45      	cmp	r3, #69	; 0x45
 8008410:	d118      	bne.n	8008444 <_strtod_l+0x1b4>
 8008412:	b91d      	cbnz	r5, 800841c <_strtod_l+0x18c>
 8008414:	9b04      	ldr	r3, [sp, #16]
 8008416:	4303      	orrs	r3, r0
 8008418:	d098      	beq.n	800834c <_strtod_l+0xbc>
 800841a:	2500      	movs	r5, #0
 800841c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008420:	f108 0301 	add.w	r3, r8, #1
 8008424:	931d      	str	r3, [sp, #116]	; 0x74
 8008426:	f898 3001 	ldrb.w	r3, [r8, #1]
 800842a:	2b2b      	cmp	r3, #43	; 0x2b
 800842c:	d075      	beq.n	800851a <_strtod_l+0x28a>
 800842e:	2b2d      	cmp	r3, #45	; 0x2d
 8008430:	d07b      	beq.n	800852a <_strtod_l+0x29a>
 8008432:	f04f 0c00 	mov.w	ip, #0
 8008436:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800843a:	2909      	cmp	r1, #9
 800843c:	f240 8082 	bls.w	8008544 <_strtod_l+0x2b4>
 8008440:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008444:	2600      	movs	r6, #0
 8008446:	e09d      	b.n	8008584 <_strtod_l+0x2f4>
 8008448:	2300      	movs	r3, #0
 800844a:	e7c4      	b.n	80083d6 <_strtod_l+0x146>
 800844c:	2f08      	cmp	r7, #8
 800844e:	bfd8      	it	le
 8008450:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008452:	f100 0001 	add.w	r0, r0, #1
 8008456:	bfda      	itte	le
 8008458:	fb02 3301 	mlale	r3, r2, r1, r3
 800845c:	9309      	strle	r3, [sp, #36]	; 0x24
 800845e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008462:	3701      	adds	r7, #1
 8008464:	901d      	str	r0, [sp, #116]	; 0x74
 8008466:	e7bf      	b.n	80083e8 <_strtod_l+0x158>
 8008468:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800846a:	195a      	adds	r2, r3, r5
 800846c:	921d      	str	r2, [sp, #116]	; 0x74
 800846e:	5d5b      	ldrb	r3, [r3, r5]
 8008470:	2f00      	cmp	r7, #0
 8008472:	d037      	beq.n	80084e4 <_strtod_l+0x254>
 8008474:	9007      	str	r0, [sp, #28]
 8008476:	463d      	mov	r5, r7
 8008478:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800847c:	2a09      	cmp	r2, #9
 800847e:	d912      	bls.n	80084a6 <_strtod_l+0x216>
 8008480:	2201      	movs	r2, #1
 8008482:	e7c2      	b.n	800840a <_strtod_l+0x17a>
 8008484:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	921d      	str	r2, [sp, #116]	; 0x74
 800848a:	785b      	ldrb	r3, [r3, #1]
 800848c:	3001      	adds	r0, #1
 800848e:	2b30      	cmp	r3, #48	; 0x30
 8008490:	d0f8      	beq.n	8008484 <_strtod_l+0x1f4>
 8008492:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008496:	2a08      	cmp	r2, #8
 8008498:	f200 84db 	bhi.w	8008e52 <_strtod_l+0xbc2>
 800849c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800849e:	9007      	str	r0, [sp, #28]
 80084a0:	2000      	movs	r0, #0
 80084a2:	920a      	str	r2, [sp, #40]	; 0x28
 80084a4:	4605      	mov	r5, r0
 80084a6:	3b30      	subs	r3, #48	; 0x30
 80084a8:	f100 0201 	add.w	r2, r0, #1
 80084ac:	d014      	beq.n	80084d8 <_strtod_l+0x248>
 80084ae:	9907      	ldr	r1, [sp, #28]
 80084b0:	4411      	add	r1, r2
 80084b2:	9107      	str	r1, [sp, #28]
 80084b4:	462a      	mov	r2, r5
 80084b6:	eb00 0e05 	add.w	lr, r0, r5
 80084ba:	210a      	movs	r1, #10
 80084bc:	4572      	cmp	r2, lr
 80084be:	d113      	bne.n	80084e8 <_strtod_l+0x258>
 80084c0:	182a      	adds	r2, r5, r0
 80084c2:	2a08      	cmp	r2, #8
 80084c4:	f105 0501 	add.w	r5, r5, #1
 80084c8:	4405      	add	r5, r0
 80084ca:	dc1c      	bgt.n	8008506 <_strtod_l+0x276>
 80084cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084ce:	220a      	movs	r2, #10
 80084d0:	fb02 3301 	mla	r3, r2, r1, r3
 80084d4:	9309      	str	r3, [sp, #36]	; 0x24
 80084d6:	2200      	movs	r2, #0
 80084d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084da:	1c59      	adds	r1, r3, #1
 80084dc:	911d      	str	r1, [sp, #116]	; 0x74
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	4610      	mov	r0, r2
 80084e2:	e7c9      	b.n	8008478 <_strtod_l+0x1e8>
 80084e4:	4638      	mov	r0, r7
 80084e6:	e7d2      	b.n	800848e <_strtod_l+0x1fe>
 80084e8:	2a08      	cmp	r2, #8
 80084ea:	dc04      	bgt.n	80084f6 <_strtod_l+0x266>
 80084ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084ee:	434e      	muls	r6, r1
 80084f0:	9609      	str	r6, [sp, #36]	; 0x24
 80084f2:	3201      	adds	r2, #1
 80084f4:	e7e2      	b.n	80084bc <_strtod_l+0x22c>
 80084f6:	f102 0c01 	add.w	ip, r2, #1
 80084fa:	f1bc 0f10 	cmp.w	ip, #16
 80084fe:	bfd8      	it	le
 8008500:	fb01 f909 	mulle.w	r9, r1, r9
 8008504:	e7f5      	b.n	80084f2 <_strtod_l+0x262>
 8008506:	2d10      	cmp	r5, #16
 8008508:	bfdc      	itt	le
 800850a:	220a      	movle	r2, #10
 800850c:	fb02 3909 	mlale	r9, r2, r9, r3
 8008510:	e7e1      	b.n	80084d6 <_strtod_l+0x246>
 8008512:	2300      	movs	r3, #0
 8008514:	9307      	str	r3, [sp, #28]
 8008516:	2201      	movs	r2, #1
 8008518:	e77c      	b.n	8008414 <_strtod_l+0x184>
 800851a:	f04f 0c00 	mov.w	ip, #0
 800851e:	f108 0302 	add.w	r3, r8, #2
 8008522:	931d      	str	r3, [sp, #116]	; 0x74
 8008524:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008528:	e785      	b.n	8008436 <_strtod_l+0x1a6>
 800852a:	f04f 0c01 	mov.w	ip, #1
 800852e:	e7f6      	b.n	800851e <_strtod_l+0x28e>
 8008530:	0801f104 	.word	0x0801f104
 8008534:	0801ee50 	.word	0x0801ee50
 8008538:	7ff00000 	.word	0x7ff00000
 800853c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800853e:	1c59      	adds	r1, r3, #1
 8008540:	911d      	str	r1, [sp, #116]	; 0x74
 8008542:	785b      	ldrb	r3, [r3, #1]
 8008544:	2b30      	cmp	r3, #48	; 0x30
 8008546:	d0f9      	beq.n	800853c <_strtod_l+0x2ac>
 8008548:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800854c:	2908      	cmp	r1, #8
 800854e:	f63f af79 	bhi.w	8008444 <_strtod_l+0x1b4>
 8008552:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008556:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008558:	9308      	str	r3, [sp, #32]
 800855a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800855c:	1c59      	adds	r1, r3, #1
 800855e:	911d      	str	r1, [sp, #116]	; 0x74
 8008560:	785b      	ldrb	r3, [r3, #1]
 8008562:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008566:	2e09      	cmp	r6, #9
 8008568:	d937      	bls.n	80085da <_strtod_l+0x34a>
 800856a:	9e08      	ldr	r6, [sp, #32]
 800856c:	1b89      	subs	r1, r1, r6
 800856e:	2908      	cmp	r1, #8
 8008570:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008574:	dc02      	bgt.n	800857c <_strtod_l+0x2ec>
 8008576:	4576      	cmp	r6, lr
 8008578:	bfa8      	it	ge
 800857a:	4676      	movge	r6, lr
 800857c:	f1bc 0f00 	cmp.w	ip, #0
 8008580:	d000      	beq.n	8008584 <_strtod_l+0x2f4>
 8008582:	4276      	negs	r6, r6
 8008584:	2d00      	cmp	r5, #0
 8008586:	d14f      	bne.n	8008628 <_strtod_l+0x398>
 8008588:	9904      	ldr	r1, [sp, #16]
 800858a:	4301      	orrs	r1, r0
 800858c:	f47f aec2 	bne.w	8008314 <_strtod_l+0x84>
 8008590:	2a00      	cmp	r2, #0
 8008592:	f47f aedb 	bne.w	800834c <_strtod_l+0xbc>
 8008596:	2b69      	cmp	r3, #105	; 0x69
 8008598:	d027      	beq.n	80085ea <_strtod_l+0x35a>
 800859a:	dc24      	bgt.n	80085e6 <_strtod_l+0x356>
 800859c:	2b49      	cmp	r3, #73	; 0x49
 800859e:	d024      	beq.n	80085ea <_strtod_l+0x35a>
 80085a0:	2b4e      	cmp	r3, #78	; 0x4e
 80085a2:	f47f aed3 	bne.w	800834c <_strtod_l+0xbc>
 80085a6:	499e      	ldr	r1, [pc, #632]	; (8008820 <_strtod_l+0x590>)
 80085a8:	a81d      	add	r0, sp, #116	; 0x74
 80085aa:	f001 ff35 	bl	800a418 <__match>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	f43f aecc 	beq.w	800834c <_strtod_l+0xbc>
 80085b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	2b28      	cmp	r3, #40	; 0x28
 80085ba:	d12d      	bne.n	8008618 <_strtod_l+0x388>
 80085bc:	4999      	ldr	r1, [pc, #612]	; (8008824 <_strtod_l+0x594>)
 80085be:	aa20      	add	r2, sp, #128	; 0x80
 80085c0:	a81d      	add	r0, sp, #116	; 0x74
 80085c2:	f001 ff3d 	bl	800a440 <__hexnan>
 80085c6:	2805      	cmp	r0, #5
 80085c8:	d126      	bne.n	8008618 <_strtod_l+0x388>
 80085ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085cc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80085d0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80085d4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80085d8:	e69c      	b.n	8008314 <_strtod_l+0x84>
 80085da:	210a      	movs	r1, #10
 80085dc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80085e0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80085e4:	e7b9      	b.n	800855a <_strtod_l+0x2ca>
 80085e6:	2b6e      	cmp	r3, #110	; 0x6e
 80085e8:	e7db      	b.n	80085a2 <_strtod_l+0x312>
 80085ea:	498f      	ldr	r1, [pc, #572]	; (8008828 <_strtod_l+0x598>)
 80085ec:	a81d      	add	r0, sp, #116	; 0x74
 80085ee:	f001 ff13 	bl	800a418 <__match>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	f43f aeaa 	beq.w	800834c <_strtod_l+0xbc>
 80085f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80085fa:	498c      	ldr	r1, [pc, #560]	; (800882c <_strtod_l+0x59c>)
 80085fc:	3b01      	subs	r3, #1
 80085fe:	a81d      	add	r0, sp, #116	; 0x74
 8008600:	931d      	str	r3, [sp, #116]	; 0x74
 8008602:	f001 ff09 	bl	800a418 <__match>
 8008606:	b910      	cbnz	r0, 800860e <_strtod_l+0x37e>
 8008608:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800860a:	3301      	adds	r3, #1
 800860c:	931d      	str	r3, [sp, #116]	; 0x74
 800860e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800883c <_strtod_l+0x5ac>
 8008612:	f04f 0a00 	mov.w	sl, #0
 8008616:	e67d      	b.n	8008314 <_strtod_l+0x84>
 8008618:	4885      	ldr	r0, [pc, #532]	; (8008830 <_strtod_l+0x5a0>)
 800861a:	f003 f809 	bl	800b630 <nan>
 800861e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008622:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008626:	e675      	b.n	8008314 <_strtod_l+0x84>
 8008628:	9b07      	ldr	r3, [sp, #28]
 800862a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800862c:	1af3      	subs	r3, r6, r3
 800862e:	2f00      	cmp	r7, #0
 8008630:	bf08      	it	eq
 8008632:	462f      	moveq	r7, r5
 8008634:	2d10      	cmp	r5, #16
 8008636:	9308      	str	r3, [sp, #32]
 8008638:	46a8      	mov	r8, r5
 800863a:	bfa8      	it	ge
 800863c:	f04f 0810 	movge.w	r8, #16
 8008640:	f7f7 ff60 	bl	8000504 <__aeabi_ui2d>
 8008644:	2d09      	cmp	r5, #9
 8008646:	4682      	mov	sl, r0
 8008648:	468b      	mov	fp, r1
 800864a:	dd13      	ble.n	8008674 <_strtod_l+0x3e4>
 800864c:	4b79      	ldr	r3, [pc, #484]	; (8008834 <_strtod_l+0x5a4>)
 800864e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008652:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008656:	f7f7 ffcf 	bl	80005f8 <__aeabi_dmul>
 800865a:	4682      	mov	sl, r0
 800865c:	4648      	mov	r0, r9
 800865e:	468b      	mov	fp, r1
 8008660:	f7f7 ff50 	bl	8000504 <__aeabi_ui2d>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4650      	mov	r0, sl
 800866a:	4659      	mov	r1, fp
 800866c:	f7f7 fe0e 	bl	800028c <__adddf3>
 8008670:	4682      	mov	sl, r0
 8008672:	468b      	mov	fp, r1
 8008674:	2d0f      	cmp	r5, #15
 8008676:	dc38      	bgt.n	80086ea <_strtod_l+0x45a>
 8008678:	9b08      	ldr	r3, [sp, #32]
 800867a:	2b00      	cmp	r3, #0
 800867c:	f43f ae4a 	beq.w	8008314 <_strtod_l+0x84>
 8008680:	dd24      	ble.n	80086cc <_strtod_l+0x43c>
 8008682:	2b16      	cmp	r3, #22
 8008684:	dc0b      	bgt.n	800869e <_strtod_l+0x40e>
 8008686:	4d6b      	ldr	r5, [pc, #428]	; (8008834 <_strtod_l+0x5a4>)
 8008688:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800868c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008690:	4652      	mov	r2, sl
 8008692:	465b      	mov	r3, fp
 8008694:	f7f7 ffb0 	bl	80005f8 <__aeabi_dmul>
 8008698:	4682      	mov	sl, r0
 800869a:	468b      	mov	fp, r1
 800869c:	e63a      	b.n	8008314 <_strtod_l+0x84>
 800869e:	9a08      	ldr	r2, [sp, #32]
 80086a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80086a4:	4293      	cmp	r3, r2
 80086a6:	db20      	blt.n	80086ea <_strtod_l+0x45a>
 80086a8:	4c62      	ldr	r4, [pc, #392]	; (8008834 <_strtod_l+0x5a4>)
 80086aa:	f1c5 050f 	rsb	r5, r5, #15
 80086ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80086b2:	4652      	mov	r2, sl
 80086b4:	465b      	mov	r3, fp
 80086b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086ba:	f7f7 ff9d 	bl	80005f8 <__aeabi_dmul>
 80086be:	9b08      	ldr	r3, [sp, #32]
 80086c0:	1b5d      	subs	r5, r3, r5
 80086c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80086c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80086ca:	e7e3      	b.n	8008694 <_strtod_l+0x404>
 80086cc:	9b08      	ldr	r3, [sp, #32]
 80086ce:	3316      	adds	r3, #22
 80086d0:	db0b      	blt.n	80086ea <_strtod_l+0x45a>
 80086d2:	9b07      	ldr	r3, [sp, #28]
 80086d4:	4a57      	ldr	r2, [pc, #348]	; (8008834 <_strtod_l+0x5a4>)
 80086d6:	1b9e      	subs	r6, r3, r6
 80086d8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80086dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086e0:	4650      	mov	r0, sl
 80086e2:	4659      	mov	r1, fp
 80086e4:	f7f8 f8b2 	bl	800084c <__aeabi_ddiv>
 80086e8:	e7d6      	b.n	8008698 <_strtod_l+0x408>
 80086ea:	9b08      	ldr	r3, [sp, #32]
 80086ec:	eba5 0808 	sub.w	r8, r5, r8
 80086f0:	4498      	add	r8, r3
 80086f2:	f1b8 0f00 	cmp.w	r8, #0
 80086f6:	dd71      	ble.n	80087dc <_strtod_l+0x54c>
 80086f8:	f018 030f 	ands.w	r3, r8, #15
 80086fc:	d00a      	beq.n	8008714 <_strtod_l+0x484>
 80086fe:	494d      	ldr	r1, [pc, #308]	; (8008834 <_strtod_l+0x5a4>)
 8008700:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008704:	4652      	mov	r2, sl
 8008706:	465b      	mov	r3, fp
 8008708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800870c:	f7f7 ff74 	bl	80005f8 <__aeabi_dmul>
 8008710:	4682      	mov	sl, r0
 8008712:	468b      	mov	fp, r1
 8008714:	f038 080f 	bics.w	r8, r8, #15
 8008718:	d04d      	beq.n	80087b6 <_strtod_l+0x526>
 800871a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800871e:	dd22      	ble.n	8008766 <_strtod_l+0x4d6>
 8008720:	2500      	movs	r5, #0
 8008722:	462e      	mov	r6, r5
 8008724:	9509      	str	r5, [sp, #36]	; 0x24
 8008726:	9507      	str	r5, [sp, #28]
 8008728:	2322      	movs	r3, #34	; 0x22
 800872a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800883c <_strtod_l+0x5ac>
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	f04f 0a00 	mov.w	sl, #0
 8008734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008736:	2b00      	cmp	r3, #0
 8008738:	f43f adec 	beq.w	8008314 <_strtod_l+0x84>
 800873c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800873e:	4620      	mov	r0, r4
 8008740:	f001 ff8a 	bl	800a658 <_Bfree>
 8008744:	9907      	ldr	r1, [sp, #28]
 8008746:	4620      	mov	r0, r4
 8008748:	f001 ff86 	bl	800a658 <_Bfree>
 800874c:	4631      	mov	r1, r6
 800874e:	4620      	mov	r0, r4
 8008750:	f001 ff82 	bl	800a658 <_Bfree>
 8008754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008756:	4620      	mov	r0, r4
 8008758:	f001 ff7e 	bl	800a658 <_Bfree>
 800875c:	4629      	mov	r1, r5
 800875e:	4620      	mov	r0, r4
 8008760:	f001 ff7a 	bl	800a658 <_Bfree>
 8008764:	e5d6      	b.n	8008314 <_strtod_l+0x84>
 8008766:	2300      	movs	r3, #0
 8008768:	ea4f 1828 	mov.w	r8, r8, asr #4
 800876c:	4650      	mov	r0, sl
 800876e:	4659      	mov	r1, fp
 8008770:	4699      	mov	r9, r3
 8008772:	f1b8 0f01 	cmp.w	r8, #1
 8008776:	dc21      	bgt.n	80087bc <_strtod_l+0x52c>
 8008778:	b10b      	cbz	r3, 800877e <_strtod_l+0x4ee>
 800877a:	4682      	mov	sl, r0
 800877c:	468b      	mov	fp, r1
 800877e:	4b2e      	ldr	r3, [pc, #184]	; (8008838 <_strtod_l+0x5a8>)
 8008780:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008784:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008788:	4652      	mov	r2, sl
 800878a:	465b      	mov	r3, fp
 800878c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008790:	f7f7 ff32 	bl	80005f8 <__aeabi_dmul>
 8008794:	4b29      	ldr	r3, [pc, #164]	; (800883c <_strtod_l+0x5ac>)
 8008796:	460a      	mov	r2, r1
 8008798:	400b      	ands	r3, r1
 800879a:	4929      	ldr	r1, [pc, #164]	; (8008840 <_strtod_l+0x5b0>)
 800879c:	428b      	cmp	r3, r1
 800879e:	4682      	mov	sl, r0
 80087a0:	d8be      	bhi.n	8008720 <_strtod_l+0x490>
 80087a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80087a6:	428b      	cmp	r3, r1
 80087a8:	bf86      	itte	hi
 80087aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008844 <_strtod_l+0x5b4>
 80087ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80087b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80087b6:	2300      	movs	r3, #0
 80087b8:	9304      	str	r3, [sp, #16]
 80087ba:	e081      	b.n	80088c0 <_strtod_l+0x630>
 80087bc:	f018 0f01 	tst.w	r8, #1
 80087c0:	d007      	beq.n	80087d2 <_strtod_l+0x542>
 80087c2:	4b1d      	ldr	r3, [pc, #116]	; (8008838 <_strtod_l+0x5a8>)
 80087c4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	f7f7 ff14 	bl	80005f8 <__aeabi_dmul>
 80087d0:	2301      	movs	r3, #1
 80087d2:	f109 0901 	add.w	r9, r9, #1
 80087d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80087da:	e7ca      	b.n	8008772 <_strtod_l+0x4e2>
 80087dc:	d0eb      	beq.n	80087b6 <_strtod_l+0x526>
 80087de:	f1c8 0800 	rsb	r8, r8, #0
 80087e2:	f018 020f 	ands.w	r2, r8, #15
 80087e6:	d00a      	beq.n	80087fe <_strtod_l+0x56e>
 80087e8:	4b12      	ldr	r3, [pc, #72]	; (8008834 <_strtod_l+0x5a4>)
 80087ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087ee:	4650      	mov	r0, sl
 80087f0:	4659      	mov	r1, fp
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f7f8 f829 	bl	800084c <__aeabi_ddiv>
 80087fa:	4682      	mov	sl, r0
 80087fc:	468b      	mov	fp, r1
 80087fe:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008802:	d0d8      	beq.n	80087b6 <_strtod_l+0x526>
 8008804:	f1b8 0f1f 	cmp.w	r8, #31
 8008808:	dd1e      	ble.n	8008848 <_strtod_l+0x5b8>
 800880a:	2500      	movs	r5, #0
 800880c:	462e      	mov	r6, r5
 800880e:	9509      	str	r5, [sp, #36]	; 0x24
 8008810:	9507      	str	r5, [sp, #28]
 8008812:	2322      	movs	r3, #34	; 0x22
 8008814:	f04f 0a00 	mov.w	sl, #0
 8008818:	f04f 0b00 	mov.w	fp, #0
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	e789      	b.n	8008734 <_strtod_l+0x4a4>
 8008820:	0801ee21 	.word	0x0801ee21
 8008824:	0801ee64 	.word	0x0801ee64
 8008828:	0801ee19 	.word	0x0801ee19
 800882c:	0801efa4 	.word	0x0801efa4
 8008830:	0801f2c0 	.word	0x0801f2c0
 8008834:	0801f1a0 	.word	0x0801f1a0
 8008838:	0801f178 	.word	0x0801f178
 800883c:	7ff00000 	.word	0x7ff00000
 8008840:	7ca00000 	.word	0x7ca00000
 8008844:	7fefffff 	.word	0x7fefffff
 8008848:	f018 0310 	ands.w	r3, r8, #16
 800884c:	bf18      	it	ne
 800884e:	236a      	movne	r3, #106	; 0x6a
 8008850:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008c08 <_strtod_l+0x978>
 8008854:	9304      	str	r3, [sp, #16]
 8008856:	4650      	mov	r0, sl
 8008858:	4659      	mov	r1, fp
 800885a:	2300      	movs	r3, #0
 800885c:	f018 0f01 	tst.w	r8, #1
 8008860:	d004      	beq.n	800886c <_strtod_l+0x5dc>
 8008862:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008866:	f7f7 fec7 	bl	80005f8 <__aeabi_dmul>
 800886a:	2301      	movs	r3, #1
 800886c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008870:	f109 0908 	add.w	r9, r9, #8
 8008874:	d1f2      	bne.n	800885c <_strtod_l+0x5cc>
 8008876:	b10b      	cbz	r3, 800887c <_strtod_l+0x5ec>
 8008878:	4682      	mov	sl, r0
 800887a:	468b      	mov	fp, r1
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	b1bb      	cbz	r3, 80088b0 <_strtod_l+0x620>
 8008880:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008884:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008888:	2b00      	cmp	r3, #0
 800888a:	4659      	mov	r1, fp
 800888c:	dd10      	ble.n	80088b0 <_strtod_l+0x620>
 800888e:	2b1f      	cmp	r3, #31
 8008890:	f340 8128 	ble.w	8008ae4 <_strtod_l+0x854>
 8008894:	2b34      	cmp	r3, #52	; 0x34
 8008896:	bfde      	ittt	le
 8008898:	3b20      	suble	r3, #32
 800889a:	f04f 32ff 	movle.w	r2, #4294967295
 800889e:	fa02 f303 	lslle.w	r3, r2, r3
 80088a2:	f04f 0a00 	mov.w	sl, #0
 80088a6:	bfcc      	ite	gt
 80088a8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80088ac:	ea03 0b01 	andle.w	fp, r3, r1
 80088b0:	2200      	movs	r2, #0
 80088b2:	2300      	movs	r3, #0
 80088b4:	4650      	mov	r0, sl
 80088b6:	4659      	mov	r1, fp
 80088b8:	f7f8 f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d1a4      	bne.n	800880a <_strtod_l+0x57a>
 80088c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80088c6:	462b      	mov	r3, r5
 80088c8:	463a      	mov	r2, r7
 80088ca:	4620      	mov	r0, r4
 80088cc:	f001 ff30 	bl	800a730 <__s2b>
 80088d0:	9009      	str	r0, [sp, #36]	; 0x24
 80088d2:	2800      	cmp	r0, #0
 80088d4:	f43f af24 	beq.w	8008720 <_strtod_l+0x490>
 80088d8:	9b07      	ldr	r3, [sp, #28]
 80088da:	1b9e      	subs	r6, r3, r6
 80088dc:	9b08      	ldr	r3, [sp, #32]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfb4      	ite	lt
 80088e2:	4633      	movlt	r3, r6
 80088e4:	2300      	movge	r3, #0
 80088e6:	9310      	str	r3, [sp, #64]	; 0x40
 80088e8:	9b08      	ldr	r3, [sp, #32]
 80088ea:	2500      	movs	r5, #0
 80088ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80088f0:	9318      	str	r3, [sp, #96]	; 0x60
 80088f2:	462e      	mov	r6, r5
 80088f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f6:	4620      	mov	r0, r4
 80088f8:	6859      	ldr	r1, [r3, #4]
 80088fa:	f001 fe6d 	bl	800a5d8 <_Balloc>
 80088fe:	9007      	str	r0, [sp, #28]
 8008900:	2800      	cmp	r0, #0
 8008902:	f43f af11 	beq.w	8008728 <_strtod_l+0x498>
 8008906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008908:	691a      	ldr	r2, [r3, #16]
 800890a:	3202      	adds	r2, #2
 800890c:	f103 010c 	add.w	r1, r3, #12
 8008910:	0092      	lsls	r2, r2, #2
 8008912:	300c      	adds	r0, #12
 8008914:	f001 fe52 	bl	800a5bc <memcpy>
 8008918:	ec4b ab10 	vmov	d0, sl, fp
 800891c:	aa20      	add	r2, sp, #128	; 0x80
 800891e:	a91f      	add	r1, sp, #124	; 0x7c
 8008920:	4620      	mov	r0, r4
 8008922:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008926:	f002 fa3f 	bl	800ada8 <__d2b>
 800892a:	901e      	str	r0, [sp, #120]	; 0x78
 800892c:	2800      	cmp	r0, #0
 800892e:	f43f aefb 	beq.w	8008728 <_strtod_l+0x498>
 8008932:	2101      	movs	r1, #1
 8008934:	4620      	mov	r0, r4
 8008936:	f001 ff95 	bl	800a864 <__i2b>
 800893a:	4606      	mov	r6, r0
 800893c:	2800      	cmp	r0, #0
 800893e:	f43f aef3 	beq.w	8008728 <_strtod_l+0x498>
 8008942:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008944:	9904      	ldr	r1, [sp, #16]
 8008946:	2b00      	cmp	r3, #0
 8008948:	bfab      	itete	ge
 800894a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800894c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800894e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008950:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008954:	bfac      	ite	ge
 8008956:	eb03 0902 	addge.w	r9, r3, r2
 800895a:	1ad7      	sublt	r7, r2, r3
 800895c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800895e:	eba3 0801 	sub.w	r8, r3, r1
 8008962:	4490      	add	r8, r2
 8008964:	4ba3      	ldr	r3, [pc, #652]	; (8008bf4 <_strtod_l+0x964>)
 8008966:	f108 38ff 	add.w	r8, r8, #4294967295
 800896a:	4598      	cmp	r8, r3
 800896c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008970:	f280 80cc 	bge.w	8008b0c <_strtod_l+0x87c>
 8008974:	eba3 0308 	sub.w	r3, r3, r8
 8008978:	2b1f      	cmp	r3, #31
 800897a:	eba2 0203 	sub.w	r2, r2, r3
 800897e:	f04f 0101 	mov.w	r1, #1
 8008982:	f300 80b6 	bgt.w	8008af2 <_strtod_l+0x862>
 8008986:	fa01 f303 	lsl.w	r3, r1, r3
 800898a:	9311      	str	r3, [sp, #68]	; 0x44
 800898c:	2300      	movs	r3, #0
 800898e:	930c      	str	r3, [sp, #48]	; 0x30
 8008990:	eb09 0802 	add.w	r8, r9, r2
 8008994:	9b04      	ldr	r3, [sp, #16]
 8008996:	45c1      	cmp	r9, r8
 8008998:	4417      	add	r7, r2
 800899a:	441f      	add	r7, r3
 800899c:	464b      	mov	r3, r9
 800899e:	bfa8      	it	ge
 80089a0:	4643      	movge	r3, r8
 80089a2:	42bb      	cmp	r3, r7
 80089a4:	bfa8      	it	ge
 80089a6:	463b      	movge	r3, r7
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	bfc2      	ittt	gt
 80089ac:	eba8 0803 	subgt.w	r8, r8, r3
 80089b0:	1aff      	subgt	r7, r7, r3
 80089b2:	eba9 0903 	subgt.w	r9, r9, r3
 80089b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dd17      	ble.n	80089ec <_strtod_l+0x75c>
 80089bc:	4631      	mov	r1, r6
 80089be:	461a      	mov	r2, r3
 80089c0:	4620      	mov	r0, r4
 80089c2:	f002 f80b 	bl	800a9dc <__pow5mult>
 80089c6:	4606      	mov	r6, r0
 80089c8:	2800      	cmp	r0, #0
 80089ca:	f43f aead 	beq.w	8008728 <_strtod_l+0x498>
 80089ce:	4601      	mov	r1, r0
 80089d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80089d2:	4620      	mov	r0, r4
 80089d4:	f001 ff5c 	bl	800a890 <__multiply>
 80089d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80089da:	2800      	cmp	r0, #0
 80089dc:	f43f aea4 	beq.w	8008728 <_strtod_l+0x498>
 80089e0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80089e2:	4620      	mov	r0, r4
 80089e4:	f001 fe38 	bl	800a658 <_Bfree>
 80089e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089ea:	931e      	str	r3, [sp, #120]	; 0x78
 80089ec:	f1b8 0f00 	cmp.w	r8, #0
 80089f0:	f300 8091 	bgt.w	8008b16 <_strtod_l+0x886>
 80089f4:	9b08      	ldr	r3, [sp, #32]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dd08      	ble.n	8008a0c <_strtod_l+0x77c>
 80089fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80089fc:	9907      	ldr	r1, [sp, #28]
 80089fe:	4620      	mov	r0, r4
 8008a00:	f001 ffec 	bl	800a9dc <__pow5mult>
 8008a04:	9007      	str	r0, [sp, #28]
 8008a06:	2800      	cmp	r0, #0
 8008a08:	f43f ae8e 	beq.w	8008728 <_strtod_l+0x498>
 8008a0c:	2f00      	cmp	r7, #0
 8008a0e:	dd08      	ble.n	8008a22 <_strtod_l+0x792>
 8008a10:	9907      	ldr	r1, [sp, #28]
 8008a12:	463a      	mov	r2, r7
 8008a14:	4620      	mov	r0, r4
 8008a16:	f002 f83b 	bl	800aa90 <__lshift>
 8008a1a:	9007      	str	r0, [sp, #28]
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	f43f ae83 	beq.w	8008728 <_strtod_l+0x498>
 8008a22:	f1b9 0f00 	cmp.w	r9, #0
 8008a26:	dd08      	ble.n	8008a3a <_strtod_l+0x7aa>
 8008a28:	4631      	mov	r1, r6
 8008a2a:	464a      	mov	r2, r9
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f002 f82f 	bl	800aa90 <__lshift>
 8008a32:	4606      	mov	r6, r0
 8008a34:	2800      	cmp	r0, #0
 8008a36:	f43f ae77 	beq.w	8008728 <_strtod_l+0x498>
 8008a3a:	9a07      	ldr	r2, [sp, #28]
 8008a3c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f002 f8ae 	bl	800aba0 <__mdiff>
 8008a44:	4605      	mov	r5, r0
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f43f ae6e 	beq.w	8008728 <_strtod_l+0x498>
 8008a4c:	68c3      	ldr	r3, [r0, #12]
 8008a4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a50:	2300      	movs	r3, #0
 8008a52:	60c3      	str	r3, [r0, #12]
 8008a54:	4631      	mov	r1, r6
 8008a56:	f002 f887 	bl	800ab68 <__mcmp>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	da65      	bge.n	8008b2a <_strtod_l+0x89a>
 8008a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a60:	ea53 030a 	orrs.w	r3, r3, sl
 8008a64:	f040 8087 	bne.w	8008b76 <_strtod_l+0x8e6>
 8008a68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f040 8082 	bne.w	8008b76 <_strtod_l+0x8e6>
 8008a72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a76:	0d1b      	lsrs	r3, r3, #20
 8008a78:	051b      	lsls	r3, r3, #20
 8008a7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a7e:	d97a      	bls.n	8008b76 <_strtod_l+0x8e6>
 8008a80:	696b      	ldr	r3, [r5, #20]
 8008a82:	b913      	cbnz	r3, 8008a8a <_strtod_l+0x7fa>
 8008a84:	692b      	ldr	r3, [r5, #16]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	dd75      	ble.n	8008b76 <_strtod_l+0x8e6>
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f001 fffe 	bl	800aa90 <__lshift>
 8008a94:	4631      	mov	r1, r6
 8008a96:	4605      	mov	r5, r0
 8008a98:	f002 f866 	bl	800ab68 <__mcmp>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	dd6a      	ble.n	8008b76 <_strtod_l+0x8e6>
 8008aa0:	9904      	ldr	r1, [sp, #16]
 8008aa2:	4a55      	ldr	r2, [pc, #340]	; (8008bf8 <_strtod_l+0x968>)
 8008aa4:	465b      	mov	r3, fp
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	f000 8085 	beq.w	8008bb6 <_strtod_l+0x926>
 8008aac:	ea02 010b 	and.w	r1, r2, fp
 8008ab0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008ab4:	dc7f      	bgt.n	8008bb6 <_strtod_l+0x926>
 8008ab6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008aba:	f77f aeaa 	ble.w	8008812 <_strtod_l+0x582>
 8008abe:	4a4f      	ldr	r2, [pc, #316]	; (8008bfc <_strtod_l+0x96c>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008ac6:	4650      	mov	r0, sl
 8008ac8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008acc:	4659      	mov	r1, fp
 8008ace:	f7f7 fd93 	bl	80005f8 <__aeabi_dmul>
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4303      	orrs	r3, r0
 8008ad6:	bf08      	it	eq
 8008ad8:	2322      	moveq	r3, #34	; 0x22
 8008ada:	4682      	mov	sl, r0
 8008adc:	468b      	mov	fp, r1
 8008ade:	bf08      	it	eq
 8008ae0:	6023      	streq	r3, [r4, #0]
 8008ae2:	e62b      	b.n	800873c <_strtod_l+0x4ac>
 8008ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aec:	ea03 0a0a 	and.w	sl, r3, sl
 8008af0:	e6de      	b.n	80088b0 <_strtod_l+0x620>
 8008af2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008af6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008afa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008afe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008b02:	fa01 f308 	lsl.w	r3, r1, r8
 8008b06:	930c      	str	r3, [sp, #48]	; 0x30
 8008b08:	9111      	str	r1, [sp, #68]	; 0x44
 8008b0a:	e741      	b.n	8008990 <_strtod_l+0x700>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b10:	2301      	movs	r3, #1
 8008b12:	9311      	str	r3, [sp, #68]	; 0x44
 8008b14:	e73c      	b.n	8008990 <_strtod_l+0x700>
 8008b16:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008b18:	4642      	mov	r2, r8
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f001 ffb8 	bl	800aa90 <__lshift>
 8008b20:	901e      	str	r0, [sp, #120]	; 0x78
 8008b22:	2800      	cmp	r0, #0
 8008b24:	f47f af66 	bne.w	80089f4 <_strtod_l+0x764>
 8008b28:	e5fe      	b.n	8008728 <_strtod_l+0x498>
 8008b2a:	465f      	mov	r7, fp
 8008b2c:	d16e      	bne.n	8008c0c <_strtod_l+0x97c>
 8008b2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b34:	b342      	cbz	r2, 8008b88 <_strtod_l+0x8f8>
 8008b36:	4a32      	ldr	r2, [pc, #200]	; (8008c00 <_strtod_l+0x970>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d128      	bne.n	8008b8e <_strtod_l+0x8fe>
 8008b3c:	9b04      	ldr	r3, [sp, #16]
 8008b3e:	4650      	mov	r0, sl
 8008b40:	b1eb      	cbz	r3, 8008b7e <_strtod_l+0x8ee>
 8008b42:	4a2d      	ldr	r2, [pc, #180]	; (8008bf8 <_strtod_l+0x968>)
 8008b44:	403a      	ands	r2, r7
 8008b46:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8008b4e:	d819      	bhi.n	8008b84 <_strtod_l+0x8f4>
 8008b50:	0d12      	lsrs	r2, r2, #20
 8008b52:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008b56:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5a:	4298      	cmp	r0, r3
 8008b5c:	d117      	bne.n	8008b8e <_strtod_l+0x8fe>
 8008b5e:	4b29      	ldr	r3, [pc, #164]	; (8008c04 <_strtod_l+0x974>)
 8008b60:	429f      	cmp	r7, r3
 8008b62:	d102      	bne.n	8008b6a <_strtod_l+0x8da>
 8008b64:	3001      	adds	r0, #1
 8008b66:	f43f addf 	beq.w	8008728 <_strtod_l+0x498>
 8008b6a:	4b23      	ldr	r3, [pc, #140]	; (8008bf8 <_strtod_l+0x968>)
 8008b6c:	403b      	ands	r3, r7
 8008b6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008b72:	f04f 0a00 	mov.w	sl, #0
 8008b76:	9b04      	ldr	r3, [sp, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1a0      	bne.n	8008abe <_strtod_l+0x82e>
 8008b7c:	e5de      	b.n	800873c <_strtod_l+0x4ac>
 8008b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b82:	e7ea      	b.n	8008b5a <_strtod_l+0x8ca>
 8008b84:	460b      	mov	r3, r1
 8008b86:	e7e8      	b.n	8008b5a <_strtod_l+0x8ca>
 8008b88:	ea53 030a 	orrs.w	r3, r3, sl
 8008b8c:	d088      	beq.n	8008aa0 <_strtod_l+0x810>
 8008b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b90:	b1db      	cbz	r3, 8008bca <_strtod_l+0x93a>
 8008b92:	423b      	tst	r3, r7
 8008b94:	d0ef      	beq.n	8008b76 <_strtod_l+0x8e6>
 8008b96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b98:	9a04      	ldr	r2, [sp, #16]
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	4659      	mov	r1, fp
 8008b9e:	b1c3      	cbz	r3, 8008bd2 <_strtod_l+0x942>
 8008ba0:	f7ff fb5a 	bl	8008258 <sulp>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008bac:	f7f7 fb6e 	bl	800028c <__adddf3>
 8008bb0:	4682      	mov	sl, r0
 8008bb2:	468b      	mov	fp, r1
 8008bb4:	e7df      	b.n	8008b76 <_strtod_l+0x8e6>
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008bbc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008bc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008bc4:	f04f 3aff 	mov.w	sl, #4294967295
 8008bc8:	e7d5      	b.n	8008b76 <_strtod_l+0x8e6>
 8008bca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bcc:	ea13 0f0a 	tst.w	r3, sl
 8008bd0:	e7e0      	b.n	8008b94 <_strtod_l+0x904>
 8008bd2:	f7ff fb41 	bl	8008258 <sulp>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008bde:	f7f7 fb53 	bl	8000288 <__aeabi_dsub>
 8008be2:	2200      	movs	r2, #0
 8008be4:	2300      	movs	r3, #0
 8008be6:	4682      	mov	sl, r0
 8008be8:	468b      	mov	fp, r1
 8008bea:	f7f7 ff6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d0c1      	beq.n	8008b76 <_strtod_l+0x8e6>
 8008bf2:	e60e      	b.n	8008812 <_strtod_l+0x582>
 8008bf4:	fffffc02 	.word	0xfffffc02
 8008bf8:	7ff00000 	.word	0x7ff00000
 8008bfc:	39500000 	.word	0x39500000
 8008c00:	000fffff 	.word	0x000fffff
 8008c04:	7fefffff 	.word	0x7fefffff
 8008c08:	0801ee78 	.word	0x0801ee78
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f002 f926 	bl	800ae60 <__ratio>
 8008c14:	ec59 8b10 	vmov	r8, r9, d0
 8008c18:	ee10 0a10 	vmov	r0, s0
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c22:	4649      	mov	r1, r9
 8008c24:	f7f7 ff64 	bl	8000af0 <__aeabi_dcmple>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d07c      	beq.n	8008d26 <_strtod_l+0xa96>
 8008c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d04c      	beq.n	8008ccc <_strtod_l+0xa3c>
 8008c32:	4b95      	ldr	r3, [pc, #596]	; (8008e88 <_strtod_l+0xbf8>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008c3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008e88 <_strtod_l+0xbf8>
 8008c3e:	f04f 0800 	mov.w	r8, #0
 8008c42:	4b92      	ldr	r3, [pc, #584]	; (8008e8c <_strtod_l+0xbfc>)
 8008c44:	403b      	ands	r3, r7
 8008c46:	9311      	str	r3, [sp, #68]	; 0x44
 8008c48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c4a:	4b91      	ldr	r3, [pc, #580]	; (8008e90 <_strtod_l+0xc00>)
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	f040 80b2 	bne.w	8008db6 <_strtod_l+0xb26>
 8008c52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c5a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008c5e:	ec4b ab10 	vmov	d0, sl, fp
 8008c62:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008c66:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c6a:	f002 f821 	bl	800acb0 <__ulp>
 8008c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c72:	ec53 2b10 	vmov	r2, r3, d0
 8008c76:	f7f7 fcbf 	bl	80005f8 <__aeabi_dmul>
 8008c7a:	4652      	mov	r2, sl
 8008c7c:	465b      	mov	r3, fp
 8008c7e:	f7f7 fb05 	bl	800028c <__adddf3>
 8008c82:	460b      	mov	r3, r1
 8008c84:	4981      	ldr	r1, [pc, #516]	; (8008e8c <_strtod_l+0xbfc>)
 8008c86:	4a83      	ldr	r2, [pc, #524]	; (8008e94 <_strtod_l+0xc04>)
 8008c88:	4019      	ands	r1, r3
 8008c8a:	4291      	cmp	r1, r2
 8008c8c:	4682      	mov	sl, r0
 8008c8e:	d95e      	bls.n	8008d4e <_strtod_l+0xabe>
 8008c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c92:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d103      	bne.n	8008ca2 <_strtod_l+0xa12>
 8008c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	f43f ad43 	beq.w	8008728 <_strtod_l+0x498>
 8008ca2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008ea0 <_strtod_l+0xc10>
 8008ca6:	f04f 3aff 	mov.w	sl, #4294967295
 8008caa:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008cac:	4620      	mov	r0, r4
 8008cae:	f001 fcd3 	bl	800a658 <_Bfree>
 8008cb2:	9907      	ldr	r1, [sp, #28]
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f001 fccf 	bl	800a658 <_Bfree>
 8008cba:	4631      	mov	r1, r6
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f001 fccb 	bl	800a658 <_Bfree>
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f001 fcc7 	bl	800a658 <_Bfree>
 8008cca:	e613      	b.n	80088f4 <_strtod_l+0x664>
 8008ccc:	f1ba 0f00 	cmp.w	sl, #0
 8008cd0:	d11b      	bne.n	8008d0a <_strtod_l+0xa7a>
 8008cd2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cd6:	b9f3      	cbnz	r3, 8008d16 <_strtod_l+0xa86>
 8008cd8:	4b6b      	ldr	r3, [pc, #428]	; (8008e88 <_strtod_l+0xbf8>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	4640      	mov	r0, r8
 8008cde:	4649      	mov	r1, r9
 8008ce0:	f7f7 fefc 	bl	8000adc <__aeabi_dcmplt>
 8008ce4:	b9d0      	cbnz	r0, 8008d1c <_strtod_l+0xa8c>
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	4649      	mov	r1, r9
 8008cea:	4b6b      	ldr	r3, [pc, #428]	; (8008e98 <_strtod_l+0xc08>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	f7f7 fc83 	bl	80005f8 <__aeabi_dmul>
 8008cf2:	4680      	mov	r8, r0
 8008cf4:	4689      	mov	r9, r1
 8008cf6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008cfa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008cfe:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d00:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008d04:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008d08:	e79b      	b.n	8008c42 <_strtod_l+0x9b2>
 8008d0a:	f1ba 0f01 	cmp.w	sl, #1
 8008d0e:	d102      	bne.n	8008d16 <_strtod_l+0xa86>
 8008d10:	2f00      	cmp	r7, #0
 8008d12:	f43f ad7e 	beq.w	8008812 <_strtod_l+0x582>
 8008d16:	4b61      	ldr	r3, [pc, #388]	; (8008e9c <_strtod_l+0xc0c>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	e78c      	b.n	8008c36 <_strtod_l+0x9a6>
 8008d1c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008e98 <_strtod_l+0xc08>
 8008d20:	f04f 0800 	mov.w	r8, #0
 8008d24:	e7e7      	b.n	8008cf6 <_strtod_l+0xa66>
 8008d26:	4b5c      	ldr	r3, [pc, #368]	; (8008e98 <_strtod_l+0xc08>)
 8008d28:	4640      	mov	r0, r8
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f7f7 fc63 	bl	80005f8 <__aeabi_dmul>
 8008d32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d34:	4680      	mov	r8, r0
 8008d36:	4689      	mov	r9, r1
 8008d38:	b933      	cbnz	r3, 8008d48 <_strtod_l+0xab8>
 8008d3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d3e:	9012      	str	r0, [sp, #72]	; 0x48
 8008d40:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d42:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008d46:	e7dd      	b.n	8008d04 <_strtod_l+0xa74>
 8008d48:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008d4c:	e7f9      	b.n	8008d42 <_strtod_l+0xab2>
 8008d4e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1a8      	bne.n	8008caa <_strtod_l+0xa1a>
 8008d58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d5e:	0d1b      	lsrs	r3, r3, #20
 8008d60:	051b      	lsls	r3, r3, #20
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d1a1      	bne.n	8008caa <_strtod_l+0xa1a>
 8008d66:	4640      	mov	r0, r8
 8008d68:	4649      	mov	r1, r9
 8008d6a:	f7f7 ffa5 	bl	8000cb8 <__aeabi_d2lz>
 8008d6e:	f7f7 fc15 	bl	800059c <__aeabi_l2d>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4640      	mov	r0, r8
 8008d78:	4649      	mov	r1, r9
 8008d7a:	f7f7 fa85 	bl	8000288 <__aeabi_dsub>
 8008d7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d84:	ea43 030a 	orr.w	r3, r3, sl
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	4689      	mov	r9, r1
 8008d8e:	d053      	beq.n	8008e38 <_strtod_l+0xba8>
 8008d90:	a335      	add	r3, pc, #212	; (adr r3, 8008e68 <_strtod_l+0xbd8>)
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	f7f7 fea1 	bl	8000adc <__aeabi_dcmplt>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	f47f acce 	bne.w	800873c <_strtod_l+0x4ac>
 8008da0:	a333      	add	r3, pc, #204	; (adr r3, 8008e70 <_strtod_l+0xbe0>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	4640      	mov	r0, r8
 8008da8:	4649      	mov	r1, r9
 8008daa:	f7f7 feb5 	bl	8000b18 <__aeabi_dcmpgt>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	f43f af7b 	beq.w	8008caa <_strtod_l+0xa1a>
 8008db4:	e4c2      	b.n	800873c <_strtod_l+0x4ac>
 8008db6:	9b04      	ldr	r3, [sp, #16]
 8008db8:	b333      	cbz	r3, 8008e08 <_strtod_l+0xb78>
 8008dba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008dc0:	d822      	bhi.n	8008e08 <_strtod_l+0xb78>
 8008dc2:	a32d      	add	r3, pc, #180	; (adr r3, 8008e78 <_strtod_l+0xbe8>)
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	4640      	mov	r0, r8
 8008dca:	4649      	mov	r1, r9
 8008dcc:	f7f7 fe90 	bl	8000af0 <__aeabi_dcmple>
 8008dd0:	b1a0      	cbz	r0, 8008dfc <_strtod_l+0xb6c>
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	f7f7 fee7 	bl	8000ba8 <__aeabi_d2uiz>
 8008dda:	2801      	cmp	r0, #1
 8008ddc:	bf38      	it	cc
 8008dde:	2001      	movcc	r0, #1
 8008de0:	f7f7 fb90 	bl	8000504 <__aeabi_ui2d>
 8008de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008de6:	4680      	mov	r8, r0
 8008de8:	4689      	mov	r9, r1
 8008dea:	bb13      	cbnz	r3, 8008e32 <_strtod_l+0xba2>
 8008dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008df0:	9014      	str	r0, [sp, #80]	; 0x50
 8008df2:	9315      	str	r3, [sp, #84]	; 0x54
 8008df4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008df8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dfe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008e00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008e04:	1a9b      	subs	r3, r3, r2
 8008e06:	930d      	str	r3, [sp, #52]	; 0x34
 8008e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e0c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008e10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008e14:	f001 ff4c 	bl	800acb0 <__ulp>
 8008e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e1c:	ec53 2b10 	vmov	r2, r3, d0
 8008e20:	f7f7 fbea 	bl	80005f8 <__aeabi_dmul>
 8008e24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e28:	f7f7 fa30 	bl	800028c <__adddf3>
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	468b      	mov	fp, r1
 8008e30:	e78f      	b.n	8008d52 <_strtod_l+0xac2>
 8008e32:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008e36:	e7dd      	b.n	8008df4 <_strtod_l+0xb64>
 8008e38:	a311      	add	r3, pc, #68	; (adr r3, 8008e80 <_strtod_l+0xbf0>)
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	f7f7 fe4d 	bl	8000adc <__aeabi_dcmplt>
 8008e42:	e7b4      	b.n	8008dae <_strtod_l+0xb1e>
 8008e44:	2300      	movs	r3, #0
 8008e46:	930e      	str	r3, [sp, #56]	; 0x38
 8008e48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	f7ff ba65 	b.w	800831c <_strtod_l+0x8c>
 8008e52:	2b65      	cmp	r3, #101	; 0x65
 8008e54:	f43f ab5d 	beq.w	8008512 <_strtod_l+0x282>
 8008e58:	2b45      	cmp	r3, #69	; 0x45
 8008e5a:	f43f ab5a 	beq.w	8008512 <_strtod_l+0x282>
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f7ff bb92 	b.w	8008588 <_strtod_l+0x2f8>
 8008e64:	f3af 8000 	nop.w
 8008e68:	94a03595 	.word	0x94a03595
 8008e6c:	3fdfffff 	.word	0x3fdfffff
 8008e70:	35afe535 	.word	0x35afe535
 8008e74:	3fe00000 	.word	0x3fe00000
 8008e78:	ffc00000 	.word	0xffc00000
 8008e7c:	41dfffff 	.word	0x41dfffff
 8008e80:	94a03595 	.word	0x94a03595
 8008e84:	3fcfffff 	.word	0x3fcfffff
 8008e88:	3ff00000 	.word	0x3ff00000
 8008e8c:	7ff00000 	.word	0x7ff00000
 8008e90:	7fe00000 	.word	0x7fe00000
 8008e94:	7c9fffff 	.word	0x7c9fffff
 8008e98:	3fe00000 	.word	0x3fe00000
 8008e9c:	bff00000 	.word	0xbff00000
 8008ea0:	7fefffff 	.word	0x7fefffff

08008ea4 <_strtod_r>:
 8008ea4:	4b01      	ldr	r3, [pc, #4]	; (8008eac <_strtod_r+0x8>)
 8008ea6:	f7ff b9f3 	b.w	8008290 <_strtod_l>
 8008eaa:	bf00      	nop
 8008eac:	20000074 	.word	0x20000074

08008eb0 <_strtol_l.isra.0>:
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb6:	d001      	beq.n	8008ebc <_strtol_l.isra.0+0xc>
 8008eb8:	2b24      	cmp	r3, #36	; 0x24
 8008eba:	d906      	bls.n	8008eca <_strtol_l.isra.0+0x1a>
 8008ebc:	f7fe fae2 	bl	8007484 <__errno>
 8008ec0:	2316      	movs	r3, #22
 8008ec2:	6003      	str	r3, [r0, #0]
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eca:	4f3a      	ldr	r7, [pc, #232]	; (8008fb4 <_strtol_l.isra.0+0x104>)
 8008ecc:	468e      	mov	lr, r1
 8008ece:	4676      	mov	r6, lr
 8008ed0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008ed4:	5de5      	ldrb	r5, [r4, r7]
 8008ed6:	f015 0508 	ands.w	r5, r5, #8
 8008eda:	d1f8      	bne.n	8008ece <_strtol_l.isra.0+0x1e>
 8008edc:	2c2d      	cmp	r4, #45	; 0x2d
 8008ede:	d134      	bne.n	8008f4a <_strtol_l.isra.0+0x9a>
 8008ee0:	f89e 4000 	ldrb.w	r4, [lr]
 8008ee4:	f04f 0801 	mov.w	r8, #1
 8008ee8:	f106 0e02 	add.w	lr, r6, #2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d05c      	beq.n	8008faa <_strtol_l.isra.0+0xfa>
 8008ef0:	2b10      	cmp	r3, #16
 8008ef2:	d10c      	bne.n	8008f0e <_strtol_l.isra.0+0x5e>
 8008ef4:	2c30      	cmp	r4, #48	; 0x30
 8008ef6:	d10a      	bne.n	8008f0e <_strtol_l.isra.0+0x5e>
 8008ef8:	f89e 4000 	ldrb.w	r4, [lr]
 8008efc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008f00:	2c58      	cmp	r4, #88	; 0x58
 8008f02:	d14d      	bne.n	8008fa0 <_strtol_l.isra.0+0xf0>
 8008f04:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008f08:	2310      	movs	r3, #16
 8008f0a:	f10e 0e02 	add.w	lr, lr, #2
 8008f0e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008f12:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008f16:	2600      	movs	r6, #0
 8008f18:	fbbc f9f3 	udiv	r9, ip, r3
 8008f1c:	4635      	mov	r5, r6
 8008f1e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008f22:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008f26:	2f09      	cmp	r7, #9
 8008f28:	d818      	bhi.n	8008f5c <_strtol_l.isra.0+0xac>
 8008f2a:	463c      	mov	r4, r7
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	dd24      	ble.n	8008f7a <_strtol_l.isra.0+0xca>
 8008f30:	2e00      	cmp	r6, #0
 8008f32:	db1f      	blt.n	8008f74 <_strtol_l.isra.0+0xc4>
 8008f34:	45a9      	cmp	r9, r5
 8008f36:	d31d      	bcc.n	8008f74 <_strtol_l.isra.0+0xc4>
 8008f38:	d101      	bne.n	8008f3e <_strtol_l.isra.0+0x8e>
 8008f3a:	45a2      	cmp	sl, r4
 8008f3c:	db1a      	blt.n	8008f74 <_strtol_l.isra.0+0xc4>
 8008f3e:	fb05 4503 	mla	r5, r5, r3, r4
 8008f42:	2601      	movs	r6, #1
 8008f44:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008f48:	e7eb      	b.n	8008f22 <_strtol_l.isra.0+0x72>
 8008f4a:	2c2b      	cmp	r4, #43	; 0x2b
 8008f4c:	bf08      	it	eq
 8008f4e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008f52:	46a8      	mov	r8, r5
 8008f54:	bf08      	it	eq
 8008f56:	f106 0e02 	addeq.w	lr, r6, #2
 8008f5a:	e7c7      	b.n	8008eec <_strtol_l.isra.0+0x3c>
 8008f5c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008f60:	2f19      	cmp	r7, #25
 8008f62:	d801      	bhi.n	8008f68 <_strtol_l.isra.0+0xb8>
 8008f64:	3c37      	subs	r4, #55	; 0x37
 8008f66:	e7e1      	b.n	8008f2c <_strtol_l.isra.0+0x7c>
 8008f68:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008f6c:	2f19      	cmp	r7, #25
 8008f6e:	d804      	bhi.n	8008f7a <_strtol_l.isra.0+0xca>
 8008f70:	3c57      	subs	r4, #87	; 0x57
 8008f72:	e7db      	b.n	8008f2c <_strtol_l.isra.0+0x7c>
 8008f74:	f04f 36ff 	mov.w	r6, #4294967295
 8008f78:	e7e4      	b.n	8008f44 <_strtol_l.isra.0+0x94>
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	da05      	bge.n	8008f8a <_strtol_l.isra.0+0xda>
 8008f7e:	2322      	movs	r3, #34	; 0x22
 8008f80:	6003      	str	r3, [r0, #0]
 8008f82:	4665      	mov	r5, ip
 8008f84:	b942      	cbnz	r2, 8008f98 <_strtol_l.isra.0+0xe8>
 8008f86:	4628      	mov	r0, r5
 8008f88:	e79d      	b.n	8008ec6 <_strtol_l.isra.0+0x16>
 8008f8a:	f1b8 0f00 	cmp.w	r8, #0
 8008f8e:	d000      	beq.n	8008f92 <_strtol_l.isra.0+0xe2>
 8008f90:	426d      	negs	r5, r5
 8008f92:	2a00      	cmp	r2, #0
 8008f94:	d0f7      	beq.n	8008f86 <_strtol_l.isra.0+0xd6>
 8008f96:	b10e      	cbz	r6, 8008f9c <_strtol_l.isra.0+0xec>
 8008f98:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008f9c:	6011      	str	r1, [r2, #0]
 8008f9e:	e7f2      	b.n	8008f86 <_strtol_l.isra.0+0xd6>
 8008fa0:	2430      	movs	r4, #48	; 0x30
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1b3      	bne.n	8008f0e <_strtol_l.isra.0+0x5e>
 8008fa6:	2308      	movs	r3, #8
 8008fa8:	e7b1      	b.n	8008f0e <_strtol_l.isra.0+0x5e>
 8008faa:	2c30      	cmp	r4, #48	; 0x30
 8008fac:	d0a4      	beq.n	8008ef8 <_strtol_l.isra.0+0x48>
 8008fae:	230a      	movs	r3, #10
 8008fb0:	e7ad      	b.n	8008f0e <_strtol_l.isra.0+0x5e>
 8008fb2:	bf00      	nop
 8008fb4:	0801eea1 	.word	0x0801eea1

08008fb8 <_strtol_r>:
 8008fb8:	f7ff bf7a 	b.w	8008eb0 <_strtol_l.isra.0>

08008fbc <quorem>:
 8008fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc0:	6903      	ldr	r3, [r0, #16]
 8008fc2:	690c      	ldr	r4, [r1, #16]
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	f2c0 8081 	blt.w	80090ce <quorem+0x112>
 8008fcc:	3c01      	subs	r4, #1
 8008fce:	f101 0814 	add.w	r8, r1, #20
 8008fd2:	f100 0514 	add.w	r5, r0, #20
 8008fd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fe0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ff0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ff4:	d331      	bcc.n	800905a <quorem+0x9e>
 8008ff6:	f04f 0e00 	mov.w	lr, #0
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	46ac      	mov	ip, r5
 8008ffe:	46f2      	mov	sl, lr
 8009000:	f850 2b04 	ldr.w	r2, [r0], #4
 8009004:	b293      	uxth	r3, r2
 8009006:	fb06 e303 	mla	r3, r6, r3, lr
 800900a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800900e:	b29b      	uxth	r3, r3
 8009010:	ebaa 0303 	sub.w	r3, sl, r3
 8009014:	0c12      	lsrs	r2, r2, #16
 8009016:	f8dc a000 	ldr.w	sl, [ip]
 800901a:	fb06 e202 	mla	r2, r6, r2, lr
 800901e:	fa13 f38a 	uxtah	r3, r3, sl
 8009022:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009026:	fa1f fa82 	uxth.w	sl, r2
 800902a:	f8dc 2000 	ldr.w	r2, [ip]
 800902e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009032:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009036:	b29b      	uxth	r3, r3
 8009038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800903c:	4581      	cmp	r9, r0
 800903e:	f84c 3b04 	str.w	r3, [ip], #4
 8009042:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009046:	d2db      	bcs.n	8009000 <quorem+0x44>
 8009048:	f855 300b 	ldr.w	r3, [r5, fp]
 800904c:	b92b      	cbnz	r3, 800905a <quorem+0x9e>
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	3b04      	subs	r3, #4
 8009052:	429d      	cmp	r5, r3
 8009054:	461a      	mov	r2, r3
 8009056:	d32e      	bcc.n	80090b6 <quorem+0xfa>
 8009058:	613c      	str	r4, [r7, #16]
 800905a:	4638      	mov	r0, r7
 800905c:	f001 fd84 	bl	800ab68 <__mcmp>
 8009060:	2800      	cmp	r0, #0
 8009062:	db24      	blt.n	80090ae <quorem+0xf2>
 8009064:	3601      	adds	r6, #1
 8009066:	4628      	mov	r0, r5
 8009068:	f04f 0c00 	mov.w	ip, #0
 800906c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009070:	f8d0 e000 	ldr.w	lr, [r0]
 8009074:	b293      	uxth	r3, r2
 8009076:	ebac 0303 	sub.w	r3, ip, r3
 800907a:	0c12      	lsrs	r2, r2, #16
 800907c:	fa13 f38e 	uxtah	r3, r3, lr
 8009080:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009088:	b29b      	uxth	r3, r3
 800908a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800908e:	45c1      	cmp	r9, r8
 8009090:	f840 3b04 	str.w	r3, [r0], #4
 8009094:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009098:	d2e8      	bcs.n	800906c <quorem+0xb0>
 800909a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800909e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090a2:	b922      	cbnz	r2, 80090ae <quorem+0xf2>
 80090a4:	3b04      	subs	r3, #4
 80090a6:	429d      	cmp	r5, r3
 80090a8:	461a      	mov	r2, r3
 80090aa:	d30a      	bcc.n	80090c2 <quorem+0x106>
 80090ac:	613c      	str	r4, [r7, #16]
 80090ae:	4630      	mov	r0, r6
 80090b0:	b003      	add	sp, #12
 80090b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b6:	6812      	ldr	r2, [r2, #0]
 80090b8:	3b04      	subs	r3, #4
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	d1cc      	bne.n	8009058 <quorem+0x9c>
 80090be:	3c01      	subs	r4, #1
 80090c0:	e7c7      	b.n	8009052 <quorem+0x96>
 80090c2:	6812      	ldr	r2, [r2, #0]
 80090c4:	3b04      	subs	r3, #4
 80090c6:	2a00      	cmp	r2, #0
 80090c8:	d1f0      	bne.n	80090ac <quorem+0xf0>
 80090ca:	3c01      	subs	r4, #1
 80090cc:	e7eb      	b.n	80090a6 <quorem+0xea>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e7ee      	b.n	80090b0 <quorem+0xf4>
 80090d2:	0000      	movs	r0, r0
 80090d4:	0000      	movs	r0, r0
	...

080090d8 <_dtoa_r>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	ed2d 8b02 	vpush	{d8}
 80090e0:	ec57 6b10 	vmov	r6, r7, d0
 80090e4:	b095      	sub	sp, #84	; 0x54
 80090e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090ec:	9105      	str	r1, [sp, #20]
 80090ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80090f2:	4604      	mov	r4, r0
 80090f4:	9209      	str	r2, [sp, #36]	; 0x24
 80090f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80090f8:	b975      	cbnz	r5, 8009118 <_dtoa_r+0x40>
 80090fa:	2010      	movs	r0, #16
 80090fc:	f001 fa44 	bl	800a588 <malloc>
 8009100:	4602      	mov	r2, r0
 8009102:	6260      	str	r0, [r4, #36]	; 0x24
 8009104:	b920      	cbnz	r0, 8009110 <_dtoa_r+0x38>
 8009106:	4bb2      	ldr	r3, [pc, #712]	; (80093d0 <_dtoa_r+0x2f8>)
 8009108:	21ea      	movs	r1, #234	; 0xea
 800910a:	48b2      	ldr	r0, [pc, #712]	; (80093d4 <_dtoa_r+0x2fc>)
 800910c:	f002 fbde 	bl	800b8cc <__assert_func>
 8009110:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009114:	6005      	str	r5, [r0, #0]
 8009116:	60c5      	str	r5, [r0, #12]
 8009118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800911a:	6819      	ldr	r1, [r3, #0]
 800911c:	b151      	cbz	r1, 8009134 <_dtoa_r+0x5c>
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	604a      	str	r2, [r1, #4]
 8009122:	2301      	movs	r3, #1
 8009124:	4093      	lsls	r3, r2
 8009126:	608b      	str	r3, [r1, #8]
 8009128:	4620      	mov	r0, r4
 800912a:	f001 fa95 	bl	800a658 <_Bfree>
 800912e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009130:	2200      	movs	r2, #0
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	1e3b      	subs	r3, r7, #0
 8009136:	bfb9      	ittee	lt
 8009138:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800913c:	9303      	strlt	r3, [sp, #12]
 800913e:	2300      	movge	r3, #0
 8009140:	f8c8 3000 	strge.w	r3, [r8]
 8009144:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009148:	4ba3      	ldr	r3, [pc, #652]	; (80093d8 <_dtoa_r+0x300>)
 800914a:	bfbc      	itt	lt
 800914c:	2201      	movlt	r2, #1
 800914e:	f8c8 2000 	strlt.w	r2, [r8]
 8009152:	ea33 0309 	bics.w	r3, r3, r9
 8009156:	d11b      	bne.n	8009190 <_dtoa_r+0xb8>
 8009158:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800915a:	f242 730f 	movw	r3, #9999	; 0x270f
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009164:	4333      	orrs	r3, r6
 8009166:	f000 857a 	beq.w	8009c5e <_dtoa_r+0xb86>
 800916a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800916c:	b963      	cbnz	r3, 8009188 <_dtoa_r+0xb0>
 800916e:	4b9b      	ldr	r3, [pc, #620]	; (80093dc <_dtoa_r+0x304>)
 8009170:	e024      	b.n	80091bc <_dtoa_r+0xe4>
 8009172:	4b9b      	ldr	r3, [pc, #620]	; (80093e0 <_dtoa_r+0x308>)
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	3308      	adds	r3, #8
 8009178:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	9800      	ldr	r0, [sp, #0]
 800917e:	b015      	add	sp, #84	; 0x54
 8009180:	ecbd 8b02 	vpop	{d8}
 8009184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009188:	4b94      	ldr	r3, [pc, #592]	; (80093dc <_dtoa_r+0x304>)
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	3303      	adds	r3, #3
 800918e:	e7f3      	b.n	8009178 <_dtoa_r+0xa0>
 8009190:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009194:	2200      	movs	r2, #0
 8009196:	ec51 0b17 	vmov	r0, r1, d7
 800919a:	2300      	movs	r3, #0
 800919c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80091a0:	f7f7 fc92 	bl	8000ac8 <__aeabi_dcmpeq>
 80091a4:	4680      	mov	r8, r0
 80091a6:	b158      	cbz	r0, 80091c0 <_dtoa_r+0xe8>
 80091a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091aa:	2301      	movs	r3, #1
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 8551 	beq.w	8009c58 <_dtoa_r+0xb80>
 80091b6:	488b      	ldr	r0, [pc, #556]	; (80093e4 <_dtoa_r+0x30c>)
 80091b8:	6018      	str	r0, [r3, #0]
 80091ba:	1e43      	subs	r3, r0, #1
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	e7dd      	b.n	800917c <_dtoa_r+0xa4>
 80091c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80091c4:	aa12      	add	r2, sp, #72	; 0x48
 80091c6:	a913      	add	r1, sp, #76	; 0x4c
 80091c8:	4620      	mov	r0, r4
 80091ca:	f001 fded 	bl	800ada8 <__d2b>
 80091ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091d2:	4683      	mov	fp, r0
 80091d4:	2d00      	cmp	r5, #0
 80091d6:	d07c      	beq.n	80092d2 <_dtoa_r+0x1fa>
 80091d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80091de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80091e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80091ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80091ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091f2:	4b7d      	ldr	r3, [pc, #500]	; (80093e8 <_dtoa_r+0x310>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	4630      	mov	r0, r6
 80091f8:	4639      	mov	r1, r7
 80091fa:	f7f7 f845 	bl	8000288 <__aeabi_dsub>
 80091fe:	a36e      	add	r3, pc, #440	; (adr r3, 80093b8 <_dtoa_r+0x2e0>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f7f7 f9f8 	bl	80005f8 <__aeabi_dmul>
 8009208:	a36d      	add	r3, pc, #436	; (adr r3, 80093c0 <_dtoa_r+0x2e8>)
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	f7f7 f83d 	bl	800028c <__adddf3>
 8009212:	4606      	mov	r6, r0
 8009214:	4628      	mov	r0, r5
 8009216:	460f      	mov	r7, r1
 8009218:	f7f7 f984 	bl	8000524 <__aeabi_i2d>
 800921c:	a36a      	add	r3, pc, #424	; (adr r3, 80093c8 <_dtoa_r+0x2f0>)
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f7f7 f9e9 	bl	80005f8 <__aeabi_dmul>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	4630      	mov	r0, r6
 800922c:	4639      	mov	r1, r7
 800922e:	f7f7 f82d 	bl	800028c <__adddf3>
 8009232:	4606      	mov	r6, r0
 8009234:	460f      	mov	r7, r1
 8009236:	f7f7 fc8f 	bl	8000b58 <__aeabi_d2iz>
 800923a:	2200      	movs	r2, #0
 800923c:	4682      	mov	sl, r0
 800923e:	2300      	movs	r3, #0
 8009240:	4630      	mov	r0, r6
 8009242:	4639      	mov	r1, r7
 8009244:	f7f7 fc4a 	bl	8000adc <__aeabi_dcmplt>
 8009248:	b148      	cbz	r0, 800925e <_dtoa_r+0x186>
 800924a:	4650      	mov	r0, sl
 800924c:	f7f7 f96a 	bl	8000524 <__aeabi_i2d>
 8009250:	4632      	mov	r2, r6
 8009252:	463b      	mov	r3, r7
 8009254:	f7f7 fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 8009258:	b908      	cbnz	r0, 800925e <_dtoa_r+0x186>
 800925a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800925e:	f1ba 0f16 	cmp.w	sl, #22
 8009262:	d854      	bhi.n	800930e <_dtoa_r+0x236>
 8009264:	4b61      	ldr	r3, [pc, #388]	; (80093ec <_dtoa_r+0x314>)
 8009266:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009272:	f7f7 fc33 	bl	8000adc <__aeabi_dcmplt>
 8009276:	2800      	cmp	r0, #0
 8009278:	d04b      	beq.n	8009312 <_dtoa_r+0x23a>
 800927a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800927e:	2300      	movs	r3, #0
 8009280:	930e      	str	r3, [sp, #56]	; 0x38
 8009282:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009284:	1b5d      	subs	r5, r3, r5
 8009286:	1e6b      	subs	r3, r5, #1
 8009288:	9304      	str	r3, [sp, #16]
 800928a:	bf43      	ittte	mi
 800928c:	2300      	movmi	r3, #0
 800928e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009292:	9304      	strmi	r3, [sp, #16]
 8009294:	f04f 0800 	movpl.w	r8, #0
 8009298:	f1ba 0f00 	cmp.w	sl, #0
 800929c:	db3b      	blt.n	8009316 <_dtoa_r+0x23e>
 800929e:	9b04      	ldr	r3, [sp, #16]
 80092a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80092a4:	4453      	add	r3, sl
 80092a6:	9304      	str	r3, [sp, #16]
 80092a8:	2300      	movs	r3, #0
 80092aa:	9306      	str	r3, [sp, #24]
 80092ac:	9b05      	ldr	r3, [sp, #20]
 80092ae:	2b09      	cmp	r3, #9
 80092b0:	d869      	bhi.n	8009386 <_dtoa_r+0x2ae>
 80092b2:	2b05      	cmp	r3, #5
 80092b4:	bfc4      	itt	gt
 80092b6:	3b04      	subgt	r3, #4
 80092b8:	9305      	strgt	r3, [sp, #20]
 80092ba:	9b05      	ldr	r3, [sp, #20]
 80092bc:	f1a3 0302 	sub.w	r3, r3, #2
 80092c0:	bfcc      	ite	gt
 80092c2:	2500      	movgt	r5, #0
 80092c4:	2501      	movle	r5, #1
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d869      	bhi.n	800939e <_dtoa_r+0x2c6>
 80092ca:	e8df f003 	tbb	[pc, r3]
 80092ce:	4e2c      	.short	0x4e2c
 80092d0:	5a4c      	.short	0x5a4c
 80092d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80092d6:	441d      	add	r5, r3
 80092d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092dc:	2b20      	cmp	r3, #32
 80092de:	bfc1      	itttt	gt
 80092e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80092e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80092ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80092f0:	bfda      	itte	le
 80092f2:	f1c3 0320 	rsble	r3, r3, #32
 80092f6:	fa06 f003 	lslle.w	r0, r6, r3
 80092fa:	4318      	orrgt	r0, r3
 80092fc:	f7f7 f902 	bl	8000504 <__aeabi_ui2d>
 8009300:	2301      	movs	r3, #1
 8009302:	4606      	mov	r6, r0
 8009304:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009308:	3d01      	subs	r5, #1
 800930a:	9310      	str	r3, [sp, #64]	; 0x40
 800930c:	e771      	b.n	80091f2 <_dtoa_r+0x11a>
 800930e:	2301      	movs	r3, #1
 8009310:	e7b6      	b.n	8009280 <_dtoa_r+0x1a8>
 8009312:	900e      	str	r0, [sp, #56]	; 0x38
 8009314:	e7b5      	b.n	8009282 <_dtoa_r+0x1aa>
 8009316:	f1ca 0300 	rsb	r3, sl, #0
 800931a:	9306      	str	r3, [sp, #24]
 800931c:	2300      	movs	r3, #0
 800931e:	eba8 080a 	sub.w	r8, r8, sl
 8009322:	930d      	str	r3, [sp, #52]	; 0x34
 8009324:	e7c2      	b.n	80092ac <_dtoa_r+0x1d4>
 8009326:	2300      	movs	r3, #0
 8009328:	9308      	str	r3, [sp, #32]
 800932a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800932c:	2b00      	cmp	r3, #0
 800932e:	dc39      	bgt.n	80093a4 <_dtoa_r+0x2cc>
 8009330:	f04f 0901 	mov.w	r9, #1
 8009334:	f8cd 9004 	str.w	r9, [sp, #4]
 8009338:	464b      	mov	r3, r9
 800933a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800933e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009340:	2200      	movs	r2, #0
 8009342:	6042      	str	r2, [r0, #4]
 8009344:	2204      	movs	r2, #4
 8009346:	f102 0614 	add.w	r6, r2, #20
 800934a:	429e      	cmp	r6, r3
 800934c:	6841      	ldr	r1, [r0, #4]
 800934e:	d92f      	bls.n	80093b0 <_dtoa_r+0x2d8>
 8009350:	4620      	mov	r0, r4
 8009352:	f001 f941 	bl	800a5d8 <_Balloc>
 8009356:	9000      	str	r0, [sp, #0]
 8009358:	2800      	cmp	r0, #0
 800935a:	d14b      	bne.n	80093f4 <_dtoa_r+0x31c>
 800935c:	4b24      	ldr	r3, [pc, #144]	; (80093f0 <_dtoa_r+0x318>)
 800935e:	4602      	mov	r2, r0
 8009360:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009364:	e6d1      	b.n	800910a <_dtoa_r+0x32>
 8009366:	2301      	movs	r3, #1
 8009368:	e7de      	b.n	8009328 <_dtoa_r+0x250>
 800936a:	2300      	movs	r3, #0
 800936c:	9308      	str	r3, [sp, #32]
 800936e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009370:	eb0a 0903 	add.w	r9, sl, r3
 8009374:	f109 0301 	add.w	r3, r9, #1
 8009378:	2b01      	cmp	r3, #1
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	bfb8      	it	lt
 800937e:	2301      	movlt	r3, #1
 8009380:	e7dd      	b.n	800933e <_dtoa_r+0x266>
 8009382:	2301      	movs	r3, #1
 8009384:	e7f2      	b.n	800936c <_dtoa_r+0x294>
 8009386:	2501      	movs	r5, #1
 8009388:	2300      	movs	r3, #0
 800938a:	9305      	str	r3, [sp, #20]
 800938c:	9508      	str	r5, [sp, #32]
 800938e:	f04f 39ff 	mov.w	r9, #4294967295
 8009392:	2200      	movs	r2, #0
 8009394:	f8cd 9004 	str.w	r9, [sp, #4]
 8009398:	2312      	movs	r3, #18
 800939a:	9209      	str	r2, [sp, #36]	; 0x24
 800939c:	e7cf      	b.n	800933e <_dtoa_r+0x266>
 800939e:	2301      	movs	r3, #1
 80093a0:	9308      	str	r3, [sp, #32]
 80093a2:	e7f4      	b.n	800938e <_dtoa_r+0x2b6>
 80093a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80093a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80093ac:	464b      	mov	r3, r9
 80093ae:	e7c6      	b.n	800933e <_dtoa_r+0x266>
 80093b0:	3101      	adds	r1, #1
 80093b2:	6041      	str	r1, [r0, #4]
 80093b4:	0052      	lsls	r2, r2, #1
 80093b6:	e7c6      	b.n	8009346 <_dtoa_r+0x26e>
 80093b8:	636f4361 	.word	0x636f4361
 80093bc:	3fd287a7 	.word	0x3fd287a7
 80093c0:	8b60c8b3 	.word	0x8b60c8b3
 80093c4:	3fc68a28 	.word	0x3fc68a28
 80093c8:	509f79fb 	.word	0x509f79fb
 80093cc:	3fd34413 	.word	0x3fd34413
 80093d0:	0801efae 	.word	0x0801efae
 80093d4:	0801efc5 	.word	0x0801efc5
 80093d8:	7ff00000 	.word	0x7ff00000
 80093dc:	0801efaa 	.word	0x0801efaa
 80093e0:	0801efa1 	.word	0x0801efa1
 80093e4:	0801ee25 	.word	0x0801ee25
 80093e8:	3ff80000 	.word	0x3ff80000
 80093ec:	0801f1a0 	.word	0x0801f1a0
 80093f0:	0801f024 	.word	0x0801f024
 80093f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093f6:	9a00      	ldr	r2, [sp, #0]
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	9b01      	ldr	r3, [sp, #4]
 80093fc:	2b0e      	cmp	r3, #14
 80093fe:	f200 80ad 	bhi.w	800955c <_dtoa_r+0x484>
 8009402:	2d00      	cmp	r5, #0
 8009404:	f000 80aa 	beq.w	800955c <_dtoa_r+0x484>
 8009408:	f1ba 0f00 	cmp.w	sl, #0
 800940c:	dd36      	ble.n	800947c <_dtoa_r+0x3a4>
 800940e:	4ac3      	ldr	r2, [pc, #780]	; (800971c <_dtoa_r+0x644>)
 8009410:	f00a 030f 	and.w	r3, sl, #15
 8009414:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009418:	ed93 7b00 	vldr	d7, [r3]
 800941c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009420:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009424:	eeb0 8a47 	vmov.f32	s16, s14
 8009428:	eef0 8a67 	vmov.f32	s17, s15
 800942c:	d016      	beq.n	800945c <_dtoa_r+0x384>
 800942e:	4bbc      	ldr	r3, [pc, #752]	; (8009720 <_dtoa_r+0x648>)
 8009430:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009438:	f7f7 fa08 	bl	800084c <__aeabi_ddiv>
 800943c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009440:	f007 070f 	and.w	r7, r7, #15
 8009444:	2503      	movs	r5, #3
 8009446:	4eb6      	ldr	r6, [pc, #728]	; (8009720 <_dtoa_r+0x648>)
 8009448:	b957      	cbnz	r7, 8009460 <_dtoa_r+0x388>
 800944a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800944e:	ec53 2b18 	vmov	r2, r3, d8
 8009452:	f7f7 f9fb 	bl	800084c <__aeabi_ddiv>
 8009456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800945a:	e029      	b.n	80094b0 <_dtoa_r+0x3d8>
 800945c:	2502      	movs	r5, #2
 800945e:	e7f2      	b.n	8009446 <_dtoa_r+0x36e>
 8009460:	07f9      	lsls	r1, r7, #31
 8009462:	d508      	bpl.n	8009476 <_dtoa_r+0x39e>
 8009464:	ec51 0b18 	vmov	r0, r1, d8
 8009468:	e9d6 2300 	ldrd	r2, r3, [r6]
 800946c:	f7f7 f8c4 	bl	80005f8 <__aeabi_dmul>
 8009470:	ec41 0b18 	vmov	d8, r0, r1
 8009474:	3501      	adds	r5, #1
 8009476:	107f      	asrs	r7, r7, #1
 8009478:	3608      	adds	r6, #8
 800947a:	e7e5      	b.n	8009448 <_dtoa_r+0x370>
 800947c:	f000 80a6 	beq.w	80095cc <_dtoa_r+0x4f4>
 8009480:	f1ca 0600 	rsb	r6, sl, #0
 8009484:	4ba5      	ldr	r3, [pc, #660]	; (800971c <_dtoa_r+0x644>)
 8009486:	4fa6      	ldr	r7, [pc, #664]	; (8009720 <_dtoa_r+0x648>)
 8009488:	f006 020f 	and.w	r2, r6, #15
 800948c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009498:	f7f7 f8ae 	bl	80005f8 <__aeabi_dmul>
 800949c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a0:	1136      	asrs	r6, r6, #4
 80094a2:	2300      	movs	r3, #0
 80094a4:	2502      	movs	r5, #2
 80094a6:	2e00      	cmp	r6, #0
 80094a8:	f040 8085 	bne.w	80095b6 <_dtoa_r+0x4de>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1d2      	bne.n	8009456 <_dtoa_r+0x37e>
 80094b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 808c 	beq.w	80095d0 <_dtoa_r+0x4f8>
 80094b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80094bc:	4b99      	ldr	r3, [pc, #612]	; (8009724 <_dtoa_r+0x64c>)
 80094be:	2200      	movs	r2, #0
 80094c0:	4630      	mov	r0, r6
 80094c2:	4639      	mov	r1, r7
 80094c4:	f7f7 fb0a 	bl	8000adc <__aeabi_dcmplt>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f000 8081 	beq.w	80095d0 <_dtoa_r+0x4f8>
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d07d      	beq.n	80095d0 <_dtoa_r+0x4f8>
 80094d4:	f1b9 0f00 	cmp.w	r9, #0
 80094d8:	dd3c      	ble.n	8009554 <_dtoa_r+0x47c>
 80094da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80094de:	9307      	str	r3, [sp, #28]
 80094e0:	2200      	movs	r2, #0
 80094e2:	4b91      	ldr	r3, [pc, #580]	; (8009728 <_dtoa_r+0x650>)
 80094e4:	4630      	mov	r0, r6
 80094e6:	4639      	mov	r1, r7
 80094e8:	f7f7 f886 	bl	80005f8 <__aeabi_dmul>
 80094ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094f0:	3501      	adds	r5, #1
 80094f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80094f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80094fa:	4628      	mov	r0, r5
 80094fc:	f7f7 f812 	bl	8000524 <__aeabi_i2d>
 8009500:	4632      	mov	r2, r6
 8009502:	463b      	mov	r3, r7
 8009504:	f7f7 f878 	bl	80005f8 <__aeabi_dmul>
 8009508:	4b88      	ldr	r3, [pc, #544]	; (800972c <_dtoa_r+0x654>)
 800950a:	2200      	movs	r2, #0
 800950c:	f7f6 febe 	bl	800028c <__adddf3>
 8009510:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009518:	9303      	str	r3, [sp, #12]
 800951a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800951c:	2b00      	cmp	r3, #0
 800951e:	d15c      	bne.n	80095da <_dtoa_r+0x502>
 8009520:	4b83      	ldr	r3, [pc, #524]	; (8009730 <_dtoa_r+0x658>)
 8009522:	2200      	movs	r2, #0
 8009524:	4630      	mov	r0, r6
 8009526:	4639      	mov	r1, r7
 8009528:	f7f6 feae 	bl	8000288 <__aeabi_dsub>
 800952c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009530:	4606      	mov	r6, r0
 8009532:	460f      	mov	r7, r1
 8009534:	f7f7 faf0 	bl	8000b18 <__aeabi_dcmpgt>
 8009538:	2800      	cmp	r0, #0
 800953a:	f040 8296 	bne.w	8009a6a <_dtoa_r+0x992>
 800953e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009542:	4630      	mov	r0, r6
 8009544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009548:	4639      	mov	r1, r7
 800954a:	f7f7 fac7 	bl	8000adc <__aeabi_dcmplt>
 800954e:	2800      	cmp	r0, #0
 8009550:	f040 8288 	bne.w	8009a64 <_dtoa_r+0x98c>
 8009554:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009558:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800955c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800955e:	2b00      	cmp	r3, #0
 8009560:	f2c0 8158 	blt.w	8009814 <_dtoa_r+0x73c>
 8009564:	f1ba 0f0e 	cmp.w	sl, #14
 8009568:	f300 8154 	bgt.w	8009814 <_dtoa_r+0x73c>
 800956c:	4b6b      	ldr	r3, [pc, #428]	; (800971c <_dtoa_r+0x644>)
 800956e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009572:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009578:	2b00      	cmp	r3, #0
 800957a:	f280 80e3 	bge.w	8009744 <_dtoa_r+0x66c>
 800957e:	9b01      	ldr	r3, [sp, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	f300 80df 	bgt.w	8009744 <_dtoa_r+0x66c>
 8009586:	f040 826d 	bne.w	8009a64 <_dtoa_r+0x98c>
 800958a:	4b69      	ldr	r3, [pc, #420]	; (8009730 <_dtoa_r+0x658>)
 800958c:	2200      	movs	r2, #0
 800958e:	4640      	mov	r0, r8
 8009590:	4649      	mov	r1, r9
 8009592:	f7f7 f831 	bl	80005f8 <__aeabi_dmul>
 8009596:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800959a:	f7f7 fab3 	bl	8000b04 <__aeabi_dcmpge>
 800959e:	9e01      	ldr	r6, [sp, #4]
 80095a0:	4637      	mov	r7, r6
 80095a2:	2800      	cmp	r0, #0
 80095a4:	f040 8243 	bne.w	8009a2e <_dtoa_r+0x956>
 80095a8:	9d00      	ldr	r5, [sp, #0]
 80095aa:	2331      	movs	r3, #49	; 0x31
 80095ac:	f805 3b01 	strb.w	r3, [r5], #1
 80095b0:	f10a 0a01 	add.w	sl, sl, #1
 80095b4:	e23f      	b.n	8009a36 <_dtoa_r+0x95e>
 80095b6:	07f2      	lsls	r2, r6, #31
 80095b8:	d505      	bpl.n	80095c6 <_dtoa_r+0x4ee>
 80095ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095be:	f7f7 f81b 	bl	80005f8 <__aeabi_dmul>
 80095c2:	3501      	adds	r5, #1
 80095c4:	2301      	movs	r3, #1
 80095c6:	1076      	asrs	r6, r6, #1
 80095c8:	3708      	adds	r7, #8
 80095ca:	e76c      	b.n	80094a6 <_dtoa_r+0x3ce>
 80095cc:	2502      	movs	r5, #2
 80095ce:	e76f      	b.n	80094b0 <_dtoa_r+0x3d8>
 80095d0:	9b01      	ldr	r3, [sp, #4]
 80095d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80095d6:	930c      	str	r3, [sp, #48]	; 0x30
 80095d8:	e78d      	b.n	80094f6 <_dtoa_r+0x41e>
 80095da:	9900      	ldr	r1, [sp, #0]
 80095dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80095de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095e0:	4b4e      	ldr	r3, [pc, #312]	; (800971c <_dtoa_r+0x644>)
 80095e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095e6:	4401      	add	r1, r0
 80095e8:	9102      	str	r1, [sp, #8]
 80095ea:	9908      	ldr	r1, [sp, #32]
 80095ec:	eeb0 8a47 	vmov.f32	s16, s14
 80095f0:	eef0 8a67 	vmov.f32	s17, s15
 80095f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095fc:	2900      	cmp	r1, #0
 80095fe:	d045      	beq.n	800968c <_dtoa_r+0x5b4>
 8009600:	494c      	ldr	r1, [pc, #304]	; (8009734 <_dtoa_r+0x65c>)
 8009602:	2000      	movs	r0, #0
 8009604:	f7f7 f922 	bl	800084c <__aeabi_ddiv>
 8009608:	ec53 2b18 	vmov	r2, r3, d8
 800960c:	f7f6 fe3c 	bl	8000288 <__aeabi_dsub>
 8009610:	9d00      	ldr	r5, [sp, #0]
 8009612:	ec41 0b18 	vmov	d8, r0, r1
 8009616:	4639      	mov	r1, r7
 8009618:	4630      	mov	r0, r6
 800961a:	f7f7 fa9d 	bl	8000b58 <__aeabi_d2iz>
 800961e:	900c      	str	r0, [sp, #48]	; 0x30
 8009620:	f7f6 ff80 	bl	8000524 <__aeabi_i2d>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	4630      	mov	r0, r6
 800962a:	4639      	mov	r1, r7
 800962c:	f7f6 fe2c 	bl	8000288 <__aeabi_dsub>
 8009630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009632:	3330      	adds	r3, #48	; 0x30
 8009634:	f805 3b01 	strb.w	r3, [r5], #1
 8009638:	ec53 2b18 	vmov	r2, r3, d8
 800963c:	4606      	mov	r6, r0
 800963e:	460f      	mov	r7, r1
 8009640:	f7f7 fa4c 	bl	8000adc <__aeabi_dcmplt>
 8009644:	2800      	cmp	r0, #0
 8009646:	d165      	bne.n	8009714 <_dtoa_r+0x63c>
 8009648:	4632      	mov	r2, r6
 800964a:	463b      	mov	r3, r7
 800964c:	4935      	ldr	r1, [pc, #212]	; (8009724 <_dtoa_r+0x64c>)
 800964e:	2000      	movs	r0, #0
 8009650:	f7f6 fe1a 	bl	8000288 <__aeabi_dsub>
 8009654:	ec53 2b18 	vmov	r2, r3, d8
 8009658:	f7f7 fa40 	bl	8000adc <__aeabi_dcmplt>
 800965c:	2800      	cmp	r0, #0
 800965e:	f040 80b9 	bne.w	80097d4 <_dtoa_r+0x6fc>
 8009662:	9b02      	ldr	r3, [sp, #8]
 8009664:	429d      	cmp	r5, r3
 8009666:	f43f af75 	beq.w	8009554 <_dtoa_r+0x47c>
 800966a:	4b2f      	ldr	r3, [pc, #188]	; (8009728 <_dtoa_r+0x650>)
 800966c:	ec51 0b18 	vmov	r0, r1, d8
 8009670:	2200      	movs	r2, #0
 8009672:	f7f6 ffc1 	bl	80005f8 <__aeabi_dmul>
 8009676:	4b2c      	ldr	r3, [pc, #176]	; (8009728 <_dtoa_r+0x650>)
 8009678:	ec41 0b18 	vmov	d8, r0, r1
 800967c:	2200      	movs	r2, #0
 800967e:	4630      	mov	r0, r6
 8009680:	4639      	mov	r1, r7
 8009682:	f7f6 ffb9 	bl	80005f8 <__aeabi_dmul>
 8009686:	4606      	mov	r6, r0
 8009688:	460f      	mov	r7, r1
 800968a:	e7c4      	b.n	8009616 <_dtoa_r+0x53e>
 800968c:	ec51 0b17 	vmov	r0, r1, d7
 8009690:	f7f6 ffb2 	bl	80005f8 <__aeabi_dmul>
 8009694:	9b02      	ldr	r3, [sp, #8]
 8009696:	9d00      	ldr	r5, [sp, #0]
 8009698:	930c      	str	r3, [sp, #48]	; 0x30
 800969a:	ec41 0b18 	vmov	d8, r0, r1
 800969e:	4639      	mov	r1, r7
 80096a0:	4630      	mov	r0, r6
 80096a2:	f7f7 fa59 	bl	8000b58 <__aeabi_d2iz>
 80096a6:	9011      	str	r0, [sp, #68]	; 0x44
 80096a8:	f7f6 ff3c 	bl	8000524 <__aeabi_i2d>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4630      	mov	r0, r6
 80096b2:	4639      	mov	r1, r7
 80096b4:	f7f6 fde8 	bl	8000288 <__aeabi_dsub>
 80096b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096ba:	3330      	adds	r3, #48	; 0x30
 80096bc:	f805 3b01 	strb.w	r3, [r5], #1
 80096c0:	9b02      	ldr	r3, [sp, #8]
 80096c2:	429d      	cmp	r5, r3
 80096c4:	4606      	mov	r6, r0
 80096c6:	460f      	mov	r7, r1
 80096c8:	f04f 0200 	mov.w	r2, #0
 80096cc:	d134      	bne.n	8009738 <_dtoa_r+0x660>
 80096ce:	4b19      	ldr	r3, [pc, #100]	; (8009734 <_dtoa_r+0x65c>)
 80096d0:	ec51 0b18 	vmov	r0, r1, d8
 80096d4:	f7f6 fdda 	bl	800028c <__adddf3>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4630      	mov	r0, r6
 80096de:	4639      	mov	r1, r7
 80096e0:	f7f7 fa1a 	bl	8000b18 <__aeabi_dcmpgt>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d175      	bne.n	80097d4 <_dtoa_r+0x6fc>
 80096e8:	ec53 2b18 	vmov	r2, r3, d8
 80096ec:	4911      	ldr	r1, [pc, #68]	; (8009734 <_dtoa_r+0x65c>)
 80096ee:	2000      	movs	r0, #0
 80096f0:	f7f6 fdca 	bl	8000288 <__aeabi_dsub>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	4630      	mov	r0, r6
 80096fa:	4639      	mov	r1, r7
 80096fc:	f7f7 f9ee 	bl	8000adc <__aeabi_dcmplt>
 8009700:	2800      	cmp	r0, #0
 8009702:	f43f af27 	beq.w	8009554 <_dtoa_r+0x47c>
 8009706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009708:	1e6b      	subs	r3, r5, #1
 800970a:	930c      	str	r3, [sp, #48]	; 0x30
 800970c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009710:	2b30      	cmp	r3, #48	; 0x30
 8009712:	d0f8      	beq.n	8009706 <_dtoa_r+0x62e>
 8009714:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009718:	e04a      	b.n	80097b0 <_dtoa_r+0x6d8>
 800971a:	bf00      	nop
 800971c:	0801f1a0 	.word	0x0801f1a0
 8009720:	0801f178 	.word	0x0801f178
 8009724:	3ff00000 	.word	0x3ff00000
 8009728:	40240000 	.word	0x40240000
 800972c:	401c0000 	.word	0x401c0000
 8009730:	40140000 	.word	0x40140000
 8009734:	3fe00000 	.word	0x3fe00000
 8009738:	4baf      	ldr	r3, [pc, #700]	; (80099f8 <_dtoa_r+0x920>)
 800973a:	f7f6 ff5d 	bl	80005f8 <__aeabi_dmul>
 800973e:	4606      	mov	r6, r0
 8009740:	460f      	mov	r7, r1
 8009742:	e7ac      	b.n	800969e <_dtoa_r+0x5c6>
 8009744:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009748:	9d00      	ldr	r5, [sp, #0]
 800974a:	4642      	mov	r2, r8
 800974c:	464b      	mov	r3, r9
 800974e:	4630      	mov	r0, r6
 8009750:	4639      	mov	r1, r7
 8009752:	f7f7 f87b 	bl	800084c <__aeabi_ddiv>
 8009756:	f7f7 f9ff 	bl	8000b58 <__aeabi_d2iz>
 800975a:	9002      	str	r0, [sp, #8]
 800975c:	f7f6 fee2 	bl	8000524 <__aeabi_i2d>
 8009760:	4642      	mov	r2, r8
 8009762:	464b      	mov	r3, r9
 8009764:	f7f6 ff48 	bl	80005f8 <__aeabi_dmul>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4630      	mov	r0, r6
 800976e:	4639      	mov	r1, r7
 8009770:	f7f6 fd8a 	bl	8000288 <__aeabi_dsub>
 8009774:	9e02      	ldr	r6, [sp, #8]
 8009776:	9f01      	ldr	r7, [sp, #4]
 8009778:	3630      	adds	r6, #48	; 0x30
 800977a:	f805 6b01 	strb.w	r6, [r5], #1
 800977e:	9e00      	ldr	r6, [sp, #0]
 8009780:	1bae      	subs	r6, r5, r6
 8009782:	42b7      	cmp	r7, r6
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	d137      	bne.n	80097fa <_dtoa_r+0x722>
 800978a:	f7f6 fd7f 	bl	800028c <__adddf3>
 800978e:	4642      	mov	r2, r8
 8009790:	464b      	mov	r3, r9
 8009792:	4606      	mov	r6, r0
 8009794:	460f      	mov	r7, r1
 8009796:	f7f7 f9bf 	bl	8000b18 <__aeabi_dcmpgt>
 800979a:	b9c8      	cbnz	r0, 80097d0 <_dtoa_r+0x6f8>
 800979c:	4642      	mov	r2, r8
 800979e:	464b      	mov	r3, r9
 80097a0:	4630      	mov	r0, r6
 80097a2:	4639      	mov	r1, r7
 80097a4:	f7f7 f990 	bl	8000ac8 <__aeabi_dcmpeq>
 80097a8:	b110      	cbz	r0, 80097b0 <_dtoa_r+0x6d8>
 80097aa:	9b02      	ldr	r3, [sp, #8]
 80097ac:	07d9      	lsls	r1, r3, #31
 80097ae:	d40f      	bmi.n	80097d0 <_dtoa_r+0x6f8>
 80097b0:	4620      	mov	r0, r4
 80097b2:	4659      	mov	r1, fp
 80097b4:	f000 ff50 	bl	800a658 <_Bfree>
 80097b8:	2300      	movs	r3, #0
 80097ba:	702b      	strb	r3, [r5, #0]
 80097bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097be:	f10a 0001 	add.w	r0, sl, #1
 80097c2:	6018      	str	r0, [r3, #0]
 80097c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f43f acd8 	beq.w	800917c <_dtoa_r+0xa4>
 80097cc:	601d      	str	r5, [r3, #0]
 80097ce:	e4d5      	b.n	800917c <_dtoa_r+0xa4>
 80097d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80097d4:	462b      	mov	r3, r5
 80097d6:	461d      	mov	r5, r3
 80097d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097dc:	2a39      	cmp	r2, #57	; 0x39
 80097de:	d108      	bne.n	80097f2 <_dtoa_r+0x71a>
 80097e0:	9a00      	ldr	r2, [sp, #0]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d1f7      	bne.n	80097d6 <_dtoa_r+0x6fe>
 80097e6:	9a07      	ldr	r2, [sp, #28]
 80097e8:	9900      	ldr	r1, [sp, #0]
 80097ea:	3201      	adds	r2, #1
 80097ec:	9207      	str	r2, [sp, #28]
 80097ee:	2230      	movs	r2, #48	; 0x30
 80097f0:	700a      	strb	r2, [r1, #0]
 80097f2:	781a      	ldrb	r2, [r3, #0]
 80097f4:	3201      	adds	r2, #1
 80097f6:	701a      	strb	r2, [r3, #0]
 80097f8:	e78c      	b.n	8009714 <_dtoa_r+0x63c>
 80097fa:	4b7f      	ldr	r3, [pc, #508]	; (80099f8 <_dtoa_r+0x920>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	f7f6 fefb 	bl	80005f8 <__aeabi_dmul>
 8009802:	2200      	movs	r2, #0
 8009804:	2300      	movs	r3, #0
 8009806:	4606      	mov	r6, r0
 8009808:	460f      	mov	r7, r1
 800980a:	f7f7 f95d 	bl	8000ac8 <__aeabi_dcmpeq>
 800980e:	2800      	cmp	r0, #0
 8009810:	d09b      	beq.n	800974a <_dtoa_r+0x672>
 8009812:	e7cd      	b.n	80097b0 <_dtoa_r+0x6d8>
 8009814:	9a08      	ldr	r2, [sp, #32]
 8009816:	2a00      	cmp	r2, #0
 8009818:	f000 80c4 	beq.w	80099a4 <_dtoa_r+0x8cc>
 800981c:	9a05      	ldr	r2, [sp, #20]
 800981e:	2a01      	cmp	r2, #1
 8009820:	f300 80a8 	bgt.w	8009974 <_dtoa_r+0x89c>
 8009824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009826:	2a00      	cmp	r2, #0
 8009828:	f000 80a0 	beq.w	800996c <_dtoa_r+0x894>
 800982c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009830:	9e06      	ldr	r6, [sp, #24]
 8009832:	4645      	mov	r5, r8
 8009834:	9a04      	ldr	r2, [sp, #16]
 8009836:	2101      	movs	r1, #1
 8009838:	441a      	add	r2, r3
 800983a:	4620      	mov	r0, r4
 800983c:	4498      	add	r8, r3
 800983e:	9204      	str	r2, [sp, #16]
 8009840:	f001 f810 	bl	800a864 <__i2b>
 8009844:	4607      	mov	r7, r0
 8009846:	2d00      	cmp	r5, #0
 8009848:	dd0b      	ble.n	8009862 <_dtoa_r+0x78a>
 800984a:	9b04      	ldr	r3, [sp, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	dd08      	ble.n	8009862 <_dtoa_r+0x78a>
 8009850:	42ab      	cmp	r3, r5
 8009852:	9a04      	ldr	r2, [sp, #16]
 8009854:	bfa8      	it	ge
 8009856:	462b      	movge	r3, r5
 8009858:	eba8 0803 	sub.w	r8, r8, r3
 800985c:	1aed      	subs	r5, r5, r3
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	9304      	str	r3, [sp, #16]
 8009862:	9b06      	ldr	r3, [sp, #24]
 8009864:	b1fb      	cbz	r3, 80098a6 <_dtoa_r+0x7ce>
 8009866:	9b08      	ldr	r3, [sp, #32]
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 809f 	beq.w	80099ac <_dtoa_r+0x8d4>
 800986e:	2e00      	cmp	r6, #0
 8009870:	dd11      	ble.n	8009896 <_dtoa_r+0x7be>
 8009872:	4639      	mov	r1, r7
 8009874:	4632      	mov	r2, r6
 8009876:	4620      	mov	r0, r4
 8009878:	f001 f8b0 	bl	800a9dc <__pow5mult>
 800987c:	465a      	mov	r2, fp
 800987e:	4601      	mov	r1, r0
 8009880:	4607      	mov	r7, r0
 8009882:	4620      	mov	r0, r4
 8009884:	f001 f804 	bl	800a890 <__multiply>
 8009888:	4659      	mov	r1, fp
 800988a:	9007      	str	r0, [sp, #28]
 800988c:	4620      	mov	r0, r4
 800988e:	f000 fee3 	bl	800a658 <_Bfree>
 8009892:	9b07      	ldr	r3, [sp, #28]
 8009894:	469b      	mov	fp, r3
 8009896:	9b06      	ldr	r3, [sp, #24]
 8009898:	1b9a      	subs	r2, r3, r6
 800989a:	d004      	beq.n	80098a6 <_dtoa_r+0x7ce>
 800989c:	4659      	mov	r1, fp
 800989e:	4620      	mov	r0, r4
 80098a0:	f001 f89c 	bl	800a9dc <__pow5mult>
 80098a4:	4683      	mov	fp, r0
 80098a6:	2101      	movs	r1, #1
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 ffdb 	bl	800a864 <__i2b>
 80098ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	4606      	mov	r6, r0
 80098b4:	dd7c      	ble.n	80099b0 <_dtoa_r+0x8d8>
 80098b6:	461a      	mov	r2, r3
 80098b8:	4601      	mov	r1, r0
 80098ba:	4620      	mov	r0, r4
 80098bc:	f001 f88e 	bl	800a9dc <__pow5mult>
 80098c0:	9b05      	ldr	r3, [sp, #20]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	4606      	mov	r6, r0
 80098c6:	dd76      	ble.n	80099b6 <_dtoa_r+0x8de>
 80098c8:	2300      	movs	r3, #0
 80098ca:	9306      	str	r3, [sp, #24]
 80098cc:	6933      	ldr	r3, [r6, #16]
 80098ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098d2:	6918      	ldr	r0, [r3, #16]
 80098d4:	f000 ff76 	bl	800a7c4 <__hi0bits>
 80098d8:	f1c0 0020 	rsb	r0, r0, #32
 80098dc:	9b04      	ldr	r3, [sp, #16]
 80098de:	4418      	add	r0, r3
 80098e0:	f010 001f 	ands.w	r0, r0, #31
 80098e4:	f000 8086 	beq.w	80099f4 <_dtoa_r+0x91c>
 80098e8:	f1c0 0320 	rsb	r3, r0, #32
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	dd7f      	ble.n	80099f0 <_dtoa_r+0x918>
 80098f0:	f1c0 001c 	rsb	r0, r0, #28
 80098f4:	9b04      	ldr	r3, [sp, #16]
 80098f6:	4403      	add	r3, r0
 80098f8:	4480      	add	r8, r0
 80098fa:	4405      	add	r5, r0
 80098fc:	9304      	str	r3, [sp, #16]
 80098fe:	f1b8 0f00 	cmp.w	r8, #0
 8009902:	dd05      	ble.n	8009910 <_dtoa_r+0x838>
 8009904:	4659      	mov	r1, fp
 8009906:	4642      	mov	r2, r8
 8009908:	4620      	mov	r0, r4
 800990a:	f001 f8c1 	bl	800aa90 <__lshift>
 800990e:	4683      	mov	fp, r0
 8009910:	9b04      	ldr	r3, [sp, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	dd05      	ble.n	8009922 <_dtoa_r+0x84a>
 8009916:	4631      	mov	r1, r6
 8009918:	461a      	mov	r2, r3
 800991a:	4620      	mov	r0, r4
 800991c:	f001 f8b8 	bl	800aa90 <__lshift>
 8009920:	4606      	mov	r6, r0
 8009922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009924:	2b00      	cmp	r3, #0
 8009926:	d069      	beq.n	80099fc <_dtoa_r+0x924>
 8009928:	4631      	mov	r1, r6
 800992a:	4658      	mov	r0, fp
 800992c:	f001 f91c 	bl	800ab68 <__mcmp>
 8009930:	2800      	cmp	r0, #0
 8009932:	da63      	bge.n	80099fc <_dtoa_r+0x924>
 8009934:	2300      	movs	r3, #0
 8009936:	4659      	mov	r1, fp
 8009938:	220a      	movs	r2, #10
 800993a:	4620      	mov	r0, r4
 800993c:	f000 feae 	bl	800a69c <__multadd>
 8009940:	9b08      	ldr	r3, [sp, #32]
 8009942:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009946:	4683      	mov	fp, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 818f 	beq.w	8009c6c <_dtoa_r+0xb94>
 800994e:	4639      	mov	r1, r7
 8009950:	2300      	movs	r3, #0
 8009952:	220a      	movs	r2, #10
 8009954:	4620      	mov	r0, r4
 8009956:	f000 fea1 	bl	800a69c <__multadd>
 800995a:	f1b9 0f00 	cmp.w	r9, #0
 800995e:	4607      	mov	r7, r0
 8009960:	f300 808e 	bgt.w	8009a80 <_dtoa_r+0x9a8>
 8009964:	9b05      	ldr	r3, [sp, #20]
 8009966:	2b02      	cmp	r3, #2
 8009968:	dc50      	bgt.n	8009a0c <_dtoa_r+0x934>
 800996a:	e089      	b.n	8009a80 <_dtoa_r+0x9a8>
 800996c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800996e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009972:	e75d      	b.n	8009830 <_dtoa_r+0x758>
 8009974:	9b01      	ldr	r3, [sp, #4]
 8009976:	1e5e      	subs	r6, r3, #1
 8009978:	9b06      	ldr	r3, [sp, #24]
 800997a:	42b3      	cmp	r3, r6
 800997c:	bfbf      	itttt	lt
 800997e:	9b06      	ldrlt	r3, [sp, #24]
 8009980:	9606      	strlt	r6, [sp, #24]
 8009982:	1af2      	sublt	r2, r6, r3
 8009984:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009986:	bfb6      	itet	lt
 8009988:	189b      	addlt	r3, r3, r2
 800998a:	1b9e      	subge	r6, r3, r6
 800998c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	bfb8      	it	lt
 8009992:	2600      	movlt	r6, #0
 8009994:	2b00      	cmp	r3, #0
 8009996:	bfb5      	itete	lt
 8009998:	eba8 0503 	sublt.w	r5, r8, r3
 800999c:	9b01      	ldrge	r3, [sp, #4]
 800999e:	2300      	movlt	r3, #0
 80099a0:	4645      	movge	r5, r8
 80099a2:	e747      	b.n	8009834 <_dtoa_r+0x75c>
 80099a4:	9e06      	ldr	r6, [sp, #24]
 80099a6:	9f08      	ldr	r7, [sp, #32]
 80099a8:	4645      	mov	r5, r8
 80099aa:	e74c      	b.n	8009846 <_dtoa_r+0x76e>
 80099ac:	9a06      	ldr	r2, [sp, #24]
 80099ae:	e775      	b.n	800989c <_dtoa_r+0x7c4>
 80099b0:	9b05      	ldr	r3, [sp, #20]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	dc18      	bgt.n	80099e8 <_dtoa_r+0x910>
 80099b6:	9b02      	ldr	r3, [sp, #8]
 80099b8:	b9b3      	cbnz	r3, 80099e8 <_dtoa_r+0x910>
 80099ba:	9b03      	ldr	r3, [sp, #12]
 80099bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099c0:	b9a3      	cbnz	r3, 80099ec <_dtoa_r+0x914>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099c8:	0d1b      	lsrs	r3, r3, #20
 80099ca:	051b      	lsls	r3, r3, #20
 80099cc:	b12b      	cbz	r3, 80099da <_dtoa_r+0x902>
 80099ce:	9b04      	ldr	r3, [sp, #16]
 80099d0:	3301      	adds	r3, #1
 80099d2:	9304      	str	r3, [sp, #16]
 80099d4:	f108 0801 	add.w	r8, r8, #1
 80099d8:	2301      	movs	r3, #1
 80099da:	9306      	str	r3, [sp, #24]
 80099dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f47f af74 	bne.w	80098cc <_dtoa_r+0x7f4>
 80099e4:	2001      	movs	r0, #1
 80099e6:	e779      	b.n	80098dc <_dtoa_r+0x804>
 80099e8:	2300      	movs	r3, #0
 80099ea:	e7f6      	b.n	80099da <_dtoa_r+0x902>
 80099ec:	9b02      	ldr	r3, [sp, #8]
 80099ee:	e7f4      	b.n	80099da <_dtoa_r+0x902>
 80099f0:	d085      	beq.n	80098fe <_dtoa_r+0x826>
 80099f2:	4618      	mov	r0, r3
 80099f4:	301c      	adds	r0, #28
 80099f6:	e77d      	b.n	80098f4 <_dtoa_r+0x81c>
 80099f8:	40240000 	.word	0x40240000
 80099fc:	9b01      	ldr	r3, [sp, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	dc38      	bgt.n	8009a74 <_dtoa_r+0x99c>
 8009a02:	9b05      	ldr	r3, [sp, #20]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	dd35      	ble.n	8009a74 <_dtoa_r+0x99c>
 8009a08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009a0c:	f1b9 0f00 	cmp.w	r9, #0
 8009a10:	d10d      	bne.n	8009a2e <_dtoa_r+0x956>
 8009a12:	4631      	mov	r1, r6
 8009a14:	464b      	mov	r3, r9
 8009a16:	2205      	movs	r2, #5
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f000 fe3f 	bl	800a69c <__multadd>
 8009a1e:	4601      	mov	r1, r0
 8009a20:	4606      	mov	r6, r0
 8009a22:	4658      	mov	r0, fp
 8009a24:	f001 f8a0 	bl	800ab68 <__mcmp>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f73f adbd 	bgt.w	80095a8 <_dtoa_r+0x4d0>
 8009a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a30:	9d00      	ldr	r5, [sp, #0]
 8009a32:	ea6f 0a03 	mvn.w	sl, r3
 8009a36:	f04f 0800 	mov.w	r8, #0
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 fe0b 	bl	800a658 <_Bfree>
 8009a42:	2f00      	cmp	r7, #0
 8009a44:	f43f aeb4 	beq.w	80097b0 <_dtoa_r+0x6d8>
 8009a48:	f1b8 0f00 	cmp.w	r8, #0
 8009a4c:	d005      	beq.n	8009a5a <_dtoa_r+0x982>
 8009a4e:	45b8      	cmp	r8, r7
 8009a50:	d003      	beq.n	8009a5a <_dtoa_r+0x982>
 8009a52:	4641      	mov	r1, r8
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 fdff 	bl	800a658 <_Bfree>
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f000 fdfb 	bl	800a658 <_Bfree>
 8009a62:	e6a5      	b.n	80097b0 <_dtoa_r+0x6d8>
 8009a64:	2600      	movs	r6, #0
 8009a66:	4637      	mov	r7, r6
 8009a68:	e7e1      	b.n	8009a2e <_dtoa_r+0x956>
 8009a6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009a6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009a70:	4637      	mov	r7, r6
 8009a72:	e599      	b.n	80095a8 <_dtoa_r+0x4d0>
 8009a74:	9b08      	ldr	r3, [sp, #32]
 8009a76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 80fd 	beq.w	8009c7a <_dtoa_r+0xba2>
 8009a80:	2d00      	cmp	r5, #0
 8009a82:	dd05      	ble.n	8009a90 <_dtoa_r+0x9b8>
 8009a84:	4639      	mov	r1, r7
 8009a86:	462a      	mov	r2, r5
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f001 f801 	bl	800aa90 <__lshift>
 8009a8e:	4607      	mov	r7, r0
 8009a90:	9b06      	ldr	r3, [sp, #24]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d05c      	beq.n	8009b50 <_dtoa_r+0xa78>
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 fd9d 	bl	800a5d8 <_Balloc>
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	b928      	cbnz	r0, 8009aae <_dtoa_r+0x9d6>
 8009aa2:	4b80      	ldr	r3, [pc, #512]	; (8009ca4 <_dtoa_r+0xbcc>)
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009aaa:	f7ff bb2e 	b.w	800910a <_dtoa_r+0x32>
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	3202      	adds	r2, #2
 8009ab2:	0092      	lsls	r2, r2, #2
 8009ab4:	f107 010c 	add.w	r1, r7, #12
 8009ab8:	300c      	adds	r0, #12
 8009aba:	f000 fd7f 	bl	800a5bc <memcpy>
 8009abe:	2201      	movs	r2, #1
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 ffe4 	bl	800aa90 <__lshift>
 8009ac8:	9b00      	ldr	r3, [sp, #0]
 8009aca:	3301      	adds	r3, #1
 8009acc:	9301      	str	r3, [sp, #4]
 8009ace:	9b00      	ldr	r3, [sp, #0]
 8009ad0:	444b      	add	r3, r9
 8009ad2:	9307      	str	r3, [sp, #28]
 8009ad4:	9b02      	ldr	r3, [sp, #8]
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	46b8      	mov	r8, r7
 8009adc:	9306      	str	r3, [sp, #24]
 8009ade:	4607      	mov	r7, r0
 8009ae0:	9b01      	ldr	r3, [sp, #4]
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	4658      	mov	r0, fp
 8009ae8:	9302      	str	r3, [sp, #8]
 8009aea:	f7ff fa67 	bl	8008fbc <quorem>
 8009aee:	4603      	mov	r3, r0
 8009af0:	3330      	adds	r3, #48	; 0x30
 8009af2:	9004      	str	r0, [sp, #16]
 8009af4:	4641      	mov	r1, r8
 8009af6:	4658      	mov	r0, fp
 8009af8:	9308      	str	r3, [sp, #32]
 8009afa:	f001 f835 	bl	800ab68 <__mcmp>
 8009afe:	463a      	mov	r2, r7
 8009b00:	4681      	mov	r9, r0
 8009b02:	4631      	mov	r1, r6
 8009b04:	4620      	mov	r0, r4
 8009b06:	f001 f84b 	bl	800aba0 <__mdiff>
 8009b0a:	68c2      	ldr	r2, [r0, #12]
 8009b0c:	9b08      	ldr	r3, [sp, #32]
 8009b0e:	4605      	mov	r5, r0
 8009b10:	bb02      	cbnz	r2, 8009b54 <_dtoa_r+0xa7c>
 8009b12:	4601      	mov	r1, r0
 8009b14:	4658      	mov	r0, fp
 8009b16:	f001 f827 	bl	800ab68 <__mcmp>
 8009b1a:	9b08      	ldr	r3, [sp, #32]
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	4629      	mov	r1, r5
 8009b20:	4620      	mov	r0, r4
 8009b22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009b26:	f000 fd97 	bl	800a658 <_Bfree>
 8009b2a:	9b05      	ldr	r3, [sp, #20]
 8009b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b2e:	9d01      	ldr	r5, [sp, #4]
 8009b30:	ea43 0102 	orr.w	r1, r3, r2
 8009b34:	9b06      	ldr	r3, [sp, #24]
 8009b36:	430b      	orrs	r3, r1
 8009b38:	9b08      	ldr	r3, [sp, #32]
 8009b3a:	d10d      	bne.n	8009b58 <_dtoa_r+0xa80>
 8009b3c:	2b39      	cmp	r3, #57	; 0x39
 8009b3e:	d029      	beq.n	8009b94 <_dtoa_r+0xabc>
 8009b40:	f1b9 0f00 	cmp.w	r9, #0
 8009b44:	dd01      	ble.n	8009b4a <_dtoa_r+0xa72>
 8009b46:	9b04      	ldr	r3, [sp, #16]
 8009b48:	3331      	adds	r3, #49	; 0x31
 8009b4a:	9a02      	ldr	r2, [sp, #8]
 8009b4c:	7013      	strb	r3, [r2, #0]
 8009b4e:	e774      	b.n	8009a3a <_dtoa_r+0x962>
 8009b50:	4638      	mov	r0, r7
 8009b52:	e7b9      	b.n	8009ac8 <_dtoa_r+0x9f0>
 8009b54:	2201      	movs	r2, #1
 8009b56:	e7e2      	b.n	8009b1e <_dtoa_r+0xa46>
 8009b58:	f1b9 0f00 	cmp.w	r9, #0
 8009b5c:	db06      	blt.n	8009b6c <_dtoa_r+0xa94>
 8009b5e:	9905      	ldr	r1, [sp, #20]
 8009b60:	ea41 0909 	orr.w	r9, r1, r9
 8009b64:	9906      	ldr	r1, [sp, #24]
 8009b66:	ea59 0101 	orrs.w	r1, r9, r1
 8009b6a:	d120      	bne.n	8009bae <_dtoa_r+0xad6>
 8009b6c:	2a00      	cmp	r2, #0
 8009b6e:	ddec      	ble.n	8009b4a <_dtoa_r+0xa72>
 8009b70:	4659      	mov	r1, fp
 8009b72:	2201      	movs	r2, #1
 8009b74:	4620      	mov	r0, r4
 8009b76:	9301      	str	r3, [sp, #4]
 8009b78:	f000 ff8a 	bl	800aa90 <__lshift>
 8009b7c:	4631      	mov	r1, r6
 8009b7e:	4683      	mov	fp, r0
 8009b80:	f000 fff2 	bl	800ab68 <__mcmp>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	9b01      	ldr	r3, [sp, #4]
 8009b88:	dc02      	bgt.n	8009b90 <_dtoa_r+0xab8>
 8009b8a:	d1de      	bne.n	8009b4a <_dtoa_r+0xa72>
 8009b8c:	07da      	lsls	r2, r3, #31
 8009b8e:	d5dc      	bpl.n	8009b4a <_dtoa_r+0xa72>
 8009b90:	2b39      	cmp	r3, #57	; 0x39
 8009b92:	d1d8      	bne.n	8009b46 <_dtoa_r+0xa6e>
 8009b94:	9a02      	ldr	r2, [sp, #8]
 8009b96:	2339      	movs	r3, #57	; 0x39
 8009b98:	7013      	strb	r3, [r2, #0]
 8009b9a:	462b      	mov	r3, r5
 8009b9c:	461d      	mov	r5, r3
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ba4:	2a39      	cmp	r2, #57	; 0x39
 8009ba6:	d050      	beq.n	8009c4a <_dtoa_r+0xb72>
 8009ba8:	3201      	adds	r2, #1
 8009baa:	701a      	strb	r2, [r3, #0]
 8009bac:	e745      	b.n	8009a3a <_dtoa_r+0x962>
 8009bae:	2a00      	cmp	r2, #0
 8009bb0:	dd03      	ble.n	8009bba <_dtoa_r+0xae2>
 8009bb2:	2b39      	cmp	r3, #57	; 0x39
 8009bb4:	d0ee      	beq.n	8009b94 <_dtoa_r+0xabc>
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	e7c7      	b.n	8009b4a <_dtoa_r+0xa72>
 8009bba:	9a01      	ldr	r2, [sp, #4]
 8009bbc:	9907      	ldr	r1, [sp, #28]
 8009bbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009bc2:	428a      	cmp	r2, r1
 8009bc4:	d02a      	beq.n	8009c1c <_dtoa_r+0xb44>
 8009bc6:	4659      	mov	r1, fp
 8009bc8:	2300      	movs	r3, #0
 8009bca:	220a      	movs	r2, #10
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f000 fd65 	bl	800a69c <__multadd>
 8009bd2:	45b8      	cmp	r8, r7
 8009bd4:	4683      	mov	fp, r0
 8009bd6:	f04f 0300 	mov.w	r3, #0
 8009bda:	f04f 020a 	mov.w	r2, #10
 8009bde:	4641      	mov	r1, r8
 8009be0:	4620      	mov	r0, r4
 8009be2:	d107      	bne.n	8009bf4 <_dtoa_r+0xb1c>
 8009be4:	f000 fd5a 	bl	800a69c <__multadd>
 8009be8:	4680      	mov	r8, r0
 8009bea:	4607      	mov	r7, r0
 8009bec:	9b01      	ldr	r3, [sp, #4]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	9301      	str	r3, [sp, #4]
 8009bf2:	e775      	b.n	8009ae0 <_dtoa_r+0xa08>
 8009bf4:	f000 fd52 	bl	800a69c <__multadd>
 8009bf8:	4639      	mov	r1, r7
 8009bfa:	4680      	mov	r8, r0
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	220a      	movs	r2, #10
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 fd4b 	bl	800a69c <__multadd>
 8009c06:	4607      	mov	r7, r0
 8009c08:	e7f0      	b.n	8009bec <_dtoa_r+0xb14>
 8009c0a:	f1b9 0f00 	cmp.w	r9, #0
 8009c0e:	9a00      	ldr	r2, [sp, #0]
 8009c10:	bfcc      	ite	gt
 8009c12:	464d      	movgt	r5, r9
 8009c14:	2501      	movle	r5, #1
 8009c16:	4415      	add	r5, r2
 8009c18:	f04f 0800 	mov.w	r8, #0
 8009c1c:	4659      	mov	r1, fp
 8009c1e:	2201      	movs	r2, #1
 8009c20:	4620      	mov	r0, r4
 8009c22:	9301      	str	r3, [sp, #4]
 8009c24:	f000 ff34 	bl	800aa90 <__lshift>
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4683      	mov	fp, r0
 8009c2c:	f000 ff9c 	bl	800ab68 <__mcmp>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	dcb2      	bgt.n	8009b9a <_dtoa_r+0xac2>
 8009c34:	d102      	bne.n	8009c3c <_dtoa_r+0xb64>
 8009c36:	9b01      	ldr	r3, [sp, #4]
 8009c38:	07db      	lsls	r3, r3, #31
 8009c3a:	d4ae      	bmi.n	8009b9a <_dtoa_r+0xac2>
 8009c3c:	462b      	mov	r3, r5
 8009c3e:	461d      	mov	r5, r3
 8009c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c44:	2a30      	cmp	r2, #48	; 0x30
 8009c46:	d0fa      	beq.n	8009c3e <_dtoa_r+0xb66>
 8009c48:	e6f7      	b.n	8009a3a <_dtoa_r+0x962>
 8009c4a:	9a00      	ldr	r2, [sp, #0]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d1a5      	bne.n	8009b9c <_dtoa_r+0xac4>
 8009c50:	f10a 0a01 	add.w	sl, sl, #1
 8009c54:	2331      	movs	r3, #49	; 0x31
 8009c56:	e779      	b.n	8009b4c <_dtoa_r+0xa74>
 8009c58:	4b13      	ldr	r3, [pc, #76]	; (8009ca8 <_dtoa_r+0xbd0>)
 8009c5a:	f7ff baaf 	b.w	80091bc <_dtoa_r+0xe4>
 8009c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f47f aa86 	bne.w	8009172 <_dtoa_r+0x9a>
 8009c66:	4b11      	ldr	r3, [pc, #68]	; (8009cac <_dtoa_r+0xbd4>)
 8009c68:	f7ff baa8 	b.w	80091bc <_dtoa_r+0xe4>
 8009c6c:	f1b9 0f00 	cmp.w	r9, #0
 8009c70:	dc03      	bgt.n	8009c7a <_dtoa_r+0xba2>
 8009c72:	9b05      	ldr	r3, [sp, #20]
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	f73f aec9 	bgt.w	8009a0c <_dtoa_r+0x934>
 8009c7a:	9d00      	ldr	r5, [sp, #0]
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4658      	mov	r0, fp
 8009c80:	f7ff f99c 	bl	8008fbc <quorem>
 8009c84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009c88:	f805 3b01 	strb.w	r3, [r5], #1
 8009c8c:	9a00      	ldr	r2, [sp, #0]
 8009c8e:	1aaa      	subs	r2, r5, r2
 8009c90:	4591      	cmp	r9, r2
 8009c92:	ddba      	ble.n	8009c0a <_dtoa_r+0xb32>
 8009c94:	4659      	mov	r1, fp
 8009c96:	2300      	movs	r3, #0
 8009c98:	220a      	movs	r2, #10
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f000 fcfe 	bl	800a69c <__multadd>
 8009ca0:	4683      	mov	fp, r0
 8009ca2:	e7eb      	b.n	8009c7c <_dtoa_r+0xba4>
 8009ca4:	0801f024 	.word	0x0801f024
 8009ca8:	0801ee24 	.word	0x0801ee24
 8009cac:	0801efa1 	.word	0x0801efa1

08009cb0 <std>:
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	b510      	push	{r4, lr}
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8009cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cbe:	6083      	str	r3, [r0, #8]
 8009cc0:	8181      	strh	r1, [r0, #12]
 8009cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8009cc4:	81c2      	strh	r2, [r0, #14]
 8009cc6:	6183      	str	r3, [r0, #24]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	2208      	movs	r2, #8
 8009ccc:	305c      	adds	r0, #92	; 0x5c
 8009cce:	f7fd fc03 	bl	80074d8 <memset>
 8009cd2:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <std+0x38>)
 8009cd4:	6263      	str	r3, [r4, #36]	; 0x24
 8009cd6:	4b05      	ldr	r3, [pc, #20]	; (8009cec <std+0x3c>)
 8009cd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cda:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <std+0x40>)
 8009cdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cde:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <std+0x44>)
 8009ce0:	6224      	str	r4, [r4, #32]
 8009ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ce4:	bd10      	pop	{r4, pc}
 8009ce6:	bf00      	nop
 8009ce8:	0800b661 	.word	0x0800b661
 8009cec:	0800b683 	.word	0x0800b683
 8009cf0:	0800b6bb 	.word	0x0800b6bb
 8009cf4:	0800b6df 	.word	0x0800b6df

08009cf8 <_cleanup_r>:
 8009cf8:	4901      	ldr	r1, [pc, #4]	; (8009d00 <_cleanup_r+0x8>)
 8009cfa:	f000 b8af 	b.w	8009e5c <_fwalk_reent>
 8009cfe:	bf00      	nop
 8009d00:	0800ba35 	.word	0x0800ba35

08009d04 <__sfmoreglue>:
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	1e4a      	subs	r2, r1, #1
 8009d08:	2568      	movs	r5, #104	; 0x68
 8009d0a:	4355      	muls	r5, r2
 8009d0c:	460e      	mov	r6, r1
 8009d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d12:	f001 f97b 	bl	800b00c <_malloc_r>
 8009d16:	4604      	mov	r4, r0
 8009d18:	b140      	cbz	r0, 8009d2c <__sfmoreglue+0x28>
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8009d20:	300c      	adds	r0, #12
 8009d22:	60a0      	str	r0, [r4, #8]
 8009d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d28:	f7fd fbd6 	bl	80074d8 <memset>
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}

08009d30 <__sfp_lock_acquire>:
 8009d30:	4801      	ldr	r0, [pc, #4]	; (8009d38 <__sfp_lock_acquire+0x8>)
 8009d32:	f000 bc26 	b.w	800a582 <__retarget_lock_acquire_recursive>
 8009d36:	bf00      	nop
 8009d38:	2000236c 	.word	0x2000236c

08009d3c <__sfp_lock_release>:
 8009d3c:	4801      	ldr	r0, [pc, #4]	; (8009d44 <__sfp_lock_release+0x8>)
 8009d3e:	f000 bc21 	b.w	800a584 <__retarget_lock_release_recursive>
 8009d42:	bf00      	nop
 8009d44:	2000236c 	.word	0x2000236c

08009d48 <__sinit_lock_acquire>:
 8009d48:	4801      	ldr	r0, [pc, #4]	; (8009d50 <__sinit_lock_acquire+0x8>)
 8009d4a:	f000 bc1a 	b.w	800a582 <__retarget_lock_acquire_recursive>
 8009d4e:	bf00      	nop
 8009d50:	20002367 	.word	0x20002367

08009d54 <__sinit_lock_release>:
 8009d54:	4801      	ldr	r0, [pc, #4]	; (8009d5c <__sinit_lock_release+0x8>)
 8009d56:	f000 bc15 	b.w	800a584 <__retarget_lock_release_recursive>
 8009d5a:	bf00      	nop
 8009d5c:	20002367 	.word	0x20002367

08009d60 <__sinit>:
 8009d60:	b510      	push	{r4, lr}
 8009d62:	4604      	mov	r4, r0
 8009d64:	f7ff fff0 	bl	8009d48 <__sinit_lock_acquire>
 8009d68:	69a3      	ldr	r3, [r4, #24]
 8009d6a:	b11b      	cbz	r3, 8009d74 <__sinit+0x14>
 8009d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d70:	f7ff bff0 	b.w	8009d54 <__sinit_lock_release>
 8009d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d78:	6523      	str	r3, [r4, #80]	; 0x50
 8009d7a:	4b13      	ldr	r3, [pc, #76]	; (8009dc8 <__sinit+0x68>)
 8009d7c:	4a13      	ldr	r2, [pc, #76]	; (8009dcc <__sinit+0x6c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d82:	42a3      	cmp	r3, r4
 8009d84:	bf04      	itt	eq
 8009d86:	2301      	moveq	r3, #1
 8009d88:	61a3      	streq	r3, [r4, #24]
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f000 f820 	bl	8009dd0 <__sfp>
 8009d90:	6060      	str	r0, [r4, #4]
 8009d92:	4620      	mov	r0, r4
 8009d94:	f000 f81c 	bl	8009dd0 <__sfp>
 8009d98:	60a0      	str	r0, [r4, #8]
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f000 f818 	bl	8009dd0 <__sfp>
 8009da0:	2200      	movs	r2, #0
 8009da2:	60e0      	str	r0, [r4, #12]
 8009da4:	2104      	movs	r1, #4
 8009da6:	6860      	ldr	r0, [r4, #4]
 8009da8:	f7ff ff82 	bl	8009cb0 <std>
 8009dac:	68a0      	ldr	r0, [r4, #8]
 8009dae:	2201      	movs	r2, #1
 8009db0:	2109      	movs	r1, #9
 8009db2:	f7ff ff7d 	bl	8009cb0 <std>
 8009db6:	68e0      	ldr	r0, [r4, #12]
 8009db8:	2202      	movs	r2, #2
 8009dba:	2112      	movs	r1, #18
 8009dbc:	f7ff ff78 	bl	8009cb0 <std>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	61a3      	str	r3, [r4, #24]
 8009dc4:	e7d2      	b.n	8009d6c <__sinit+0xc>
 8009dc6:	bf00      	nop
 8009dc8:	0801ee10 	.word	0x0801ee10
 8009dcc:	08009cf9 	.word	0x08009cf9

08009dd0 <__sfp>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	4607      	mov	r7, r0
 8009dd4:	f7ff ffac 	bl	8009d30 <__sfp_lock_acquire>
 8009dd8:	4b1e      	ldr	r3, [pc, #120]	; (8009e54 <__sfp+0x84>)
 8009dda:	681e      	ldr	r6, [r3, #0]
 8009ddc:	69b3      	ldr	r3, [r6, #24]
 8009dde:	b913      	cbnz	r3, 8009de6 <__sfp+0x16>
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7ff ffbd 	bl	8009d60 <__sinit>
 8009de6:	3648      	adds	r6, #72	; 0x48
 8009de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	d503      	bpl.n	8009df8 <__sfp+0x28>
 8009df0:	6833      	ldr	r3, [r6, #0]
 8009df2:	b30b      	cbz	r3, 8009e38 <__sfp+0x68>
 8009df4:	6836      	ldr	r6, [r6, #0]
 8009df6:	e7f7      	b.n	8009de8 <__sfp+0x18>
 8009df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009dfc:	b9d5      	cbnz	r5, 8009e34 <__sfp+0x64>
 8009dfe:	4b16      	ldr	r3, [pc, #88]	; (8009e58 <__sfp+0x88>)
 8009e00:	60e3      	str	r3, [r4, #12]
 8009e02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e06:	6665      	str	r5, [r4, #100]	; 0x64
 8009e08:	f000 fbba 	bl	800a580 <__retarget_lock_init_recursive>
 8009e0c:	f7ff ff96 	bl	8009d3c <__sfp_lock_release>
 8009e10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e18:	6025      	str	r5, [r4, #0]
 8009e1a:	61a5      	str	r5, [r4, #24]
 8009e1c:	2208      	movs	r2, #8
 8009e1e:	4629      	mov	r1, r5
 8009e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e24:	f7fd fb58 	bl	80074d8 <memset>
 8009e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e30:	4620      	mov	r0, r4
 8009e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e34:	3468      	adds	r4, #104	; 0x68
 8009e36:	e7d9      	b.n	8009dec <__sfp+0x1c>
 8009e38:	2104      	movs	r1, #4
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	f7ff ff62 	bl	8009d04 <__sfmoreglue>
 8009e40:	4604      	mov	r4, r0
 8009e42:	6030      	str	r0, [r6, #0]
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d1d5      	bne.n	8009df4 <__sfp+0x24>
 8009e48:	f7ff ff78 	bl	8009d3c <__sfp_lock_release>
 8009e4c:	230c      	movs	r3, #12
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	e7ee      	b.n	8009e30 <__sfp+0x60>
 8009e52:	bf00      	nop
 8009e54:	0801ee10 	.word	0x0801ee10
 8009e58:	ffff0001 	.word	0xffff0001

08009e5c <_fwalk_reent>:
 8009e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e60:	4606      	mov	r6, r0
 8009e62:	4688      	mov	r8, r1
 8009e64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e68:	2700      	movs	r7, #0
 8009e6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e6e:	f1b9 0901 	subs.w	r9, r9, #1
 8009e72:	d505      	bpl.n	8009e80 <_fwalk_reent+0x24>
 8009e74:	6824      	ldr	r4, [r4, #0]
 8009e76:	2c00      	cmp	r4, #0
 8009e78:	d1f7      	bne.n	8009e6a <_fwalk_reent+0xe>
 8009e7a:	4638      	mov	r0, r7
 8009e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e80:	89ab      	ldrh	r3, [r5, #12]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d907      	bls.n	8009e96 <_fwalk_reent+0x3a>
 8009e86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	d003      	beq.n	8009e96 <_fwalk_reent+0x3a>
 8009e8e:	4629      	mov	r1, r5
 8009e90:	4630      	mov	r0, r6
 8009e92:	47c0      	blx	r8
 8009e94:	4307      	orrs	r7, r0
 8009e96:	3568      	adds	r5, #104	; 0x68
 8009e98:	e7e9      	b.n	8009e6e <_fwalk_reent+0x12>

08009e9a <rshift>:
 8009e9a:	6903      	ldr	r3, [r0, #16]
 8009e9c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ea4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ea8:	f100 0414 	add.w	r4, r0, #20
 8009eac:	dd45      	ble.n	8009f3a <rshift+0xa0>
 8009eae:	f011 011f 	ands.w	r1, r1, #31
 8009eb2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009eb6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009eba:	d10c      	bne.n	8009ed6 <rshift+0x3c>
 8009ebc:	f100 0710 	add.w	r7, r0, #16
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	42b1      	cmp	r1, r6
 8009ec4:	d334      	bcc.n	8009f30 <rshift+0x96>
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	1eea      	subs	r2, r5, #3
 8009ecc:	4296      	cmp	r6, r2
 8009ece:	bf38      	it	cc
 8009ed0:	2300      	movcc	r3, #0
 8009ed2:	4423      	add	r3, r4
 8009ed4:	e015      	b.n	8009f02 <rshift+0x68>
 8009ed6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009eda:	f1c1 0820 	rsb	r8, r1, #32
 8009ede:	40cf      	lsrs	r7, r1
 8009ee0:	f105 0e04 	add.w	lr, r5, #4
 8009ee4:	46a1      	mov	r9, r4
 8009ee6:	4576      	cmp	r6, lr
 8009ee8:	46f4      	mov	ip, lr
 8009eea:	d815      	bhi.n	8009f18 <rshift+0x7e>
 8009eec:	1a9b      	subs	r3, r3, r2
 8009eee:	009a      	lsls	r2, r3, #2
 8009ef0:	3a04      	subs	r2, #4
 8009ef2:	3501      	adds	r5, #1
 8009ef4:	42ae      	cmp	r6, r5
 8009ef6:	bf38      	it	cc
 8009ef8:	2200      	movcc	r2, #0
 8009efa:	18a3      	adds	r3, r4, r2
 8009efc:	50a7      	str	r7, [r4, r2]
 8009efe:	b107      	cbz	r7, 8009f02 <rshift+0x68>
 8009f00:	3304      	adds	r3, #4
 8009f02:	1b1a      	subs	r2, r3, r4
 8009f04:	42a3      	cmp	r3, r4
 8009f06:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f0a:	bf08      	it	eq
 8009f0c:	2300      	moveq	r3, #0
 8009f0e:	6102      	str	r2, [r0, #16]
 8009f10:	bf08      	it	eq
 8009f12:	6143      	streq	r3, [r0, #20]
 8009f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f18:	f8dc c000 	ldr.w	ip, [ip]
 8009f1c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f20:	ea4c 0707 	orr.w	r7, ip, r7
 8009f24:	f849 7b04 	str.w	r7, [r9], #4
 8009f28:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f2c:	40cf      	lsrs	r7, r1
 8009f2e:	e7da      	b.n	8009ee6 <rshift+0x4c>
 8009f30:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f34:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f38:	e7c3      	b.n	8009ec2 <rshift+0x28>
 8009f3a:	4623      	mov	r3, r4
 8009f3c:	e7e1      	b.n	8009f02 <rshift+0x68>

08009f3e <__hexdig_fun>:
 8009f3e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009f42:	2b09      	cmp	r3, #9
 8009f44:	d802      	bhi.n	8009f4c <__hexdig_fun+0xe>
 8009f46:	3820      	subs	r0, #32
 8009f48:	b2c0      	uxtb	r0, r0
 8009f4a:	4770      	bx	lr
 8009f4c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009f50:	2b05      	cmp	r3, #5
 8009f52:	d801      	bhi.n	8009f58 <__hexdig_fun+0x1a>
 8009f54:	3847      	subs	r0, #71	; 0x47
 8009f56:	e7f7      	b.n	8009f48 <__hexdig_fun+0xa>
 8009f58:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009f5c:	2b05      	cmp	r3, #5
 8009f5e:	d801      	bhi.n	8009f64 <__hexdig_fun+0x26>
 8009f60:	3827      	subs	r0, #39	; 0x27
 8009f62:	e7f1      	b.n	8009f48 <__hexdig_fun+0xa>
 8009f64:	2000      	movs	r0, #0
 8009f66:	4770      	bx	lr

08009f68 <__gethex>:
 8009f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6c:	ed2d 8b02 	vpush	{d8}
 8009f70:	b089      	sub	sp, #36	; 0x24
 8009f72:	ee08 0a10 	vmov	s16, r0
 8009f76:	9304      	str	r3, [sp, #16]
 8009f78:	4bbc      	ldr	r3, [pc, #752]	; (800a26c <__gethex+0x304>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	9301      	str	r3, [sp, #4]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	468b      	mov	fp, r1
 8009f82:	4690      	mov	r8, r2
 8009f84:	f7f6 f924 	bl	80001d0 <strlen>
 8009f88:	9b01      	ldr	r3, [sp, #4]
 8009f8a:	f8db 2000 	ldr.w	r2, [fp]
 8009f8e:	4403      	add	r3, r0
 8009f90:	4682      	mov	sl, r0
 8009f92:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009f96:	9305      	str	r3, [sp, #20]
 8009f98:	1c93      	adds	r3, r2, #2
 8009f9a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009f9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009fa2:	32fe      	adds	r2, #254	; 0xfe
 8009fa4:	18d1      	adds	r1, r2, r3
 8009fa6:	461f      	mov	r7, r3
 8009fa8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009fac:	9100      	str	r1, [sp, #0]
 8009fae:	2830      	cmp	r0, #48	; 0x30
 8009fb0:	d0f8      	beq.n	8009fa4 <__gethex+0x3c>
 8009fb2:	f7ff ffc4 	bl	8009f3e <__hexdig_fun>
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d13a      	bne.n	800a032 <__gethex+0xca>
 8009fbc:	9901      	ldr	r1, [sp, #4]
 8009fbe:	4652      	mov	r2, sl
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	f001 fb90 	bl	800b6e6 <strncmp>
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d168      	bne.n	800a09e <__gethex+0x136>
 8009fcc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009fd0:	eb07 060a 	add.w	r6, r7, sl
 8009fd4:	f7ff ffb3 	bl	8009f3e <__hexdig_fun>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d062      	beq.n	800a0a2 <__gethex+0x13a>
 8009fdc:	4633      	mov	r3, r6
 8009fde:	7818      	ldrb	r0, [r3, #0]
 8009fe0:	2830      	cmp	r0, #48	; 0x30
 8009fe2:	461f      	mov	r7, r3
 8009fe4:	f103 0301 	add.w	r3, r3, #1
 8009fe8:	d0f9      	beq.n	8009fde <__gethex+0x76>
 8009fea:	f7ff ffa8 	bl	8009f3e <__hexdig_fun>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	fab0 f480 	clz	r4, r0
 8009ff4:	0964      	lsrs	r4, r4, #5
 8009ff6:	4635      	mov	r5, r6
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	463a      	mov	r2, r7
 8009ffc:	4616      	mov	r6, r2
 8009ffe:	3201      	adds	r2, #1
 800a000:	7830      	ldrb	r0, [r6, #0]
 800a002:	f7ff ff9c 	bl	8009f3e <__hexdig_fun>
 800a006:	2800      	cmp	r0, #0
 800a008:	d1f8      	bne.n	8009ffc <__gethex+0x94>
 800a00a:	9901      	ldr	r1, [sp, #4]
 800a00c:	4652      	mov	r2, sl
 800a00e:	4630      	mov	r0, r6
 800a010:	f001 fb69 	bl	800b6e6 <strncmp>
 800a014:	b980      	cbnz	r0, 800a038 <__gethex+0xd0>
 800a016:	b94d      	cbnz	r5, 800a02c <__gethex+0xc4>
 800a018:	eb06 050a 	add.w	r5, r6, sl
 800a01c:	462a      	mov	r2, r5
 800a01e:	4616      	mov	r6, r2
 800a020:	3201      	adds	r2, #1
 800a022:	7830      	ldrb	r0, [r6, #0]
 800a024:	f7ff ff8b 	bl	8009f3e <__hexdig_fun>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d1f8      	bne.n	800a01e <__gethex+0xb6>
 800a02c:	1bad      	subs	r5, r5, r6
 800a02e:	00ad      	lsls	r5, r5, #2
 800a030:	e004      	b.n	800a03c <__gethex+0xd4>
 800a032:	2400      	movs	r4, #0
 800a034:	4625      	mov	r5, r4
 800a036:	e7e0      	b.n	8009ffa <__gethex+0x92>
 800a038:	2d00      	cmp	r5, #0
 800a03a:	d1f7      	bne.n	800a02c <__gethex+0xc4>
 800a03c:	7833      	ldrb	r3, [r6, #0]
 800a03e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a042:	2b50      	cmp	r3, #80	; 0x50
 800a044:	d13b      	bne.n	800a0be <__gethex+0x156>
 800a046:	7873      	ldrb	r3, [r6, #1]
 800a048:	2b2b      	cmp	r3, #43	; 0x2b
 800a04a:	d02c      	beq.n	800a0a6 <__gethex+0x13e>
 800a04c:	2b2d      	cmp	r3, #45	; 0x2d
 800a04e:	d02e      	beq.n	800a0ae <__gethex+0x146>
 800a050:	1c71      	adds	r1, r6, #1
 800a052:	f04f 0900 	mov.w	r9, #0
 800a056:	7808      	ldrb	r0, [r1, #0]
 800a058:	f7ff ff71 	bl	8009f3e <__hexdig_fun>
 800a05c:	1e43      	subs	r3, r0, #1
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b18      	cmp	r3, #24
 800a062:	d82c      	bhi.n	800a0be <__gethex+0x156>
 800a064:	f1a0 0210 	sub.w	r2, r0, #16
 800a068:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a06c:	f7ff ff67 	bl	8009f3e <__hexdig_fun>
 800a070:	1e43      	subs	r3, r0, #1
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b18      	cmp	r3, #24
 800a076:	d91d      	bls.n	800a0b4 <__gethex+0x14c>
 800a078:	f1b9 0f00 	cmp.w	r9, #0
 800a07c:	d000      	beq.n	800a080 <__gethex+0x118>
 800a07e:	4252      	negs	r2, r2
 800a080:	4415      	add	r5, r2
 800a082:	f8cb 1000 	str.w	r1, [fp]
 800a086:	b1e4      	cbz	r4, 800a0c2 <__gethex+0x15a>
 800a088:	9b00      	ldr	r3, [sp, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	bf14      	ite	ne
 800a08e:	2700      	movne	r7, #0
 800a090:	2706      	moveq	r7, #6
 800a092:	4638      	mov	r0, r7
 800a094:	b009      	add	sp, #36	; 0x24
 800a096:	ecbd 8b02 	vpop	{d8}
 800a09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09e:	463e      	mov	r6, r7
 800a0a0:	4625      	mov	r5, r4
 800a0a2:	2401      	movs	r4, #1
 800a0a4:	e7ca      	b.n	800a03c <__gethex+0xd4>
 800a0a6:	f04f 0900 	mov.w	r9, #0
 800a0aa:	1cb1      	adds	r1, r6, #2
 800a0ac:	e7d3      	b.n	800a056 <__gethex+0xee>
 800a0ae:	f04f 0901 	mov.w	r9, #1
 800a0b2:	e7fa      	b.n	800a0aa <__gethex+0x142>
 800a0b4:	230a      	movs	r3, #10
 800a0b6:	fb03 0202 	mla	r2, r3, r2, r0
 800a0ba:	3a10      	subs	r2, #16
 800a0bc:	e7d4      	b.n	800a068 <__gethex+0x100>
 800a0be:	4631      	mov	r1, r6
 800a0c0:	e7df      	b.n	800a082 <__gethex+0x11a>
 800a0c2:	1bf3      	subs	r3, r6, r7
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	2b07      	cmp	r3, #7
 800a0ca:	dc0b      	bgt.n	800a0e4 <__gethex+0x17c>
 800a0cc:	ee18 0a10 	vmov	r0, s16
 800a0d0:	f000 fa82 	bl	800a5d8 <_Balloc>
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	b940      	cbnz	r0, 800a0ea <__gethex+0x182>
 800a0d8:	4b65      	ldr	r3, [pc, #404]	; (800a270 <__gethex+0x308>)
 800a0da:	4602      	mov	r2, r0
 800a0dc:	21de      	movs	r1, #222	; 0xde
 800a0de:	4865      	ldr	r0, [pc, #404]	; (800a274 <__gethex+0x30c>)
 800a0e0:	f001 fbf4 	bl	800b8cc <__assert_func>
 800a0e4:	3101      	adds	r1, #1
 800a0e6:	105b      	asrs	r3, r3, #1
 800a0e8:	e7ee      	b.n	800a0c8 <__gethex+0x160>
 800a0ea:	f100 0914 	add.w	r9, r0, #20
 800a0ee:	f04f 0b00 	mov.w	fp, #0
 800a0f2:	f1ca 0301 	rsb	r3, sl, #1
 800a0f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0fa:	f8cd b000 	str.w	fp, [sp]
 800a0fe:	9306      	str	r3, [sp, #24]
 800a100:	42b7      	cmp	r7, r6
 800a102:	d340      	bcc.n	800a186 <__gethex+0x21e>
 800a104:	9802      	ldr	r0, [sp, #8]
 800a106:	9b00      	ldr	r3, [sp, #0]
 800a108:	f840 3b04 	str.w	r3, [r0], #4
 800a10c:	eba0 0009 	sub.w	r0, r0, r9
 800a110:	1080      	asrs	r0, r0, #2
 800a112:	0146      	lsls	r6, r0, #5
 800a114:	6120      	str	r0, [r4, #16]
 800a116:	4618      	mov	r0, r3
 800a118:	f000 fb54 	bl	800a7c4 <__hi0bits>
 800a11c:	1a30      	subs	r0, r6, r0
 800a11e:	f8d8 6000 	ldr.w	r6, [r8]
 800a122:	42b0      	cmp	r0, r6
 800a124:	dd63      	ble.n	800a1ee <__gethex+0x286>
 800a126:	1b87      	subs	r7, r0, r6
 800a128:	4639      	mov	r1, r7
 800a12a:	4620      	mov	r0, r4
 800a12c:	f000 feee 	bl	800af0c <__any_on>
 800a130:	4682      	mov	sl, r0
 800a132:	b1a8      	cbz	r0, 800a160 <__gethex+0x1f8>
 800a134:	1e7b      	subs	r3, r7, #1
 800a136:	1159      	asrs	r1, r3, #5
 800a138:	f003 021f 	and.w	r2, r3, #31
 800a13c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a140:	f04f 0a01 	mov.w	sl, #1
 800a144:	fa0a f202 	lsl.w	r2, sl, r2
 800a148:	420a      	tst	r2, r1
 800a14a:	d009      	beq.n	800a160 <__gethex+0x1f8>
 800a14c:	4553      	cmp	r3, sl
 800a14e:	dd05      	ble.n	800a15c <__gethex+0x1f4>
 800a150:	1eb9      	subs	r1, r7, #2
 800a152:	4620      	mov	r0, r4
 800a154:	f000 feda 	bl	800af0c <__any_on>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d145      	bne.n	800a1e8 <__gethex+0x280>
 800a15c:	f04f 0a02 	mov.w	sl, #2
 800a160:	4639      	mov	r1, r7
 800a162:	4620      	mov	r0, r4
 800a164:	f7ff fe99 	bl	8009e9a <rshift>
 800a168:	443d      	add	r5, r7
 800a16a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a16e:	42ab      	cmp	r3, r5
 800a170:	da4c      	bge.n	800a20c <__gethex+0x2a4>
 800a172:	ee18 0a10 	vmov	r0, s16
 800a176:	4621      	mov	r1, r4
 800a178:	f000 fa6e 	bl	800a658 <_Bfree>
 800a17c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a17e:	2300      	movs	r3, #0
 800a180:	6013      	str	r3, [r2, #0]
 800a182:	27a3      	movs	r7, #163	; 0xa3
 800a184:	e785      	b.n	800a092 <__gethex+0x12a>
 800a186:	1e73      	subs	r3, r6, #1
 800a188:	9a05      	ldr	r2, [sp, #20]
 800a18a:	9303      	str	r3, [sp, #12]
 800a18c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a190:	4293      	cmp	r3, r2
 800a192:	d019      	beq.n	800a1c8 <__gethex+0x260>
 800a194:	f1bb 0f20 	cmp.w	fp, #32
 800a198:	d107      	bne.n	800a1aa <__gethex+0x242>
 800a19a:	9b02      	ldr	r3, [sp, #8]
 800a19c:	9a00      	ldr	r2, [sp, #0]
 800a19e:	f843 2b04 	str.w	r2, [r3], #4
 800a1a2:	9302      	str	r3, [sp, #8]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	469b      	mov	fp, r3
 800a1aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a1ae:	f7ff fec6 	bl	8009f3e <__hexdig_fun>
 800a1b2:	9b00      	ldr	r3, [sp, #0]
 800a1b4:	f000 000f 	and.w	r0, r0, #15
 800a1b8:	fa00 f00b 	lsl.w	r0, r0, fp
 800a1bc:	4303      	orrs	r3, r0
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	f10b 0b04 	add.w	fp, fp, #4
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	e00d      	b.n	800a1e4 <__gethex+0x27c>
 800a1c8:	9b03      	ldr	r3, [sp, #12]
 800a1ca:	9a06      	ldr	r2, [sp, #24]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	42bb      	cmp	r3, r7
 800a1d0:	d3e0      	bcc.n	800a194 <__gethex+0x22c>
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	9901      	ldr	r1, [sp, #4]
 800a1d6:	9307      	str	r3, [sp, #28]
 800a1d8:	4652      	mov	r2, sl
 800a1da:	f001 fa84 	bl	800b6e6 <strncmp>
 800a1de:	9b07      	ldr	r3, [sp, #28]
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d1d7      	bne.n	800a194 <__gethex+0x22c>
 800a1e4:	461e      	mov	r6, r3
 800a1e6:	e78b      	b.n	800a100 <__gethex+0x198>
 800a1e8:	f04f 0a03 	mov.w	sl, #3
 800a1ec:	e7b8      	b.n	800a160 <__gethex+0x1f8>
 800a1ee:	da0a      	bge.n	800a206 <__gethex+0x29e>
 800a1f0:	1a37      	subs	r7, r6, r0
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	ee18 0a10 	vmov	r0, s16
 800a1f8:	463a      	mov	r2, r7
 800a1fa:	f000 fc49 	bl	800aa90 <__lshift>
 800a1fe:	1bed      	subs	r5, r5, r7
 800a200:	4604      	mov	r4, r0
 800a202:	f100 0914 	add.w	r9, r0, #20
 800a206:	f04f 0a00 	mov.w	sl, #0
 800a20a:	e7ae      	b.n	800a16a <__gethex+0x202>
 800a20c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a210:	42a8      	cmp	r0, r5
 800a212:	dd72      	ble.n	800a2fa <__gethex+0x392>
 800a214:	1b45      	subs	r5, r0, r5
 800a216:	42ae      	cmp	r6, r5
 800a218:	dc36      	bgt.n	800a288 <__gethex+0x320>
 800a21a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d02a      	beq.n	800a278 <__gethex+0x310>
 800a222:	2b03      	cmp	r3, #3
 800a224:	d02c      	beq.n	800a280 <__gethex+0x318>
 800a226:	2b01      	cmp	r3, #1
 800a228:	d115      	bne.n	800a256 <__gethex+0x2ee>
 800a22a:	42ae      	cmp	r6, r5
 800a22c:	d113      	bne.n	800a256 <__gethex+0x2ee>
 800a22e:	2e01      	cmp	r6, #1
 800a230:	d10b      	bne.n	800a24a <__gethex+0x2e2>
 800a232:	9a04      	ldr	r2, [sp, #16]
 800a234:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a238:	6013      	str	r3, [r2, #0]
 800a23a:	2301      	movs	r3, #1
 800a23c:	6123      	str	r3, [r4, #16]
 800a23e:	f8c9 3000 	str.w	r3, [r9]
 800a242:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a244:	2762      	movs	r7, #98	; 0x62
 800a246:	601c      	str	r4, [r3, #0]
 800a248:	e723      	b.n	800a092 <__gethex+0x12a>
 800a24a:	1e71      	subs	r1, r6, #1
 800a24c:	4620      	mov	r0, r4
 800a24e:	f000 fe5d 	bl	800af0c <__any_on>
 800a252:	2800      	cmp	r0, #0
 800a254:	d1ed      	bne.n	800a232 <__gethex+0x2ca>
 800a256:	ee18 0a10 	vmov	r0, s16
 800a25a:	4621      	mov	r1, r4
 800a25c:	f000 f9fc 	bl	800a658 <_Bfree>
 800a260:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a262:	2300      	movs	r3, #0
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	2750      	movs	r7, #80	; 0x50
 800a268:	e713      	b.n	800a092 <__gethex+0x12a>
 800a26a:	bf00      	nop
 800a26c:	0801f104 	.word	0x0801f104
 800a270:	0801f024 	.word	0x0801f024
 800a274:	0801f098 	.word	0x0801f098
 800a278:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1eb      	bne.n	800a256 <__gethex+0x2ee>
 800a27e:	e7d8      	b.n	800a232 <__gethex+0x2ca>
 800a280:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1d5      	bne.n	800a232 <__gethex+0x2ca>
 800a286:	e7e6      	b.n	800a256 <__gethex+0x2ee>
 800a288:	1e6f      	subs	r7, r5, #1
 800a28a:	f1ba 0f00 	cmp.w	sl, #0
 800a28e:	d131      	bne.n	800a2f4 <__gethex+0x38c>
 800a290:	b127      	cbz	r7, 800a29c <__gethex+0x334>
 800a292:	4639      	mov	r1, r7
 800a294:	4620      	mov	r0, r4
 800a296:	f000 fe39 	bl	800af0c <__any_on>
 800a29a:	4682      	mov	sl, r0
 800a29c:	117b      	asrs	r3, r7, #5
 800a29e:	2101      	movs	r1, #1
 800a2a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a2a4:	f007 071f 	and.w	r7, r7, #31
 800a2a8:	fa01 f707 	lsl.w	r7, r1, r7
 800a2ac:	421f      	tst	r7, r3
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	bf18      	it	ne
 800a2b4:	f04a 0a02 	orrne.w	sl, sl, #2
 800a2b8:	1b76      	subs	r6, r6, r5
 800a2ba:	f7ff fdee 	bl	8009e9a <rshift>
 800a2be:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a2c2:	2702      	movs	r7, #2
 800a2c4:	f1ba 0f00 	cmp.w	sl, #0
 800a2c8:	d048      	beq.n	800a35c <__gethex+0x3f4>
 800a2ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d015      	beq.n	800a2fe <__gethex+0x396>
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d017      	beq.n	800a306 <__gethex+0x39e>
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d109      	bne.n	800a2ee <__gethex+0x386>
 800a2da:	f01a 0f02 	tst.w	sl, #2
 800a2de:	d006      	beq.n	800a2ee <__gethex+0x386>
 800a2e0:	f8d9 0000 	ldr.w	r0, [r9]
 800a2e4:	ea4a 0a00 	orr.w	sl, sl, r0
 800a2e8:	f01a 0f01 	tst.w	sl, #1
 800a2ec:	d10e      	bne.n	800a30c <__gethex+0x3a4>
 800a2ee:	f047 0710 	orr.w	r7, r7, #16
 800a2f2:	e033      	b.n	800a35c <__gethex+0x3f4>
 800a2f4:	f04f 0a01 	mov.w	sl, #1
 800a2f8:	e7d0      	b.n	800a29c <__gethex+0x334>
 800a2fa:	2701      	movs	r7, #1
 800a2fc:	e7e2      	b.n	800a2c4 <__gethex+0x35c>
 800a2fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a300:	f1c3 0301 	rsb	r3, r3, #1
 800a304:	9315      	str	r3, [sp, #84]	; 0x54
 800a306:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d0f0      	beq.n	800a2ee <__gethex+0x386>
 800a30c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a310:	f104 0314 	add.w	r3, r4, #20
 800a314:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a318:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a31c:	f04f 0c00 	mov.w	ip, #0
 800a320:	4618      	mov	r0, r3
 800a322:	f853 2b04 	ldr.w	r2, [r3], #4
 800a326:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a32a:	d01c      	beq.n	800a366 <__gethex+0x3fe>
 800a32c:	3201      	adds	r2, #1
 800a32e:	6002      	str	r2, [r0, #0]
 800a330:	2f02      	cmp	r7, #2
 800a332:	f104 0314 	add.w	r3, r4, #20
 800a336:	d13f      	bne.n	800a3b8 <__gethex+0x450>
 800a338:	f8d8 2000 	ldr.w	r2, [r8]
 800a33c:	3a01      	subs	r2, #1
 800a33e:	42b2      	cmp	r2, r6
 800a340:	d10a      	bne.n	800a358 <__gethex+0x3f0>
 800a342:	1171      	asrs	r1, r6, #5
 800a344:	2201      	movs	r2, #1
 800a346:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a34a:	f006 061f 	and.w	r6, r6, #31
 800a34e:	fa02 f606 	lsl.w	r6, r2, r6
 800a352:	421e      	tst	r6, r3
 800a354:	bf18      	it	ne
 800a356:	4617      	movne	r7, r2
 800a358:	f047 0720 	orr.w	r7, r7, #32
 800a35c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a35e:	601c      	str	r4, [r3, #0]
 800a360:	9b04      	ldr	r3, [sp, #16]
 800a362:	601d      	str	r5, [r3, #0]
 800a364:	e695      	b.n	800a092 <__gethex+0x12a>
 800a366:	4299      	cmp	r1, r3
 800a368:	f843 cc04 	str.w	ip, [r3, #-4]
 800a36c:	d8d8      	bhi.n	800a320 <__gethex+0x3b8>
 800a36e:	68a3      	ldr	r3, [r4, #8]
 800a370:	459b      	cmp	fp, r3
 800a372:	db19      	blt.n	800a3a8 <__gethex+0x440>
 800a374:	6861      	ldr	r1, [r4, #4]
 800a376:	ee18 0a10 	vmov	r0, s16
 800a37a:	3101      	adds	r1, #1
 800a37c:	f000 f92c 	bl	800a5d8 <_Balloc>
 800a380:	4681      	mov	r9, r0
 800a382:	b918      	cbnz	r0, 800a38c <__gethex+0x424>
 800a384:	4b1a      	ldr	r3, [pc, #104]	; (800a3f0 <__gethex+0x488>)
 800a386:	4602      	mov	r2, r0
 800a388:	2184      	movs	r1, #132	; 0x84
 800a38a:	e6a8      	b.n	800a0de <__gethex+0x176>
 800a38c:	6922      	ldr	r2, [r4, #16]
 800a38e:	3202      	adds	r2, #2
 800a390:	f104 010c 	add.w	r1, r4, #12
 800a394:	0092      	lsls	r2, r2, #2
 800a396:	300c      	adds	r0, #12
 800a398:	f000 f910 	bl	800a5bc <memcpy>
 800a39c:	4621      	mov	r1, r4
 800a39e:	ee18 0a10 	vmov	r0, s16
 800a3a2:	f000 f959 	bl	800a658 <_Bfree>
 800a3a6:	464c      	mov	r4, r9
 800a3a8:	6923      	ldr	r3, [r4, #16]
 800a3aa:	1c5a      	adds	r2, r3, #1
 800a3ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a3b0:	6122      	str	r2, [r4, #16]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	615a      	str	r2, [r3, #20]
 800a3b6:	e7bb      	b.n	800a330 <__gethex+0x3c8>
 800a3b8:	6922      	ldr	r2, [r4, #16]
 800a3ba:	455a      	cmp	r2, fp
 800a3bc:	dd0b      	ble.n	800a3d6 <__gethex+0x46e>
 800a3be:	2101      	movs	r1, #1
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f7ff fd6a 	bl	8009e9a <rshift>
 800a3c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3ca:	3501      	adds	r5, #1
 800a3cc:	42ab      	cmp	r3, r5
 800a3ce:	f6ff aed0 	blt.w	800a172 <__gethex+0x20a>
 800a3d2:	2701      	movs	r7, #1
 800a3d4:	e7c0      	b.n	800a358 <__gethex+0x3f0>
 800a3d6:	f016 061f 	ands.w	r6, r6, #31
 800a3da:	d0fa      	beq.n	800a3d2 <__gethex+0x46a>
 800a3dc:	449a      	add	sl, r3
 800a3de:	f1c6 0620 	rsb	r6, r6, #32
 800a3e2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a3e6:	f000 f9ed 	bl	800a7c4 <__hi0bits>
 800a3ea:	42b0      	cmp	r0, r6
 800a3ec:	dbe7      	blt.n	800a3be <__gethex+0x456>
 800a3ee:	e7f0      	b.n	800a3d2 <__gethex+0x46a>
 800a3f0:	0801f024 	.word	0x0801f024

0800a3f4 <L_shift>:
 800a3f4:	f1c2 0208 	rsb	r2, r2, #8
 800a3f8:	0092      	lsls	r2, r2, #2
 800a3fa:	b570      	push	{r4, r5, r6, lr}
 800a3fc:	f1c2 0620 	rsb	r6, r2, #32
 800a400:	6843      	ldr	r3, [r0, #4]
 800a402:	6804      	ldr	r4, [r0, #0]
 800a404:	fa03 f506 	lsl.w	r5, r3, r6
 800a408:	432c      	orrs	r4, r5
 800a40a:	40d3      	lsrs	r3, r2
 800a40c:	6004      	str	r4, [r0, #0]
 800a40e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a412:	4288      	cmp	r0, r1
 800a414:	d3f4      	bcc.n	800a400 <L_shift+0xc>
 800a416:	bd70      	pop	{r4, r5, r6, pc}

0800a418 <__match>:
 800a418:	b530      	push	{r4, r5, lr}
 800a41a:	6803      	ldr	r3, [r0, #0]
 800a41c:	3301      	adds	r3, #1
 800a41e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a422:	b914      	cbnz	r4, 800a42a <__match+0x12>
 800a424:	6003      	str	r3, [r0, #0]
 800a426:	2001      	movs	r0, #1
 800a428:	bd30      	pop	{r4, r5, pc}
 800a42a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a42e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a432:	2d19      	cmp	r5, #25
 800a434:	bf98      	it	ls
 800a436:	3220      	addls	r2, #32
 800a438:	42a2      	cmp	r2, r4
 800a43a:	d0f0      	beq.n	800a41e <__match+0x6>
 800a43c:	2000      	movs	r0, #0
 800a43e:	e7f3      	b.n	800a428 <__match+0x10>

0800a440 <__hexnan>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	680b      	ldr	r3, [r1, #0]
 800a446:	6801      	ldr	r1, [r0, #0]
 800a448:	115e      	asrs	r6, r3, #5
 800a44a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a44e:	f013 031f 	ands.w	r3, r3, #31
 800a452:	b087      	sub	sp, #28
 800a454:	bf18      	it	ne
 800a456:	3604      	addne	r6, #4
 800a458:	2500      	movs	r5, #0
 800a45a:	1f37      	subs	r7, r6, #4
 800a45c:	4682      	mov	sl, r0
 800a45e:	4690      	mov	r8, r2
 800a460:	9301      	str	r3, [sp, #4]
 800a462:	f846 5c04 	str.w	r5, [r6, #-4]
 800a466:	46b9      	mov	r9, r7
 800a468:	463c      	mov	r4, r7
 800a46a:	9502      	str	r5, [sp, #8]
 800a46c:	46ab      	mov	fp, r5
 800a46e:	784a      	ldrb	r2, [r1, #1]
 800a470:	1c4b      	adds	r3, r1, #1
 800a472:	9303      	str	r3, [sp, #12]
 800a474:	b342      	cbz	r2, 800a4c8 <__hexnan+0x88>
 800a476:	4610      	mov	r0, r2
 800a478:	9105      	str	r1, [sp, #20]
 800a47a:	9204      	str	r2, [sp, #16]
 800a47c:	f7ff fd5f 	bl	8009f3e <__hexdig_fun>
 800a480:	2800      	cmp	r0, #0
 800a482:	d14f      	bne.n	800a524 <__hexnan+0xe4>
 800a484:	9a04      	ldr	r2, [sp, #16]
 800a486:	9905      	ldr	r1, [sp, #20]
 800a488:	2a20      	cmp	r2, #32
 800a48a:	d818      	bhi.n	800a4be <__hexnan+0x7e>
 800a48c:	9b02      	ldr	r3, [sp, #8]
 800a48e:	459b      	cmp	fp, r3
 800a490:	dd13      	ble.n	800a4ba <__hexnan+0x7a>
 800a492:	454c      	cmp	r4, r9
 800a494:	d206      	bcs.n	800a4a4 <__hexnan+0x64>
 800a496:	2d07      	cmp	r5, #7
 800a498:	dc04      	bgt.n	800a4a4 <__hexnan+0x64>
 800a49a:	462a      	mov	r2, r5
 800a49c:	4649      	mov	r1, r9
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f7ff ffa8 	bl	800a3f4 <L_shift>
 800a4a4:	4544      	cmp	r4, r8
 800a4a6:	d950      	bls.n	800a54a <__hexnan+0x10a>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f1a4 0904 	sub.w	r9, r4, #4
 800a4ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4b2:	f8cd b008 	str.w	fp, [sp, #8]
 800a4b6:	464c      	mov	r4, r9
 800a4b8:	461d      	mov	r5, r3
 800a4ba:	9903      	ldr	r1, [sp, #12]
 800a4bc:	e7d7      	b.n	800a46e <__hexnan+0x2e>
 800a4be:	2a29      	cmp	r2, #41	; 0x29
 800a4c0:	d156      	bne.n	800a570 <__hexnan+0x130>
 800a4c2:	3102      	adds	r1, #2
 800a4c4:	f8ca 1000 	str.w	r1, [sl]
 800a4c8:	f1bb 0f00 	cmp.w	fp, #0
 800a4cc:	d050      	beq.n	800a570 <__hexnan+0x130>
 800a4ce:	454c      	cmp	r4, r9
 800a4d0:	d206      	bcs.n	800a4e0 <__hexnan+0xa0>
 800a4d2:	2d07      	cmp	r5, #7
 800a4d4:	dc04      	bgt.n	800a4e0 <__hexnan+0xa0>
 800a4d6:	462a      	mov	r2, r5
 800a4d8:	4649      	mov	r1, r9
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f7ff ff8a 	bl	800a3f4 <L_shift>
 800a4e0:	4544      	cmp	r4, r8
 800a4e2:	d934      	bls.n	800a54e <__hexnan+0x10e>
 800a4e4:	f1a8 0204 	sub.w	r2, r8, #4
 800a4e8:	4623      	mov	r3, r4
 800a4ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4f2:	429f      	cmp	r7, r3
 800a4f4:	d2f9      	bcs.n	800a4ea <__hexnan+0xaa>
 800a4f6:	1b3b      	subs	r3, r7, r4
 800a4f8:	f023 0303 	bic.w	r3, r3, #3
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	3401      	adds	r4, #1
 800a500:	3e03      	subs	r6, #3
 800a502:	42b4      	cmp	r4, r6
 800a504:	bf88      	it	hi
 800a506:	2304      	movhi	r3, #4
 800a508:	4443      	add	r3, r8
 800a50a:	2200      	movs	r2, #0
 800a50c:	f843 2b04 	str.w	r2, [r3], #4
 800a510:	429f      	cmp	r7, r3
 800a512:	d2fb      	bcs.n	800a50c <__hexnan+0xcc>
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	b91b      	cbnz	r3, 800a520 <__hexnan+0xe0>
 800a518:	4547      	cmp	r7, r8
 800a51a:	d127      	bne.n	800a56c <__hexnan+0x12c>
 800a51c:	2301      	movs	r3, #1
 800a51e:	603b      	str	r3, [r7, #0]
 800a520:	2005      	movs	r0, #5
 800a522:	e026      	b.n	800a572 <__hexnan+0x132>
 800a524:	3501      	adds	r5, #1
 800a526:	2d08      	cmp	r5, #8
 800a528:	f10b 0b01 	add.w	fp, fp, #1
 800a52c:	dd06      	ble.n	800a53c <__hexnan+0xfc>
 800a52e:	4544      	cmp	r4, r8
 800a530:	d9c3      	bls.n	800a4ba <__hexnan+0x7a>
 800a532:	2300      	movs	r3, #0
 800a534:	f844 3c04 	str.w	r3, [r4, #-4]
 800a538:	2501      	movs	r5, #1
 800a53a:	3c04      	subs	r4, #4
 800a53c:	6822      	ldr	r2, [r4, #0]
 800a53e:	f000 000f 	and.w	r0, r0, #15
 800a542:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a546:	6022      	str	r2, [r4, #0]
 800a548:	e7b7      	b.n	800a4ba <__hexnan+0x7a>
 800a54a:	2508      	movs	r5, #8
 800a54c:	e7b5      	b.n	800a4ba <__hexnan+0x7a>
 800a54e:	9b01      	ldr	r3, [sp, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d0df      	beq.n	800a514 <__hexnan+0xd4>
 800a554:	f04f 32ff 	mov.w	r2, #4294967295
 800a558:	f1c3 0320 	rsb	r3, r3, #32
 800a55c:	fa22 f303 	lsr.w	r3, r2, r3
 800a560:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a564:	401a      	ands	r2, r3
 800a566:	f846 2c04 	str.w	r2, [r6, #-4]
 800a56a:	e7d3      	b.n	800a514 <__hexnan+0xd4>
 800a56c:	3f04      	subs	r7, #4
 800a56e:	e7d1      	b.n	800a514 <__hexnan+0xd4>
 800a570:	2004      	movs	r0, #4
 800a572:	b007      	add	sp, #28
 800a574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a578 <_localeconv_r>:
 800a578:	4800      	ldr	r0, [pc, #0]	; (800a57c <_localeconv_r+0x4>)
 800a57a:	4770      	bx	lr
 800a57c:	20000164 	.word	0x20000164

0800a580 <__retarget_lock_init_recursive>:
 800a580:	4770      	bx	lr

0800a582 <__retarget_lock_acquire_recursive>:
 800a582:	4770      	bx	lr

0800a584 <__retarget_lock_release_recursive>:
 800a584:	4770      	bx	lr
	...

0800a588 <malloc>:
 800a588:	4b02      	ldr	r3, [pc, #8]	; (800a594 <malloc+0xc>)
 800a58a:	4601      	mov	r1, r0
 800a58c:	6818      	ldr	r0, [r3, #0]
 800a58e:	f000 bd3d 	b.w	800b00c <_malloc_r>
 800a592:	bf00      	nop
 800a594:	2000000c 	.word	0x2000000c

0800a598 <__ascii_mbtowc>:
 800a598:	b082      	sub	sp, #8
 800a59a:	b901      	cbnz	r1, 800a59e <__ascii_mbtowc+0x6>
 800a59c:	a901      	add	r1, sp, #4
 800a59e:	b142      	cbz	r2, 800a5b2 <__ascii_mbtowc+0x1a>
 800a5a0:	b14b      	cbz	r3, 800a5b6 <__ascii_mbtowc+0x1e>
 800a5a2:	7813      	ldrb	r3, [r2, #0]
 800a5a4:	600b      	str	r3, [r1, #0]
 800a5a6:	7812      	ldrb	r2, [r2, #0]
 800a5a8:	1e10      	subs	r0, r2, #0
 800a5aa:	bf18      	it	ne
 800a5ac:	2001      	movne	r0, #1
 800a5ae:	b002      	add	sp, #8
 800a5b0:	4770      	bx	lr
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	e7fb      	b.n	800a5ae <__ascii_mbtowc+0x16>
 800a5b6:	f06f 0001 	mvn.w	r0, #1
 800a5ba:	e7f8      	b.n	800a5ae <__ascii_mbtowc+0x16>

0800a5bc <memcpy>:
 800a5bc:	440a      	add	r2, r1
 800a5be:	4291      	cmp	r1, r2
 800a5c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5c4:	d100      	bne.n	800a5c8 <memcpy+0xc>
 800a5c6:	4770      	bx	lr
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5d2:	4291      	cmp	r1, r2
 800a5d4:	d1f9      	bne.n	800a5ca <memcpy+0xe>
 800a5d6:	bd10      	pop	{r4, pc}

0800a5d8 <_Balloc>:
 800a5d8:	b570      	push	{r4, r5, r6, lr}
 800a5da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5dc:	4604      	mov	r4, r0
 800a5de:	460d      	mov	r5, r1
 800a5e0:	b976      	cbnz	r6, 800a600 <_Balloc+0x28>
 800a5e2:	2010      	movs	r0, #16
 800a5e4:	f7ff ffd0 	bl	800a588 <malloc>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	6260      	str	r0, [r4, #36]	; 0x24
 800a5ec:	b920      	cbnz	r0, 800a5f8 <_Balloc+0x20>
 800a5ee:	4b18      	ldr	r3, [pc, #96]	; (800a650 <_Balloc+0x78>)
 800a5f0:	4818      	ldr	r0, [pc, #96]	; (800a654 <_Balloc+0x7c>)
 800a5f2:	2166      	movs	r1, #102	; 0x66
 800a5f4:	f001 f96a 	bl	800b8cc <__assert_func>
 800a5f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5fc:	6006      	str	r6, [r0, #0]
 800a5fe:	60c6      	str	r6, [r0, #12]
 800a600:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a602:	68f3      	ldr	r3, [r6, #12]
 800a604:	b183      	cbz	r3, 800a628 <_Balloc+0x50>
 800a606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a60e:	b9b8      	cbnz	r0, 800a640 <_Balloc+0x68>
 800a610:	2101      	movs	r1, #1
 800a612:	fa01 f605 	lsl.w	r6, r1, r5
 800a616:	1d72      	adds	r2, r6, #5
 800a618:	0092      	lsls	r2, r2, #2
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fc97 	bl	800af4e <_calloc_r>
 800a620:	b160      	cbz	r0, 800a63c <_Balloc+0x64>
 800a622:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a626:	e00e      	b.n	800a646 <_Balloc+0x6e>
 800a628:	2221      	movs	r2, #33	; 0x21
 800a62a:	2104      	movs	r1, #4
 800a62c:	4620      	mov	r0, r4
 800a62e:	f000 fc8e 	bl	800af4e <_calloc_r>
 800a632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a634:	60f0      	str	r0, [r6, #12]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1e4      	bne.n	800a606 <_Balloc+0x2e>
 800a63c:	2000      	movs	r0, #0
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	6802      	ldr	r2, [r0, #0]
 800a642:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a646:	2300      	movs	r3, #0
 800a648:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a64c:	e7f7      	b.n	800a63e <_Balloc+0x66>
 800a64e:	bf00      	nop
 800a650:	0801efae 	.word	0x0801efae
 800a654:	0801f118 	.word	0x0801f118

0800a658 <_Bfree>:
 800a658:	b570      	push	{r4, r5, r6, lr}
 800a65a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a65c:	4605      	mov	r5, r0
 800a65e:	460c      	mov	r4, r1
 800a660:	b976      	cbnz	r6, 800a680 <_Bfree+0x28>
 800a662:	2010      	movs	r0, #16
 800a664:	f7ff ff90 	bl	800a588 <malloc>
 800a668:	4602      	mov	r2, r0
 800a66a:	6268      	str	r0, [r5, #36]	; 0x24
 800a66c:	b920      	cbnz	r0, 800a678 <_Bfree+0x20>
 800a66e:	4b09      	ldr	r3, [pc, #36]	; (800a694 <_Bfree+0x3c>)
 800a670:	4809      	ldr	r0, [pc, #36]	; (800a698 <_Bfree+0x40>)
 800a672:	218a      	movs	r1, #138	; 0x8a
 800a674:	f001 f92a 	bl	800b8cc <__assert_func>
 800a678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a67c:	6006      	str	r6, [r0, #0]
 800a67e:	60c6      	str	r6, [r0, #12]
 800a680:	b13c      	cbz	r4, 800a692 <_Bfree+0x3a>
 800a682:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a684:	6862      	ldr	r2, [r4, #4]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a68c:	6021      	str	r1, [r4, #0]
 800a68e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	0801efae 	.word	0x0801efae
 800a698:	0801f118 	.word	0x0801f118

0800a69c <__multadd>:
 800a69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a0:	690e      	ldr	r6, [r1, #16]
 800a6a2:	4607      	mov	r7, r0
 800a6a4:	4698      	mov	r8, r3
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	f101 0014 	add.w	r0, r1, #20
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	6805      	ldr	r5, [r0, #0]
 800a6b0:	b2a9      	uxth	r1, r5
 800a6b2:	fb02 8101 	mla	r1, r2, r1, r8
 800a6b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a6ba:	0c2d      	lsrs	r5, r5, #16
 800a6bc:	fb02 c505 	mla	r5, r2, r5, ip
 800a6c0:	b289      	uxth	r1, r1
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a6c8:	429e      	cmp	r6, r3
 800a6ca:	f840 1b04 	str.w	r1, [r0], #4
 800a6ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a6d2:	dcec      	bgt.n	800a6ae <__multadd+0x12>
 800a6d4:	f1b8 0f00 	cmp.w	r8, #0
 800a6d8:	d022      	beq.n	800a720 <__multadd+0x84>
 800a6da:	68a3      	ldr	r3, [r4, #8]
 800a6dc:	42b3      	cmp	r3, r6
 800a6de:	dc19      	bgt.n	800a714 <__multadd+0x78>
 800a6e0:	6861      	ldr	r1, [r4, #4]
 800a6e2:	4638      	mov	r0, r7
 800a6e4:	3101      	adds	r1, #1
 800a6e6:	f7ff ff77 	bl	800a5d8 <_Balloc>
 800a6ea:	4605      	mov	r5, r0
 800a6ec:	b928      	cbnz	r0, 800a6fa <__multadd+0x5e>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	4b0d      	ldr	r3, [pc, #52]	; (800a728 <__multadd+0x8c>)
 800a6f2:	480e      	ldr	r0, [pc, #56]	; (800a72c <__multadd+0x90>)
 800a6f4:	21b5      	movs	r1, #181	; 0xb5
 800a6f6:	f001 f8e9 	bl	800b8cc <__assert_func>
 800a6fa:	6922      	ldr	r2, [r4, #16]
 800a6fc:	3202      	adds	r2, #2
 800a6fe:	f104 010c 	add.w	r1, r4, #12
 800a702:	0092      	lsls	r2, r2, #2
 800a704:	300c      	adds	r0, #12
 800a706:	f7ff ff59 	bl	800a5bc <memcpy>
 800a70a:	4621      	mov	r1, r4
 800a70c:	4638      	mov	r0, r7
 800a70e:	f7ff ffa3 	bl	800a658 <_Bfree>
 800a712:	462c      	mov	r4, r5
 800a714:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a718:	3601      	adds	r6, #1
 800a71a:	f8c3 8014 	str.w	r8, [r3, #20]
 800a71e:	6126      	str	r6, [r4, #16]
 800a720:	4620      	mov	r0, r4
 800a722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a726:	bf00      	nop
 800a728:	0801f024 	.word	0x0801f024
 800a72c:	0801f118 	.word	0x0801f118

0800a730 <__s2b>:
 800a730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a734:	460c      	mov	r4, r1
 800a736:	4615      	mov	r5, r2
 800a738:	461f      	mov	r7, r3
 800a73a:	2209      	movs	r2, #9
 800a73c:	3308      	adds	r3, #8
 800a73e:	4606      	mov	r6, r0
 800a740:	fb93 f3f2 	sdiv	r3, r3, r2
 800a744:	2100      	movs	r1, #0
 800a746:	2201      	movs	r2, #1
 800a748:	429a      	cmp	r2, r3
 800a74a:	db09      	blt.n	800a760 <__s2b+0x30>
 800a74c:	4630      	mov	r0, r6
 800a74e:	f7ff ff43 	bl	800a5d8 <_Balloc>
 800a752:	b940      	cbnz	r0, 800a766 <__s2b+0x36>
 800a754:	4602      	mov	r2, r0
 800a756:	4b19      	ldr	r3, [pc, #100]	; (800a7bc <__s2b+0x8c>)
 800a758:	4819      	ldr	r0, [pc, #100]	; (800a7c0 <__s2b+0x90>)
 800a75a:	21ce      	movs	r1, #206	; 0xce
 800a75c:	f001 f8b6 	bl	800b8cc <__assert_func>
 800a760:	0052      	lsls	r2, r2, #1
 800a762:	3101      	adds	r1, #1
 800a764:	e7f0      	b.n	800a748 <__s2b+0x18>
 800a766:	9b08      	ldr	r3, [sp, #32]
 800a768:	6143      	str	r3, [r0, #20]
 800a76a:	2d09      	cmp	r5, #9
 800a76c:	f04f 0301 	mov.w	r3, #1
 800a770:	6103      	str	r3, [r0, #16]
 800a772:	dd16      	ble.n	800a7a2 <__s2b+0x72>
 800a774:	f104 0909 	add.w	r9, r4, #9
 800a778:	46c8      	mov	r8, r9
 800a77a:	442c      	add	r4, r5
 800a77c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a780:	4601      	mov	r1, r0
 800a782:	3b30      	subs	r3, #48	; 0x30
 800a784:	220a      	movs	r2, #10
 800a786:	4630      	mov	r0, r6
 800a788:	f7ff ff88 	bl	800a69c <__multadd>
 800a78c:	45a0      	cmp	r8, r4
 800a78e:	d1f5      	bne.n	800a77c <__s2b+0x4c>
 800a790:	f1a5 0408 	sub.w	r4, r5, #8
 800a794:	444c      	add	r4, r9
 800a796:	1b2d      	subs	r5, r5, r4
 800a798:	1963      	adds	r3, r4, r5
 800a79a:	42bb      	cmp	r3, r7
 800a79c:	db04      	blt.n	800a7a8 <__s2b+0x78>
 800a79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7a2:	340a      	adds	r4, #10
 800a7a4:	2509      	movs	r5, #9
 800a7a6:	e7f6      	b.n	800a796 <__s2b+0x66>
 800a7a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7ac:	4601      	mov	r1, r0
 800a7ae:	3b30      	subs	r3, #48	; 0x30
 800a7b0:	220a      	movs	r2, #10
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7ff ff72 	bl	800a69c <__multadd>
 800a7b8:	e7ee      	b.n	800a798 <__s2b+0x68>
 800a7ba:	bf00      	nop
 800a7bc:	0801f024 	.word	0x0801f024
 800a7c0:	0801f118 	.word	0x0801f118

0800a7c4 <__hi0bits>:
 800a7c4:	0c03      	lsrs	r3, r0, #16
 800a7c6:	041b      	lsls	r3, r3, #16
 800a7c8:	b9d3      	cbnz	r3, 800a800 <__hi0bits+0x3c>
 800a7ca:	0400      	lsls	r0, r0, #16
 800a7cc:	2310      	movs	r3, #16
 800a7ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a7d2:	bf04      	itt	eq
 800a7d4:	0200      	lsleq	r0, r0, #8
 800a7d6:	3308      	addeq	r3, #8
 800a7d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a7dc:	bf04      	itt	eq
 800a7de:	0100      	lsleq	r0, r0, #4
 800a7e0:	3304      	addeq	r3, #4
 800a7e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a7e6:	bf04      	itt	eq
 800a7e8:	0080      	lsleq	r0, r0, #2
 800a7ea:	3302      	addeq	r3, #2
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	db05      	blt.n	800a7fc <__hi0bits+0x38>
 800a7f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a7f4:	f103 0301 	add.w	r3, r3, #1
 800a7f8:	bf08      	it	eq
 800a7fa:	2320      	moveq	r3, #32
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	4770      	bx	lr
 800a800:	2300      	movs	r3, #0
 800a802:	e7e4      	b.n	800a7ce <__hi0bits+0xa>

0800a804 <__lo0bits>:
 800a804:	6803      	ldr	r3, [r0, #0]
 800a806:	f013 0207 	ands.w	r2, r3, #7
 800a80a:	4601      	mov	r1, r0
 800a80c:	d00b      	beq.n	800a826 <__lo0bits+0x22>
 800a80e:	07da      	lsls	r2, r3, #31
 800a810:	d424      	bmi.n	800a85c <__lo0bits+0x58>
 800a812:	0798      	lsls	r0, r3, #30
 800a814:	bf49      	itett	mi
 800a816:	085b      	lsrmi	r3, r3, #1
 800a818:	089b      	lsrpl	r3, r3, #2
 800a81a:	2001      	movmi	r0, #1
 800a81c:	600b      	strmi	r3, [r1, #0]
 800a81e:	bf5c      	itt	pl
 800a820:	600b      	strpl	r3, [r1, #0]
 800a822:	2002      	movpl	r0, #2
 800a824:	4770      	bx	lr
 800a826:	b298      	uxth	r0, r3
 800a828:	b9b0      	cbnz	r0, 800a858 <__lo0bits+0x54>
 800a82a:	0c1b      	lsrs	r3, r3, #16
 800a82c:	2010      	movs	r0, #16
 800a82e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a832:	bf04      	itt	eq
 800a834:	0a1b      	lsreq	r3, r3, #8
 800a836:	3008      	addeq	r0, #8
 800a838:	071a      	lsls	r2, r3, #28
 800a83a:	bf04      	itt	eq
 800a83c:	091b      	lsreq	r3, r3, #4
 800a83e:	3004      	addeq	r0, #4
 800a840:	079a      	lsls	r2, r3, #30
 800a842:	bf04      	itt	eq
 800a844:	089b      	lsreq	r3, r3, #2
 800a846:	3002      	addeq	r0, #2
 800a848:	07da      	lsls	r2, r3, #31
 800a84a:	d403      	bmi.n	800a854 <__lo0bits+0x50>
 800a84c:	085b      	lsrs	r3, r3, #1
 800a84e:	f100 0001 	add.w	r0, r0, #1
 800a852:	d005      	beq.n	800a860 <__lo0bits+0x5c>
 800a854:	600b      	str	r3, [r1, #0]
 800a856:	4770      	bx	lr
 800a858:	4610      	mov	r0, r2
 800a85a:	e7e8      	b.n	800a82e <__lo0bits+0x2a>
 800a85c:	2000      	movs	r0, #0
 800a85e:	4770      	bx	lr
 800a860:	2020      	movs	r0, #32
 800a862:	4770      	bx	lr

0800a864 <__i2b>:
 800a864:	b510      	push	{r4, lr}
 800a866:	460c      	mov	r4, r1
 800a868:	2101      	movs	r1, #1
 800a86a:	f7ff feb5 	bl	800a5d8 <_Balloc>
 800a86e:	4602      	mov	r2, r0
 800a870:	b928      	cbnz	r0, 800a87e <__i2b+0x1a>
 800a872:	4b05      	ldr	r3, [pc, #20]	; (800a888 <__i2b+0x24>)
 800a874:	4805      	ldr	r0, [pc, #20]	; (800a88c <__i2b+0x28>)
 800a876:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a87a:	f001 f827 	bl	800b8cc <__assert_func>
 800a87e:	2301      	movs	r3, #1
 800a880:	6144      	str	r4, [r0, #20]
 800a882:	6103      	str	r3, [r0, #16]
 800a884:	bd10      	pop	{r4, pc}
 800a886:	bf00      	nop
 800a888:	0801f024 	.word	0x0801f024
 800a88c:	0801f118 	.word	0x0801f118

0800a890 <__multiply>:
 800a890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a894:	4614      	mov	r4, r2
 800a896:	690a      	ldr	r2, [r1, #16]
 800a898:	6923      	ldr	r3, [r4, #16]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	bfb8      	it	lt
 800a89e:	460b      	movlt	r3, r1
 800a8a0:	460d      	mov	r5, r1
 800a8a2:	bfbc      	itt	lt
 800a8a4:	4625      	movlt	r5, r4
 800a8a6:	461c      	movlt	r4, r3
 800a8a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a8ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a8b0:	68ab      	ldr	r3, [r5, #8]
 800a8b2:	6869      	ldr	r1, [r5, #4]
 800a8b4:	eb0a 0709 	add.w	r7, sl, r9
 800a8b8:	42bb      	cmp	r3, r7
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	bfb8      	it	lt
 800a8be:	3101      	addlt	r1, #1
 800a8c0:	f7ff fe8a 	bl	800a5d8 <_Balloc>
 800a8c4:	b930      	cbnz	r0, 800a8d4 <__multiply+0x44>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	4b42      	ldr	r3, [pc, #264]	; (800a9d4 <__multiply+0x144>)
 800a8ca:	4843      	ldr	r0, [pc, #268]	; (800a9d8 <__multiply+0x148>)
 800a8cc:	f240 115d 	movw	r1, #349	; 0x15d
 800a8d0:	f000 fffc 	bl	800b8cc <__assert_func>
 800a8d4:	f100 0614 	add.w	r6, r0, #20
 800a8d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a8dc:	4633      	mov	r3, r6
 800a8de:	2200      	movs	r2, #0
 800a8e0:	4543      	cmp	r3, r8
 800a8e2:	d31e      	bcc.n	800a922 <__multiply+0x92>
 800a8e4:	f105 0c14 	add.w	ip, r5, #20
 800a8e8:	f104 0314 	add.w	r3, r4, #20
 800a8ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a8f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a8f4:	9202      	str	r2, [sp, #8]
 800a8f6:	ebac 0205 	sub.w	r2, ip, r5
 800a8fa:	3a15      	subs	r2, #21
 800a8fc:	f022 0203 	bic.w	r2, r2, #3
 800a900:	3204      	adds	r2, #4
 800a902:	f105 0115 	add.w	r1, r5, #21
 800a906:	458c      	cmp	ip, r1
 800a908:	bf38      	it	cc
 800a90a:	2204      	movcc	r2, #4
 800a90c:	9201      	str	r2, [sp, #4]
 800a90e:	9a02      	ldr	r2, [sp, #8]
 800a910:	9303      	str	r3, [sp, #12]
 800a912:	429a      	cmp	r2, r3
 800a914:	d808      	bhi.n	800a928 <__multiply+0x98>
 800a916:	2f00      	cmp	r7, #0
 800a918:	dc55      	bgt.n	800a9c6 <__multiply+0x136>
 800a91a:	6107      	str	r7, [r0, #16]
 800a91c:	b005      	add	sp, #20
 800a91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a922:	f843 2b04 	str.w	r2, [r3], #4
 800a926:	e7db      	b.n	800a8e0 <__multiply+0x50>
 800a928:	f8b3 a000 	ldrh.w	sl, [r3]
 800a92c:	f1ba 0f00 	cmp.w	sl, #0
 800a930:	d020      	beq.n	800a974 <__multiply+0xe4>
 800a932:	f105 0e14 	add.w	lr, r5, #20
 800a936:	46b1      	mov	r9, r6
 800a938:	2200      	movs	r2, #0
 800a93a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a93e:	f8d9 b000 	ldr.w	fp, [r9]
 800a942:	b2a1      	uxth	r1, r4
 800a944:	fa1f fb8b 	uxth.w	fp, fp
 800a948:	fb0a b101 	mla	r1, sl, r1, fp
 800a94c:	4411      	add	r1, r2
 800a94e:	f8d9 2000 	ldr.w	r2, [r9]
 800a952:	0c24      	lsrs	r4, r4, #16
 800a954:	0c12      	lsrs	r2, r2, #16
 800a956:	fb0a 2404 	mla	r4, sl, r4, r2
 800a95a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a95e:	b289      	uxth	r1, r1
 800a960:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a964:	45f4      	cmp	ip, lr
 800a966:	f849 1b04 	str.w	r1, [r9], #4
 800a96a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a96e:	d8e4      	bhi.n	800a93a <__multiply+0xaa>
 800a970:	9901      	ldr	r1, [sp, #4]
 800a972:	5072      	str	r2, [r6, r1]
 800a974:	9a03      	ldr	r2, [sp, #12]
 800a976:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a97a:	3304      	adds	r3, #4
 800a97c:	f1b9 0f00 	cmp.w	r9, #0
 800a980:	d01f      	beq.n	800a9c2 <__multiply+0x132>
 800a982:	6834      	ldr	r4, [r6, #0]
 800a984:	f105 0114 	add.w	r1, r5, #20
 800a988:	46b6      	mov	lr, r6
 800a98a:	f04f 0a00 	mov.w	sl, #0
 800a98e:	880a      	ldrh	r2, [r1, #0]
 800a990:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a994:	fb09 b202 	mla	r2, r9, r2, fp
 800a998:	4492      	add	sl, r2
 800a99a:	b2a4      	uxth	r4, r4
 800a99c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a9a0:	f84e 4b04 	str.w	r4, [lr], #4
 800a9a4:	f851 4b04 	ldr.w	r4, [r1], #4
 800a9a8:	f8be 2000 	ldrh.w	r2, [lr]
 800a9ac:	0c24      	lsrs	r4, r4, #16
 800a9ae:	fb09 2404 	mla	r4, r9, r4, r2
 800a9b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a9b6:	458c      	cmp	ip, r1
 800a9b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a9bc:	d8e7      	bhi.n	800a98e <__multiply+0xfe>
 800a9be:	9a01      	ldr	r2, [sp, #4]
 800a9c0:	50b4      	str	r4, [r6, r2]
 800a9c2:	3604      	adds	r6, #4
 800a9c4:	e7a3      	b.n	800a90e <__multiply+0x7e>
 800a9c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1a5      	bne.n	800a91a <__multiply+0x8a>
 800a9ce:	3f01      	subs	r7, #1
 800a9d0:	e7a1      	b.n	800a916 <__multiply+0x86>
 800a9d2:	bf00      	nop
 800a9d4:	0801f024 	.word	0x0801f024
 800a9d8:	0801f118 	.word	0x0801f118

0800a9dc <__pow5mult>:
 800a9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e0:	4615      	mov	r5, r2
 800a9e2:	f012 0203 	ands.w	r2, r2, #3
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	460f      	mov	r7, r1
 800a9ea:	d007      	beq.n	800a9fc <__pow5mult+0x20>
 800a9ec:	4c25      	ldr	r4, [pc, #148]	; (800aa84 <__pow5mult+0xa8>)
 800a9ee:	3a01      	subs	r2, #1
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9f6:	f7ff fe51 	bl	800a69c <__multadd>
 800a9fa:	4607      	mov	r7, r0
 800a9fc:	10ad      	asrs	r5, r5, #2
 800a9fe:	d03d      	beq.n	800aa7c <__pow5mult+0xa0>
 800aa00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa02:	b97c      	cbnz	r4, 800aa24 <__pow5mult+0x48>
 800aa04:	2010      	movs	r0, #16
 800aa06:	f7ff fdbf 	bl	800a588 <malloc>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	6270      	str	r0, [r6, #36]	; 0x24
 800aa0e:	b928      	cbnz	r0, 800aa1c <__pow5mult+0x40>
 800aa10:	4b1d      	ldr	r3, [pc, #116]	; (800aa88 <__pow5mult+0xac>)
 800aa12:	481e      	ldr	r0, [pc, #120]	; (800aa8c <__pow5mult+0xb0>)
 800aa14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aa18:	f000 ff58 	bl	800b8cc <__assert_func>
 800aa1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa20:	6004      	str	r4, [r0, #0]
 800aa22:	60c4      	str	r4, [r0, #12]
 800aa24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa2c:	b94c      	cbnz	r4, 800aa42 <__pow5mult+0x66>
 800aa2e:	f240 2171 	movw	r1, #625	; 0x271
 800aa32:	4630      	mov	r0, r6
 800aa34:	f7ff ff16 	bl	800a864 <__i2b>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa3e:	4604      	mov	r4, r0
 800aa40:	6003      	str	r3, [r0, #0]
 800aa42:	f04f 0900 	mov.w	r9, #0
 800aa46:	07eb      	lsls	r3, r5, #31
 800aa48:	d50a      	bpl.n	800aa60 <__pow5mult+0x84>
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	4622      	mov	r2, r4
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f7ff ff1e 	bl	800a890 <__multiply>
 800aa54:	4639      	mov	r1, r7
 800aa56:	4680      	mov	r8, r0
 800aa58:	4630      	mov	r0, r6
 800aa5a:	f7ff fdfd 	bl	800a658 <_Bfree>
 800aa5e:	4647      	mov	r7, r8
 800aa60:	106d      	asrs	r5, r5, #1
 800aa62:	d00b      	beq.n	800aa7c <__pow5mult+0xa0>
 800aa64:	6820      	ldr	r0, [r4, #0]
 800aa66:	b938      	cbnz	r0, 800aa78 <__pow5mult+0x9c>
 800aa68:	4622      	mov	r2, r4
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f7ff ff0f 	bl	800a890 <__multiply>
 800aa72:	6020      	str	r0, [r4, #0]
 800aa74:	f8c0 9000 	str.w	r9, [r0]
 800aa78:	4604      	mov	r4, r0
 800aa7a:	e7e4      	b.n	800aa46 <__pow5mult+0x6a>
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa82:	bf00      	nop
 800aa84:	0801f268 	.word	0x0801f268
 800aa88:	0801efae 	.word	0x0801efae
 800aa8c:	0801f118 	.word	0x0801f118

0800aa90 <__lshift>:
 800aa90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa94:	460c      	mov	r4, r1
 800aa96:	6849      	ldr	r1, [r1, #4]
 800aa98:	6923      	ldr	r3, [r4, #16]
 800aa9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa9e:	68a3      	ldr	r3, [r4, #8]
 800aaa0:	4607      	mov	r7, r0
 800aaa2:	4691      	mov	r9, r2
 800aaa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aaa8:	f108 0601 	add.w	r6, r8, #1
 800aaac:	42b3      	cmp	r3, r6
 800aaae:	db0b      	blt.n	800aac8 <__lshift+0x38>
 800aab0:	4638      	mov	r0, r7
 800aab2:	f7ff fd91 	bl	800a5d8 <_Balloc>
 800aab6:	4605      	mov	r5, r0
 800aab8:	b948      	cbnz	r0, 800aace <__lshift+0x3e>
 800aaba:	4602      	mov	r2, r0
 800aabc:	4b28      	ldr	r3, [pc, #160]	; (800ab60 <__lshift+0xd0>)
 800aabe:	4829      	ldr	r0, [pc, #164]	; (800ab64 <__lshift+0xd4>)
 800aac0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aac4:	f000 ff02 	bl	800b8cc <__assert_func>
 800aac8:	3101      	adds	r1, #1
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	e7ee      	b.n	800aaac <__lshift+0x1c>
 800aace:	2300      	movs	r3, #0
 800aad0:	f100 0114 	add.w	r1, r0, #20
 800aad4:	f100 0210 	add.w	r2, r0, #16
 800aad8:	4618      	mov	r0, r3
 800aada:	4553      	cmp	r3, sl
 800aadc:	db33      	blt.n	800ab46 <__lshift+0xb6>
 800aade:	6920      	ldr	r0, [r4, #16]
 800aae0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aae4:	f104 0314 	add.w	r3, r4, #20
 800aae8:	f019 091f 	ands.w	r9, r9, #31
 800aaec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aaf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aaf4:	d02b      	beq.n	800ab4e <__lshift+0xbe>
 800aaf6:	f1c9 0e20 	rsb	lr, r9, #32
 800aafa:	468a      	mov	sl, r1
 800aafc:	2200      	movs	r2, #0
 800aafe:	6818      	ldr	r0, [r3, #0]
 800ab00:	fa00 f009 	lsl.w	r0, r0, r9
 800ab04:	4302      	orrs	r2, r0
 800ab06:	f84a 2b04 	str.w	r2, [sl], #4
 800ab0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab0e:	459c      	cmp	ip, r3
 800ab10:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab14:	d8f3      	bhi.n	800aafe <__lshift+0x6e>
 800ab16:	ebac 0304 	sub.w	r3, ip, r4
 800ab1a:	3b15      	subs	r3, #21
 800ab1c:	f023 0303 	bic.w	r3, r3, #3
 800ab20:	3304      	adds	r3, #4
 800ab22:	f104 0015 	add.w	r0, r4, #21
 800ab26:	4584      	cmp	ip, r0
 800ab28:	bf38      	it	cc
 800ab2a:	2304      	movcc	r3, #4
 800ab2c:	50ca      	str	r2, [r1, r3]
 800ab2e:	b10a      	cbz	r2, 800ab34 <__lshift+0xa4>
 800ab30:	f108 0602 	add.w	r6, r8, #2
 800ab34:	3e01      	subs	r6, #1
 800ab36:	4638      	mov	r0, r7
 800ab38:	612e      	str	r6, [r5, #16]
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	f7ff fd8c 	bl	800a658 <_Bfree>
 800ab40:	4628      	mov	r0, r5
 800ab42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab46:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	e7c5      	b.n	800aada <__lshift+0x4a>
 800ab4e:	3904      	subs	r1, #4
 800ab50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab54:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab58:	459c      	cmp	ip, r3
 800ab5a:	d8f9      	bhi.n	800ab50 <__lshift+0xc0>
 800ab5c:	e7ea      	b.n	800ab34 <__lshift+0xa4>
 800ab5e:	bf00      	nop
 800ab60:	0801f024 	.word	0x0801f024
 800ab64:	0801f118 	.word	0x0801f118

0800ab68 <__mcmp>:
 800ab68:	b530      	push	{r4, r5, lr}
 800ab6a:	6902      	ldr	r2, [r0, #16]
 800ab6c:	690c      	ldr	r4, [r1, #16]
 800ab6e:	1b12      	subs	r2, r2, r4
 800ab70:	d10e      	bne.n	800ab90 <__mcmp+0x28>
 800ab72:	f100 0314 	add.w	r3, r0, #20
 800ab76:	3114      	adds	r1, #20
 800ab78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab88:	42a5      	cmp	r5, r4
 800ab8a:	d003      	beq.n	800ab94 <__mcmp+0x2c>
 800ab8c:	d305      	bcc.n	800ab9a <__mcmp+0x32>
 800ab8e:	2201      	movs	r2, #1
 800ab90:	4610      	mov	r0, r2
 800ab92:	bd30      	pop	{r4, r5, pc}
 800ab94:	4283      	cmp	r3, r0
 800ab96:	d3f3      	bcc.n	800ab80 <__mcmp+0x18>
 800ab98:	e7fa      	b.n	800ab90 <__mcmp+0x28>
 800ab9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab9e:	e7f7      	b.n	800ab90 <__mcmp+0x28>

0800aba0 <__mdiff>:
 800aba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	460c      	mov	r4, r1
 800aba6:	4606      	mov	r6, r0
 800aba8:	4611      	mov	r1, r2
 800abaa:	4620      	mov	r0, r4
 800abac:	4617      	mov	r7, r2
 800abae:	f7ff ffdb 	bl	800ab68 <__mcmp>
 800abb2:	1e05      	subs	r5, r0, #0
 800abb4:	d110      	bne.n	800abd8 <__mdiff+0x38>
 800abb6:	4629      	mov	r1, r5
 800abb8:	4630      	mov	r0, r6
 800abba:	f7ff fd0d 	bl	800a5d8 <_Balloc>
 800abbe:	b930      	cbnz	r0, 800abce <__mdiff+0x2e>
 800abc0:	4b39      	ldr	r3, [pc, #228]	; (800aca8 <__mdiff+0x108>)
 800abc2:	4602      	mov	r2, r0
 800abc4:	f240 2132 	movw	r1, #562	; 0x232
 800abc8:	4838      	ldr	r0, [pc, #224]	; (800acac <__mdiff+0x10c>)
 800abca:	f000 fe7f 	bl	800b8cc <__assert_func>
 800abce:	2301      	movs	r3, #1
 800abd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800abd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd8:	bfa4      	itt	ge
 800abda:	463b      	movge	r3, r7
 800abdc:	4627      	movge	r7, r4
 800abde:	4630      	mov	r0, r6
 800abe0:	6879      	ldr	r1, [r7, #4]
 800abe2:	bfa6      	itte	ge
 800abe4:	461c      	movge	r4, r3
 800abe6:	2500      	movge	r5, #0
 800abe8:	2501      	movlt	r5, #1
 800abea:	f7ff fcf5 	bl	800a5d8 <_Balloc>
 800abee:	b920      	cbnz	r0, 800abfa <__mdiff+0x5a>
 800abf0:	4b2d      	ldr	r3, [pc, #180]	; (800aca8 <__mdiff+0x108>)
 800abf2:	4602      	mov	r2, r0
 800abf4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800abf8:	e7e6      	b.n	800abc8 <__mdiff+0x28>
 800abfa:	693e      	ldr	r6, [r7, #16]
 800abfc:	60c5      	str	r5, [r0, #12]
 800abfe:	6925      	ldr	r5, [r4, #16]
 800ac00:	f107 0114 	add.w	r1, r7, #20
 800ac04:	f104 0914 	add.w	r9, r4, #20
 800ac08:	f100 0e14 	add.w	lr, r0, #20
 800ac0c:	f107 0210 	add.w	r2, r7, #16
 800ac10:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ac14:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ac18:	46f2      	mov	sl, lr
 800ac1a:	2700      	movs	r7, #0
 800ac1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ac24:	fa1f f883 	uxth.w	r8, r3
 800ac28:	fa17 f78b 	uxtah	r7, r7, fp
 800ac2c:	0c1b      	lsrs	r3, r3, #16
 800ac2e:	eba7 0808 	sub.w	r8, r7, r8
 800ac32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ac3a:	fa1f f888 	uxth.w	r8, r8
 800ac3e:	141f      	asrs	r7, r3, #16
 800ac40:	454d      	cmp	r5, r9
 800ac42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac46:	f84a 3b04 	str.w	r3, [sl], #4
 800ac4a:	d8e7      	bhi.n	800ac1c <__mdiff+0x7c>
 800ac4c:	1b2b      	subs	r3, r5, r4
 800ac4e:	3b15      	subs	r3, #21
 800ac50:	f023 0303 	bic.w	r3, r3, #3
 800ac54:	3304      	adds	r3, #4
 800ac56:	3415      	adds	r4, #21
 800ac58:	42a5      	cmp	r5, r4
 800ac5a:	bf38      	it	cc
 800ac5c:	2304      	movcc	r3, #4
 800ac5e:	4419      	add	r1, r3
 800ac60:	4473      	add	r3, lr
 800ac62:	469e      	mov	lr, r3
 800ac64:	460d      	mov	r5, r1
 800ac66:	4565      	cmp	r5, ip
 800ac68:	d30e      	bcc.n	800ac88 <__mdiff+0xe8>
 800ac6a:	f10c 0203 	add.w	r2, ip, #3
 800ac6e:	1a52      	subs	r2, r2, r1
 800ac70:	f022 0203 	bic.w	r2, r2, #3
 800ac74:	3903      	subs	r1, #3
 800ac76:	458c      	cmp	ip, r1
 800ac78:	bf38      	it	cc
 800ac7a:	2200      	movcc	r2, #0
 800ac7c:	441a      	add	r2, r3
 800ac7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac82:	b17b      	cbz	r3, 800aca4 <__mdiff+0x104>
 800ac84:	6106      	str	r6, [r0, #16]
 800ac86:	e7a5      	b.n	800abd4 <__mdiff+0x34>
 800ac88:	f855 8b04 	ldr.w	r8, [r5], #4
 800ac8c:	fa17 f488 	uxtah	r4, r7, r8
 800ac90:	1422      	asrs	r2, r4, #16
 800ac92:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ac96:	b2a4      	uxth	r4, r4
 800ac98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ac9c:	f84e 4b04 	str.w	r4, [lr], #4
 800aca0:	1417      	asrs	r7, r2, #16
 800aca2:	e7e0      	b.n	800ac66 <__mdiff+0xc6>
 800aca4:	3e01      	subs	r6, #1
 800aca6:	e7ea      	b.n	800ac7e <__mdiff+0xde>
 800aca8:	0801f024 	.word	0x0801f024
 800acac:	0801f118 	.word	0x0801f118

0800acb0 <__ulp>:
 800acb0:	b082      	sub	sp, #8
 800acb2:	ed8d 0b00 	vstr	d0, [sp]
 800acb6:	9b01      	ldr	r3, [sp, #4]
 800acb8:	4912      	ldr	r1, [pc, #72]	; (800ad04 <__ulp+0x54>)
 800acba:	4019      	ands	r1, r3
 800acbc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800acc0:	2900      	cmp	r1, #0
 800acc2:	dd05      	ble.n	800acd0 <__ulp+0x20>
 800acc4:	2200      	movs	r2, #0
 800acc6:	460b      	mov	r3, r1
 800acc8:	ec43 2b10 	vmov	d0, r2, r3
 800accc:	b002      	add	sp, #8
 800acce:	4770      	bx	lr
 800acd0:	4249      	negs	r1, r1
 800acd2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800acd6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800acda:	f04f 0200 	mov.w	r2, #0
 800acde:	f04f 0300 	mov.w	r3, #0
 800ace2:	da04      	bge.n	800acee <__ulp+0x3e>
 800ace4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ace8:	fa41 f300 	asr.w	r3, r1, r0
 800acec:	e7ec      	b.n	800acc8 <__ulp+0x18>
 800acee:	f1a0 0114 	sub.w	r1, r0, #20
 800acf2:	291e      	cmp	r1, #30
 800acf4:	bfda      	itte	le
 800acf6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800acfa:	fa20 f101 	lsrle.w	r1, r0, r1
 800acfe:	2101      	movgt	r1, #1
 800ad00:	460a      	mov	r2, r1
 800ad02:	e7e1      	b.n	800acc8 <__ulp+0x18>
 800ad04:	7ff00000 	.word	0x7ff00000

0800ad08 <__b2d>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	6905      	ldr	r5, [r0, #16]
 800ad0c:	f100 0714 	add.w	r7, r0, #20
 800ad10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ad14:	1f2e      	subs	r6, r5, #4
 800ad16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f7ff fd52 	bl	800a7c4 <__hi0bits>
 800ad20:	f1c0 0320 	rsb	r3, r0, #32
 800ad24:	280a      	cmp	r0, #10
 800ad26:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ada4 <__b2d+0x9c>
 800ad2a:	600b      	str	r3, [r1, #0]
 800ad2c:	dc14      	bgt.n	800ad58 <__b2d+0x50>
 800ad2e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ad32:	fa24 f10e 	lsr.w	r1, r4, lr
 800ad36:	42b7      	cmp	r7, r6
 800ad38:	ea41 030c 	orr.w	r3, r1, ip
 800ad3c:	bf34      	ite	cc
 800ad3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ad42:	2100      	movcs	r1, #0
 800ad44:	3015      	adds	r0, #21
 800ad46:	fa04 f000 	lsl.w	r0, r4, r0
 800ad4a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ad4e:	ea40 0201 	orr.w	r2, r0, r1
 800ad52:	ec43 2b10 	vmov	d0, r2, r3
 800ad56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad58:	42b7      	cmp	r7, r6
 800ad5a:	bf3a      	itte	cc
 800ad5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ad60:	f1a5 0608 	subcc.w	r6, r5, #8
 800ad64:	2100      	movcs	r1, #0
 800ad66:	380b      	subs	r0, #11
 800ad68:	d017      	beq.n	800ad9a <__b2d+0x92>
 800ad6a:	f1c0 0c20 	rsb	ip, r0, #32
 800ad6e:	fa04 f500 	lsl.w	r5, r4, r0
 800ad72:	42be      	cmp	r6, r7
 800ad74:	fa21 f40c 	lsr.w	r4, r1, ip
 800ad78:	ea45 0504 	orr.w	r5, r5, r4
 800ad7c:	bf8c      	ite	hi
 800ad7e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ad82:	2400      	movls	r4, #0
 800ad84:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ad88:	fa01 f000 	lsl.w	r0, r1, r0
 800ad8c:	fa24 f40c 	lsr.w	r4, r4, ip
 800ad90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ad94:	ea40 0204 	orr.w	r2, r0, r4
 800ad98:	e7db      	b.n	800ad52 <__b2d+0x4a>
 800ad9a:	ea44 030c 	orr.w	r3, r4, ip
 800ad9e:	460a      	mov	r2, r1
 800ada0:	e7d7      	b.n	800ad52 <__b2d+0x4a>
 800ada2:	bf00      	nop
 800ada4:	3ff00000 	.word	0x3ff00000

0800ada8 <__d2b>:
 800ada8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adac:	4689      	mov	r9, r1
 800adae:	2101      	movs	r1, #1
 800adb0:	ec57 6b10 	vmov	r6, r7, d0
 800adb4:	4690      	mov	r8, r2
 800adb6:	f7ff fc0f 	bl	800a5d8 <_Balloc>
 800adba:	4604      	mov	r4, r0
 800adbc:	b930      	cbnz	r0, 800adcc <__d2b+0x24>
 800adbe:	4602      	mov	r2, r0
 800adc0:	4b25      	ldr	r3, [pc, #148]	; (800ae58 <__d2b+0xb0>)
 800adc2:	4826      	ldr	r0, [pc, #152]	; (800ae5c <__d2b+0xb4>)
 800adc4:	f240 310a 	movw	r1, #778	; 0x30a
 800adc8:	f000 fd80 	bl	800b8cc <__assert_func>
 800adcc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800add0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800add4:	bb35      	cbnz	r5, 800ae24 <__d2b+0x7c>
 800add6:	2e00      	cmp	r6, #0
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	d028      	beq.n	800ae2e <__d2b+0x86>
 800addc:	4668      	mov	r0, sp
 800adde:	9600      	str	r6, [sp, #0]
 800ade0:	f7ff fd10 	bl	800a804 <__lo0bits>
 800ade4:	9900      	ldr	r1, [sp, #0]
 800ade6:	b300      	cbz	r0, 800ae2a <__d2b+0x82>
 800ade8:	9a01      	ldr	r2, [sp, #4]
 800adea:	f1c0 0320 	rsb	r3, r0, #32
 800adee:	fa02 f303 	lsl.w	r3, r2, r3
 800adf2:	430b      	orrs	r3, r1
 800adf4:	40c2      	lsrs	r2, r0
 800adf6:	6163      	str	r3, [r4, #20]
 800adf8:	9201      	str	r2, [sp, #4]
 800adfa:	9b01      	ldr	r3, [sp, #4]
 800adfc:	61a3      	str	r3, [r4, #24]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	bf14      	ite	ne
 800ae02:	2202      	movne	r2, #2
 800ae04:	2201      	moveq	r2, #1
 800ae06:	6122      	str	r2, [r4, #16]
 800ae08:	b1d5      	cbz	r5, 800ae40 <__d2b+0x98>
 800ae0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae0e:	4405      	add	r5, r0
 800ae10:	f8c9 5000 	str.w	r5, [r9]
 800ae14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae18:	f8c8 0000 	str.w	r0, [r8]
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	b003      	add	sp, #12
 800ae20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae28:	e7d5      	b.n	800add6 <__d2b+0x2e>
 800ae2a:	6161      	str	r1, [r4, #20]
 800ae2c:	e7e5      	b.n	800adfa <__d2b+0x52>
 800ae2e:	a801      	add	r0, sp, #4
 800ae30:	f7ff fce8 	bl	800a804 <__lo0bits>
 800ae34:	9b01      	ldr	r3, [sp, #4]
 800ae36:	6163      	str	r3, [r4, #20]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	6122      	str	r2, [r4, #16]
 800ae3c:	3020      	adds	r0, #32
 800ae3e:	e7e3      	b.n	800ae08 <__d2b+0x60>
 800ae40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae48:	f8c9 0000 	str.w	r0, [r9]
 800ae4c:	6918      	ldr	r0, [r3, #16]
 800ae4e:	f7ff fcb9 	bl	800a7c4 <__hi0bits>
 800ae52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae56:	e7df      	b.n	800ae18 <__d2b+0x70>
 800ae58:	0801f024 	.word	0x0801f024
 800ae5c:	0801f118 	.word	0x0801f118

0800ae60 <__ratio>:
 800ae60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	4688      	mov	r8, r1
 800ae66:	4669      	mov	r1, sp
 800ae68:	4681      	mov	r9, r0
 800ae6a:	f7ff ff4d 	bl	800ad08 <__b2d>
 800ae6e:	a901      	add	r1, sp, #4
 800ae70:	4640      	mov	r0, r8
 800ae72:	ec55 4b10 	vmov	r4, r5, d0
 800ae76:	f7ff ff47 	bl	800ad08 <__b2d>
 800ae7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ae82:	eba3 0c02 	sub.w	ip, r3, r2
 800ae86:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ae8a:	1a9b      	subs	r3, r3, r2
 800ae8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ae90:	ec51 0b10 	vmov	r0, r1, d0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bfd6      	itet	le
 800ae98:	460a      	movle	r2, r1
 800ae9a:	462a      	movgt	r2, r5
 800ae9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aea0:	468b      	mov	fp, r1
 800aea2:	462f      	mov	r7, r5
 800aea4:	bfd4      	ite	le
 800aea6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aeaa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aeae:	4620      	mov	r0, r4
 800aeb0:	ee10 2a10 	vmov	r2, s0
 800aeb4:	465b      	mov	r3, fp
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	f7f5 fcc8 	bl	800084c <__aeabi_ddiv>
 800aebc:	ec41 0b10 	vmov	d0, r0, r1
 800aec0:	b003      	add	sp, #12
 800aec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aec6 <__copybits>:
 800aec6:	3901      	subs	r1, #1
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	1149      	asrs	r1, r1, #5
 800aecc:	6914      	ldr	r4, [r2, #16]
 800aece:	3101      	adds	r1, #1
 800aed0:	f102 0314 	add.w	r3, r2, #20
 800aed4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aed8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aedc:	1f05      	subs	r5, r0, #4
 800aede:	42a3      	cmp	r3, r4
 800aee0:	d30c      	bcc.n	800aefc <__copybits+0x36>
 800aee2:	1aa3      	subs	r3, r4, r2
 800aee4:	3b11      	subs	r3, #17
 800aee6:	f023 0303 	bic.w	r3, r3, #3
 800aeea:	3211      	adds	r2, #17
 800aeec:	42a2      	cmp	r2, r4
 800aeee:	bf88      	it	hi
 800aef0:	2300      	movhi	r3, #0
 800aef2:	4418      	add	r0, r3
 800aef4:	2300      	movs	r3, #0
 800aef6:	4288      	cmp	r0, r1
 800aef8:	d305      	bcc.n	800af06 <__copybits+0x40>
 800aefa:	bd70      	pop	{r4, r5, r6, pc}
 800aefc:	f853 6b04 	ldr.w	r6, [r3], #4
 800af00:	f845 6f04 	str.w	r6, [r5, #4]!
 800af04:	e7eb      	b.n	800aede <__copybits+0x18>
 800af06:	f840 3b04 	str.w	r3, [r0], #4
 800af0a:	e7f4      	b.n	800aef6 <__copybits+0x30>

0800af0c <__any_on>:
 800af0c:	f100 0214 	add.w	r2, r0, #20
 800af10:	6900      	ldr	r0, [r0, #16]
 800af12:	114b      	asrs	r3, r1, #5
 800af14:	4298      	cmp	r0, r3
 800af16:	b510      	push	{r4, lr}
 800af18:	db11      	blt.n	800af3e <__any_on+0x32>
 800af1a:	dd0a      	ble.n	800af32 <__any_on+0x26>
 800af1c:	f011 011f 	ands.w	r1, r1, #31
 800af20:	d007      	beq.n	800af32 <__any_on+0x26>
 800af22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af26:	fa24 f001 	lsr.w	r0, r4, r1
 800af2a:	fa00 f101 	lsl.w	r1, r0, r1
 800af2e:	428c      	cmp	r4, r1
 800af30:	d10b      	bne.n	800af4a <__any_on+0x3e>
 800af32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af36:	4293      	cmp	r3, r2
 800af38:	d803      	bhi.n	800af42 <__any_on+0x36>
 800af3a:	2000      	movs	r0, #0
 800af3c:	bd10      	pop	{r4, pc}
 800af3e:	4603      	mov	r3, r0
 800af40:	e7f7      	b.n	800af32 <__any_on+0x26>
 800af42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af46:	2900      	cmp	r1, #0
 800af48:	d0f5      	beq.n	800af36 <__any_on+0x2a>
 800af4a:	2001      	movs	r0, #1
 800af4c:	e7f6      	b.n	800af3c <__any_on+0x30>

0800af4e <_calloc_r>:
 800af4e:	b513      	push	{r0, r1, r4, lr}
 800af50:	434a      	muls	r2, r1
 800af52:	4611      	mov	r1, r2
 800af54:	9201      	str	r2, [sp, #4]
 800af56:	f000 f859 	bl	800b00c <_malloc_r>
 800af5a:	4604      	mov	r4, r0
 800af5c:	b118      	cbz	r0, 800af66 <_calloc_r+0x18>
 800af5e:	9a01      	ldr	r2, [sp, #4]
 800af60:	2100      	movs	r1, #0
 800af62:	f7fc fab9 	bl	80074d8 <memset>
 800af66:	4620      	mov	r0, r4
 800af68:	b002      	add	sp, #8
 800af6a:	bd10      	pop	{r4, pc}

0800af6c <_free_r>:
 800af6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af6e:	2900      	cmp	r1, #0
 800af70:	d048      	beq.n	800b004 <_free_r+0x98>
 800af72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af76:	9001      	str	r0, [sp, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f1a1 0404 	sub.w	r4, r1, #4
 800af7e:	bfb8      	it	lt
 800af80:	18e4      	addlt	r4, r4, r3
 800af82:	f000 fe35 	bl	800bbf0 <__malloc_lock>
 800af86:	4a20      	ldr	r2, [pc, #128]	; (800b008 <_free_r+0x9c>)
 800af88:	9801      	ldr	r0, [sp, #4]
 800af8a:	6813      	ldr	r3, [r2, #0]
 800af8c:	4615      	mov	r5, r2
 800af8e:	b933      	cbnz	r3, 800af9e <_free_r+0x32>
 800af90:	6063      	str	r3, [r4, #4]
 800af92:	6014      	str	r4, [r2, #0]
 800af94:	b003      	add	sp, #12
 800af96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af9a:	f000 be2f 	b.w	800bbfc <__malloc_unlock>
 800af9e:	42a3      	cmp	r3, r4
 800afa0:	d90b      	bls.n	800afba <_free_r+0x4e>
 800afa2:	6821      	ldr	r1, [r4, #0]
 800afa4:	1862      	adds	r2, r4, r1
 800afa6:	4293      	cmp	r3, r2
 800afa8:	bf04      	itt	eq
 800afaa:	681a      	ldreq	r2, [r3, #0]
 800afac:	685b      	ldreq	r3, [r3, #4]
 800afae:	6063      	str	r3, [r4, #4]
 800afb0:	bf04      	itt	eq
 800afb2:	1852      	addeq	r2, r2, r1
 800afb4:	6022      	streq	r2, [r4, #0]
 800afb6:	602c      	str	r4, [r5, #0]
 800afb8:	e7ec      	b.n	800af94 <_free_r+0x28>
 800afba:	461a      	mov	r2, r3
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	b10b      	cbz	r3, 800afc4 <_free_r+0x58>
 800afc0:	42a3      	cmp	r3, r4
 800afc2:	d9fa      	bls.n	800afba <_free_r+0x4e>
 800afc4:	6811      	ldr	r1, [r2, #0]
 800afc6:	1855      	adds	r5, r2, r1
 800afc8:	42a5      	cmp	r5, r4
 800afca:	d10b      	bne.n	800afe4 <_free_r+0x78>
 800afcc:	6824      	ldr	r4, [r4, #0]
 800afce:	4421      	add	r1, r4
 800afd0:	1854      	adds	r4, r2, r1
 800afd2:	42a3      	cmp	r3, r4
 800afd4:	6011      	str	r1, [r2, #0]
 800afd6:	d1dd      	bne.n	800af94 <_free_r+0x28>
 800afd8:	681c      	ldr	r4, [r3, #0]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	6053      	str	r3, [r2, #4]
 800afde:	4421      	add	r1, r4
 800afe0:	6011      	str	r1, [r2, #0]
 800afe2:	e7d7      	b.n	800af94 <_free_r+0x28>
 800afe4:	d902      	bls.n	800afec <_free_r+0x80>
 800afe6:	230c      	movs	r3, #12
 800afe8:	6003      	str	r3, [r0, #0]
 800afea:	e7d3      	b.n	800af94 <_free_r+0x28>
 800afec:	6825      	ldr	r5, [r4, #0]
 800afee:	1961      	adds	r1, r4, r5
 800aff0:	428b      	cmp	r3, r1
 800aff2:	bf04      	itt	eq
 800aff4:	6819      	ldreq	r1, [r3, #0]
 800aff6:	685b      	ldreq	r3, [r3, #4]
 800aff8:	6063      	str	r3, [r4, #4]
 800affa:	bf04      	itt	eq
 800affc:	1949      	addeq	r1, r1, r5
 800affe:	6021      	streq	r1, [r4, #0]
 800b000:	6054      	str	r4, [r2, #4]
 800b002:	e7c7      	b.n	800af94 <_free_r+0x28>
 800b004:	b003      	add	sp, #12
 800b006:	bd30      	pop	{r4, r5, pc}
 800b008:	20000220 	.word	0x20000220

0800b00c <_malloc_r>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	1ccd      	adds	r5, r1, #3
 800b010:	f025 0503 	bic.w	r5, r5, #3
 800b014:	3508      	adds	r5, #8
 800b016:	2d0c      	cmp	r5, #12
 800b018:	bf38      	it	cc
 800b01a:	250c      	movcc	r5, #12
 800b01c:	2d00      	cmp	r5, #0
 800b01e:	4606      	mov	r6, r0
 800b020:	db01      	blt.n	800b026 <_malloc_r+0x1a>
 800b022:	42a9      	cmp	r1, r5
 800b024:	d903      	bls.n	800b02e <_malloc_r+0x22>
 800b026:	230c      	movs	r3, #12
 800b028:	6033      	str	r3, [r6, #0]
 800b02a:	2000      	movs	r0, #0
 800b02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b02e:	f000 fddf 	bl	800bbf0 <__malloc_lock>
 800b032:	4921      	ldr	r1, [pc, #132]	; (800b0b8 <_malloc_r+0xac>)
 800b034:	680a      	ldr	r2, [r1, #0]
 800b036:	4614      	mov	r4, r2
 800b038:	b99c      	cbnz	r4, 800b062 <_malloc_r+0x56>
 800b03a:	4f20      	ldr	r7, [pc, #128]	; (800b0bc <_malloc_r+0xb0>)
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	b923      	cbnz	r3, 800b04a <_malloc_r+0x3e>
 800b040:	4621      	mov	r1, r4
 800b042:	4630      	mov	r0, r6
 800b044:	f000 fafc 	bl	800b640 <_sbrk_r>
 800b048:	6038      	str	r0, [r7, #0]
 800b04a:	4629      	mov	r1, r5
 800b04c:	4630      	mov	r0, r6
 800b04e:	f000 faf7 	bl	800b640 <_sbrk_r>
 800b052:	1c43      	adds	r3, r0, #1
 800b054:	d123      	bne.n	800b09e <_malloc_r+0x92>
 800b056:	230c      	movs	r3, #12
 800b058:	6033      	str	r3, [r6, #0]
 800b05a:	4630      	mov	r0, r6
 800b05c:	f000 fdce 	bl	800bbfc <__malloc_unlock>
 800b060:	e7e3      	b.n	800b02a <_malloc_r+0x1e>
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	1b5b      	subs	r3, r3, r5
 800b066:	d417      	bmi.n	800b098 <_malloc_r+0x8c>
 800b068:	2b0b      	cmp	r3, #11
 800b06a:	d903      	bls.n	800b074 <_malloc_r+0x68>
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	441c      	add	r4, r3
 800b070:	6025      	str	r5, [r4, #0]
 800b072:	e004      	b.n	800b07e <_malloc_r+0x72>
 800b074:	6863      	ldr	r3, [r4, #4]
 800b076:	42a2      	cmp	r2, r4
 800b078:	bf0c      	ite	eq
 800b07a:	600b      	streq	r3, [r1, #0]
 800b07c:	6053      	strne	r3, [r2, #4]
 800b07e:	4630      	mov	r0, r6
 800b080:	f000 fdbc 	bl	800bbfc <__malloc_unlock>
 800b084:	f104 000b 	add.w	r0, r4, #11
 800b088:	1d23      	adds	r3, r4, #4
 800b08a:	f020 0007 	bic.w	r0, r0, #7
 800b08e:	1ac2      	subs	r2, r0, r3
 800b090:	d0cc      	beq.n	800b02c <_malloc_r+0x20>
 800b092:	1a1b      	subs	r3, r3, r0
 800b094:	50a3      	str	r3, [r4, r2]
 800b096:	e7c9      	b.n	800b02c <_malloc_r+0x20>
 800b098:	4622      	mov	r2, r4
 800b09a:	6864      	ldr	r4, [r4, #4]
 800b09c:	e7cc      	b.n	800b038 <_malloc_r+0x2c>
 800b09e:	1cc4      	adds	r4, r0, #3
 800b0a0:	f024 0403 	bic.w	r4, r4, #3
 800b0a4:	42a0      	cmp	r0, r4
 800b0a6:	d0e3      	beq.n	800b070 <_malloc_r+0x64>
 800b0a8:	1a21      	subs	r1, r4, r0
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	f000 fac8 	bl	800b640 <_sbrk_r>
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	d1dd      	bne.n	800b070 <_malloc_r+0x64>
 800b0b4:	e7cf      	b.n	800b056 <_malloc_r+0x4a>
 800b0b6:	bf00      	nop
 800b0b8:	20000220 	.word	0x20000220
 800b0bc:	20000224 	.word	0x20000224

0800b0c0 <__ssputs_r>:
 800b0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c4:	688e      	ldr	r6, [r1, #8]
 800b0c6:	429e      	cmp	r6, r3
 800b0c8:	4682      	mov	sl, r0
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	4690      	mov	r8, r2
 800b0ce:	461f      	mov	r7, r3
 800b0d0:	d838      	bhi.n	800b144 <__ssputs_r+0x84>
 800b0d2:	898a      	ldrh	r2, [r1, #12]
 800b0d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0d8:	d032      	beq.n	800b140 <__ssputs_r+0x80>
 800b0da:	6825      	ldr	r5, [r4, #0]
 800b0dc:	6909      	ldr	r1, [r1, #16]
 800b0de:	eba5 0901 	sub.w	r9, r5, r1
 800b0e2:	6965      	ldr	r5, [r4, #20]
 800b0e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	444b      	add	r3, r9
 800b0f0:	106d      	asrs	r5, r5, #1
 800b0f2:	429d      	cmp	r5, r3
 800b0f4:	bf38      	it	cc
 800b0f6:	461d      	movcc	r5, r3
 800b0f8:	0553      	lsls	r3, r2, #21
 800b0fa:	d531      	bpl.n	800b160 <__ssputs_r+0xa0>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	f7ff ff85 	bl	800b00c <_malloc_r>
 800b102:	4606      	mov	r6, r0
 800b104:	b950      	cbnz	r0, 800b11c <__ssputs_r+0x5c>
 800b106:	230c      	movs	r3, #12
 800b108:	f8ca 3000 	str.w	r3, [sl]
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b112:	81a3      	strh	r3, [r4, #12]
 800b114:	f04f 30ff 	mov.w	r0, #4294967295
 800b118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b11c:	6921      	ldr	r1, [r4, #16]
 800b11e:	464a      	mov	r2, r9
 800b120:	f7ff fa4c 	bl	800a5bc <memcpy>
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b12e:	81a3      	strh	r3, [r4, #12]
 800b130:	6126      	str	r6, [r4, #16]
 800b132:	6165      	str	r5, [r4, #20]
 800b134:	444e      	add	r6, r9
 800b136:	eba5 0509 	sub.w	r5, r5, r9
 800b13a:	6026      	str	r6, [r4, #0]
 800b13c:	60a5      	str	r5, [r4, #8]
 800b13e:	463e      	mov	r6, r7
 800b140:	42be      	cmp	r6, r7
 800b142:	d900      	bls.n	800b146 <__ssputs_r+0x86>
 800b144:	463e      	mov	r6, r7
 800b146:	4632      	mov	r2, r6
 800b148:	6820      	ldr	r0, [r4, #0]
 800b14a:	4641      	mov	r1, r8
 800b14c:	f000 fd36 	bl	800bbbc <memmove>
 800b150:	68a3      	ldr	r3, [r4, #8]
 800b152:	6822      	ldr	r2, [r4, #0]
 800b154:	1b9b      	subs	r3, r3, r6
 800b156:	4432      	add	r2, r6
 800b158:	60a3      	str	r3, [r4, #8]
 800b15a:	6022      	str	r2, [r4, #0]
 800b15c:	2000      	movs	r0, #0
 800b15e:	e7db      	b.n	800b118 <__ssputs_r+0x58>
 800b160:	462a      	mov	r2, r5
 800b162:	f000 fd51 	bl	800bc08 <_realloc_r>
 800b166:	4606      	mov	r6, r0
 800b168:	2800      	cmp	r0, #0
 800b16a:	d1e1      	bne.n	800b130 <__ssputs_r+0x70>
 800b16c:	6921      	ldr	r1, [r4, #16]
 800b16e:	4650      	mov	r0, sl
 800b170:	f7ff fefc 	bl	800af6c <_free_r>
 800b174:	e7c7      	b.n	800b106 <__ssputs_r+0x46>
	...

0800b178 <_svfiprintf_r>:
 800b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	4698      	mov	r8, r3
 800b17e:	898b      	ldrh	r3, [r1, #12]
 800b180:	061b      	lsls	r3, r3, #24
 800b182:	b09d      	sub	sp, #116	; 0x74
 800b184:	4607      	mov	r7, r0
 800b186:	460d      	mov	r5, r1
 800b188:	4614      	mov	r4, r2
 800b18a:	d50e      	bpl.n	800b1aa <_svfiprintf_r+0x32>
 800b18c:	690b      	ldr	r3, [r1, #16]
 800b18e:	b963      	cbnz	r3, 800b1aa <_svfiprintf_r+0x32>
 800b190:	2140      	movs	r1, #64	; 0x40
 800b192:	f7ff ff3b 	bl	800b00c <_malloc_r>
 800b196:	6028      	str	r0, [r5, #0]
 800b198:	6128      	str	r0, [r5, #16]
 800b19a:	b920      	cbnz	r0, 800b1a6 <_svfiprintf_r+0x2e>
 800b19c:	230c      	movs	r3, #12
 800b19e:	603b      	str	r3, [r7, #0]
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	e0d1      	b.n	800b34a <_svfiprintf_r+0x1d2>
 800b1a6:	2340      	movs	r3, #64	; 0x40
 800b1a8:	616b      	str	r3, [r5, #20]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ae:	2320      	movs	r3, #32
 800b1b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1b8:	2330      	movs	r3, #48	; 0x30
 800b1ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b364 <_svfiprintf_r+0x1ec>
 800b1be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c2:	f04f 0901 	mov.w	r9, #1
 800b1c6:	4623      	mov	r3, r4
 800b1c8:	469a      	mov	sl, r3
 800b1ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ce:	b10a      	cbz	r2, 800b1d4 <_svfiprintf_r+0x5c>
 800b1d0:	2a25      	cmp	r2, #37	; 0x25
 800b1d2:	d1f9      	bne.n	800b1c8 <_svfiprintf_r+0x50>
 800b1d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d8:	d00b      	beq.n	800b1f2 <_svfiprintf_r+0x7a>
 800b1da:	465b      	mov	r3, fp
 800b1dc:	4622      	mov	r2, r4
 800b1de:	4629      	mov	r1, r5
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	f7ff ff6d 	bl	800b0c0 <__ssputs_r>
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	f000 80aa 	beq.w	800b340 <_svfiprintf_r+0x1c8>
 800b1ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ee:	445a      	add	r2, fp
 800b1f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f000 80a2 	beq.w	800b340 <_svfiprintf_r+0x1c8>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b206:	f10a 0a01 	add.w	sl, sl, #1
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	9307      	str	r3, [sp, #28]
 800b20e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b212:	931a      	str	r3, [sp, #104]	; 0x68
 800b214:	4654      	mov	r4, sl
 800b216:	2205      	movs	r2, #5
 800b218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21c:	4851      	ldr	r0, [pc, #324]	; (800b364 <_svfiprintf_r+0x1ec>)
 800b21e:	f7f4 ffdf 	bl	80001e0 <memchr>
 800b222:	9a04      	ldr	r2, [sp, #16]
 800b224:	b9d8      	cbnz	r0, 800b25e <_svfiprintf_r+0xe6>
 800b226:	06d0      	lsls	r0, r2, #27
 800b228:	bf44      	itt	mi
 800b22a:	2320      	movmi	r3, #32
 800b22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b230:	0711      	lsls	r1, r2, #28
 800b232:	bf44      	itt	mi
 800b234:	232b      	movmi	r3, #43	; 0x2b
 800b236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b23a:	f89a 3000 	ldrb.w	r3, [sl]
 800b23e:	2b2a      	cmp	r3, #42	; 0x2a
 800b240:	d015      	beq.n	800b26e <_svfiprintf_r+0xf6>
 800b242:	9a07      	ldr	r2, [sp, #28]
 800b244:	4654      	mov	r4, sl
 800b246:	2000      	movs	r0, #0
 800b248:	f04f 0c0a 	mov.w	ip, #10
 800b24c:	4621      	mov	r1, r4
 800b24e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b252:	3b30      	subs	r3, #48	; 0x30
 800b254:	2b09      	cmp	r3, #9
 800b256:	d94e      	bls.n	800b2f6 <_svfiprintf_r+0x17e>
 800b258:	b1b0      	cbz	r0, 800b288 <_svfiprintf_r+0x110>
 800b25a:	9207      	str	r2, [sp, #28]
 800b25c:	e014      	b.n	800b288 <_svfiprintf_r+0x110>
 800b25e:	eba0 0308 	sub.w	r3, r0, r8
 800b262:	fa09 f303 	lsl.w	r3, r9, r3
 800b266:	4313      	orrs	r3, r2
 800b268:	9304      	str	r3, [sp, #16]
 800b26a:	46a2      	mov	sl, r4
 800b26c:	e7d2      	b.n	800b214 <_svfiprintf_r+0x9c>
 800b26e:	9b03      	ldr	r3, [sp, #12]
 800b270:	1d19      	adds	r1, r3, #4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	9103      	str	r1, [sp, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	bfbb      	ittet	lt
 800b27a:	425b      	neglt	r3, r3
 800b27c:	f042 0202 	orrlt.w	r2, r2, #2
 800b280:	9307      	strge	r3, [sp, #28]
 800b282:	9307      	strlt	r3, [sp, #28]
 800b284:	bfb8      	it	lt
 800b286:	9204      	strlt	r2, [sp, #16]
 800b288:	7823      	ldrb	r3, [r4, #0]
 800b28a:	2b2e      	cmp	r3, #46	; 0x2e
 800b28c:	d10c      	bne.n	800b2a8 <_svfiprintf_r+0x130>
 800b28e:	7863      	ldrb	r3, [r4, #1]
 800b290:	2b2a      	cmp	r3, #42	; 0x2a
 800b292:	d135      	bne.n	800b300 <_svfiprintf_r+0x188>
 800b294:	9b03      	ldr	r3, [sp, #12]
 800b296:	1d1a      	adds	r2, r3, #4
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	9203      	str	r2, [sp, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	bfb8      	it	lt
 800b2a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2a4:	3402      	adds	r4, #2
 800b2a6:	9305      	str	r3, [sp, #20]
 800b2a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b374 <_svfiprintf_r+0x1fc>
 800b2ac:	7821      	ldrb	r1, [r4, #0]
 800b2ae:	2203      	movs	r2, #3
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	f7f4 ff95 	bl	80001e0 <memchr>
 800b2b6:	b140      	cbz	r0, 800b2ca <_svfiprintf_r+0x152>
 800b2b8:	2340      	movs	r3, #64	; 0x40
 800b2ba:	eba0 000a 	sub.w	r0, r0, sl
 800b2be:	fa03 f000 	lsl.w	r0, r3, r0
 800b2c2:	9b04      	ldr	r3, [sp, #16]
 800b2c4:	4303      	orrs	r3, r0
 800b2c6:	3401      	adds	r4, #1
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ce:	4826      	ldr	r0, [pc, #152]	; (800b368 <_svfiprintf_r+0x1f0>)
 800b2d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2d4:	2206      	movs	r2, #6
 800b2d6:	f7f4 ff83 	bl	80001e0 <memchr>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d038      	beq.n	800b350 <_svfiprintf_r+0x1d8>
 800b2de:	4b23      	ldr	r3, [pc, #140]	; (800b36c <_svfiprintf_r+0x1f4>)
 800b2e0:	bb1b      	cbnz	r3, 800b32a <_svfiprintf_r+0x1b2>
 800b2e2:	9b03      	ldr	r3, [sp, #12]
 800b2e4:	3307      	adds	r3, #7
 800b2e6:	f023 0307 	bic.w	r3, r3, #7
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	9303      	str	r3, [sp, #12]
 800b2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f0:	4433      	add	r3, r6
 800b2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f4:	e767      	b.n	800b1c6 <_svfiprintf_r+0x4e>
 800b2f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	2001      	movs	r0, #1
 800b2fe:	e7a5      	b.n	800b24c <_svfiprintf_r+0xd4>
 800b300:	2300      	movs	r3, #0
 800b302:	3401      	adds	r4, #1
 800b304:	9305      	str	r3, [sp, #20]
 800b306:	4619      	mov	r1, r3
 800b308:	f04f 0c0a 	mov.w	ip, #10
 800b30c:	4620      	mov	r0, r4
 800b30e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b312:	3a30      	subs	r2, #48	; 0x30
 800b314:	2a09      	cmp	r2, #9
 800b316:	d903      	bls.n	800b320 <_svfiprintf_r+0x1a8>
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d0c5      	beq.n	800b2a8 <_svfiprintf_r+0x130>
 800b31c:	9105      	str	r1, [sp, #20]
 800b31e:	e7c3      	b.n	800b2a8 <_svfiprintf_r+0x130>
 800b320:	fb0c 2101 	mla	r1, ip, r1, r2
 800b324:	4604      	mov	r4, r0
 800b326:	2301      	movs	r3, #1
 800b328:	e7f0      	b.n	800b30c <_svfiprintf_r+0x194>
 800b32a:	ab03      	add	r3, sp, #12
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	462a      	mov	r2, r5
 800b330:	4b0f      	ldr	r3, [pc, #60]	; (800b370 <_svfiprintf_r+0x1f8>)
 800b332:	a904      	add	r1, sp, #16
 800b334:	4638      	mov	r0, r7
 800b336:	f7fc f977 	bl	8007628 <_printf_float>
 800b33a:	1c42      	adds	r2, r0, #1
 800b33c:	4606      	mov	r6, r0
 800b33e:	d1d6      	bne.n	800b2ee <_svfiprintf_r+0x176>
 800b340:	89ab      	ldrh	r3, [r5, #12]
 800b342:	065b      	lsls	r3, r3, #25
 800b344:	f53f af2c 	bmi.w	800b1a0 <_svfiprintf_r+0x28>
 800b348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b34a:	b01d      	add	sp, #116	; 0x74
 800b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b350:	ab03      	add	r3, sp, #12
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	462a      	mov	r2, r5
 800b356:	4b06      	ldr	r3, [pc, #24]	; (800b370 <_svfiprintf_r+0x1f8>)
 800b358:	a904      	add	r1, sp, #16
 800b35a:	4638      	mov	r0, r7
 800b35c:	f7fc fc08 	bl	8007b70 <_printf_i>
 800b360:	e7eb      	b.n	800b33a <_svfiprintf_r+0x1c2>
 800b362:	bf00      	nop
 800b364:	0801f274 	.word	0x0801f274
 800b368:	0801f27e 	.word	0x0801f27e
 800b36c:	08007629 	.word	0x08007629
 800b370:	0800b0c1 	.word	0x0800b0c1
 800b374:	0801f27a 	.word	0x0801f27a

0800b378 <__sfputc_r>:
 800b378:	6893      	ldr	r3, [r2, #8]
 800b37a:	3b01      	subs	r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	b410      	push	{r4}
 800b380:	6093      	str	r3, [r2, #8]
 800b382:	da08      	bge.n	800b396 <__sfputc_r+0x1e>
 800b384:	6994      	ldr	r4, [r2, #24]
 800b386:	42a3      	cmp	r3, r4
 800b388:	db01      	blt.n	800b38e <__sfputc_r+0x16>
 800b38a:	290a      	cmp	r1, #10
 800b38c:	d103      	bne.n	800b396 <__sfputc_r+0x1e>
 800b38e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b392:	f000 b9bb 	b.w	800b70c <__swbuf_r>
 800b396:	6813      	ldr	r3, [r2, #0]
 800b398:	1c58      	adds	r0, r3, #1
 800b39a:	6010      	str	r0, [r2, #0]
 800b39c:	7019      	strb	r1, [r3, #0]
 800b39e:	4608      	mov	r0, r1
 800b3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <__sfputs_r>:
 800b3a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a8:	4606      	mov	r6, r0
 800b3aa:	460f      	mov	r7, r1
 800b3ac:	4614      	mov	r4, r2
 800b3ae:	18d5      	adds	r5, r2, r3
 800b3b0:	42ac      	cmp	r4, r5
 800b3b2:	d101      	bne.n	800b3b8 <__sfputs_r+0x12>
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	e007      	b.n	800b3c8 <__sfputs_r+0x22>
 800b3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3bc:	463a      	mov	r2, r7
 800b3be:	4630      	mov	r0, r6
 800b3c0:	f7ff ffda 	bl	800b378 <__sfputc_r>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d1f3      	bne.n	800b3b0 <__sfputs_r+0xa>
 800b3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3cc <_vfiprintf_r>:
 800b3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d0:	460d      	mov	r5, r1
 800b3d2:	b09d      	sub	sp, #116	; 0x74
 800b3d4:	4614      	mov	r4, r2
 800b3d6:	4698      	mov	r8, r3
 800b3d8:	4606      	mov	r6, r0
 800b3da:	b118      	cbz	r0, 800b3e4 <_vfiprintf_r+0x18>
 800b3dc:	6983      	ldr	r3, [r0, #24]
 800b3de:	b90b      	cbnz	r3, 800b3e4 <_vfiprintf_r+0x18>
 800b3e0:	f7fe fcbe 	bl	8009d60 <__sinit>
 800b3e4:	4b89      	ldr	r3, [pc, #548]	; (800b60c <_vfiprintf_r+0x240>)
 800b3e6:	429d      	cmp	r5, r3
 800b3e8:	d11b      	bne.n	800b422 <_vfiprintf_r+0x56>
 800b3ea:	6875      	ldr	r5, [r6, #4]
 800b3ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3ee:	07d9      	lsls	r1, r3, #31
 800b3f0:	d405      	bmi.n	800b3fe <_vfiprintf_r+0x32>
 800b3f2:	89ab      	ldrh	r3, [r5, #12]
 800b3f4:	059a      	lsls	r2, r3, #22
 800b3f6:	d402      	bmi.n	800b3fe <_vfiprintf_r+0x32>
 800b3f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3fa:	f7ff f8c2 	bl	800a582 <__retarget_lock_acquire_recursive>
 800b3fe:	89ab      	ldrh	r3, [r5, #12]
 800b400:	071b      	lsls	r3, r3, #28
 800b402:	d501      	bpl.n	800b408 <_vfiprintf_r+0x3c>
 800b404:	692b      	ldr	r3, [r5, #16]
 800b406:	b9eb      	cbnz	r3, 800b444 <_vfiprintf_r+0x78>
 800b408:	4629      	mov	r1, r5
 800b40a:	4630      	mov	r0, r6
 800b40c:	f000 f9f0 	bl	800b7f0 <__swsetup_r>
 800b410:	b1c0      	cbz	r0, 800b444 <_vfiprintf_r+0x78>
 800b412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b414:	07dc      	lsls	r4, r3, #31
 800b416:	d50e      	bpl.n	800b436 <_vfiprintf_r+0x6a>
 800b418:	f04f 30ff 	mov.w	r0, #4294967295
 800b41c:	b01d      	add	sp, #116	; 0x74
 800b41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b422:	4b7b      	ldr	r3, [pc, #492]	; (800b610 <_vfiprintf_r+0x244>)
 800b424:	429d      	cmp	r5, r3
 800b426:	d101      	bne.n	800b42c <_vfiprintf_r+0x60>
 800b428:	68b5      	ldr	r5, [r6, #8]
 800b42a:	e7df      	b.n	800b3ec <_vfiprintf_r+0x20>
 800b42c:	4b79      	ldr	r3, [pc, #484]	; (800b614 <_vfiprintf_r+0x248>)
 800b42e:	429d      	cmp	r5, r3
 800b430:	bf08      	it	eq
 800b432:	68f5      	ldreq	r5, [r6, #12]
 800b434:	e7da      	b.n	800b3ec <_vfiprintf_r+0x20>
 800b436:	89ab      	ldrh	r3, [r5, #12]
 800b438:	0598      	lsls	r0, r3, #22
 800b43a:	d4ed      	bmi.n	800b418 <_vfiprintf_r+0x4c>
 800b43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b43e:	f7ff f8a1 	bl	800a584 <__retarget_lock_release_recursive>
 800b442:	e7e9      	b.n	800b418 <_vfiprintf_r+0x4c>
 800b444:	2300      	movs	r3, #0
 800b446:	9309      	str	r3, [sp, #36]	; 0x24
 800b448:	2320      	movs	r3, #32
 800b44a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b44e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b452:	2330      	movs	r3, #48	; 0x30
 800b454:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b618 <_vfiprintf_r+0x24c>
 800b458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b45c:	f04f 0901 	mov.w	r9, #1
 800b460:	4623      	mov	r3, r4
 800b462:	469a      	mov	sl, r3
 800b464:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b468:	b10a      	cbz	r2, 800b46e <_vfiprintf_r+0xa2>
 800b46a:	2a25      	cmp	r2, #37	; 0x25
 800b46c:	d1f9      	bne.n	800b462 <_vfiprintf_r+0x96>
 800b46e:	ebba 0b04 	subs.w	fp, sl, r4
 800b472:	d00b      	beq.n	800b48c <_vfiprintf_r+0xc0>
 800b474:	465b      	mov	r3, fp
 800b476:	4622      	mov	r2, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	4630      	mov	r0, r6
 800b47c:	f7ff ff93 	bl	800b3a6 <__sfputs_r>
 800b480:	3001      	adds	r0, #1
 800b482:	f000 80aa 	beq.w	800b5da <_vfiprintf_r+0x20e>
 800b486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b488:	445a      	add	r2, fp
 800b48a:	9209      	str	r2, [sp, #36]	; 0x24
 800b48c:	f89a 3000 	ldrb.w	r3, [sl]
 800b490:	2b00      	cmp	r3, #0
 800b492:	f000 80a2 	beq.w	800b5da <_vfiprintf_r+0x20e>
 800b496:	2300      	movs	r3, #0
 800b498:	f04f 32ff 	mov.w	r2, #4294967295
 800b49c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a0:	f10a 0a01 	add.w	sl, sl, #1
 800b4a4:	9304      	str	r3, [sp, #16]
 800b4a6:	9307      	str	r3, [sp, #28]
 800b4a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b4ae:	4654      	mov	r4, sl
 800b4b0:	2205      	movs	r2, #5
 800b4b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b6:	4858      	ldr	r0, [pc, #352]	; (800b618 <_vfiprintf_r+0x24c>)
 800b4b8:	f7f4 fe92 	bl	80001e0 <memchr>
 800b4bc:	9a04      	ldr	r2, [sp, #16]
 800b4be:	b9d8      	cbnz	r0, 800b4f8 <_vfiprintf_r+0x12c>
 800b4c0:	06d1      	lsls	r1, r2, #27
 800b4c2:	bf44      	itt	mi
 800b4c4:	2320      	movmi	r3, #32
 800b4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ca:	0713      	lsls	r3, r2, #28
 800b4cc:	bf44      	itt	mi
 800b4ce:	232b      	movmi	r3, #43	; 0x2b
 800b4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b4da:	d015      	beq.n	800b508 <_vfiprintf_r+0x13c>
 800b4dc:	9a07      	ldr	r2, [sp, #28]
 800b4de:	4654      	mov	r4, sl
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	f04f 0c0a 	mov.w	ip, #10
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ec:	3b30      	subs	r3, #48	; 0x30
 800b4ee:	2b09      	cmp	r3, #9
 800b4f0:	d94e      	bls.n	800b590 <_vfiprintf_r+0x1c4>
 800b4f2:	b1b0      	cbz	r0, 800b522 <_vfiprintf_r+0x156>
 800b4f4:	9207      	str	r2, [sp, #28]
 800b4f6:	e014      	b.n	800b522 <_vfiprintf_r+0x156>
 800b4f8:	eba0 0308 	sub.w	r3, r0, r8
 800b4fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b500:	4313      	orrs	r3, r2
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	46a2      	mov	sl, r4
 800b506:	e7d2      	b.n	800b4ae <_vfiprintf_r+0xe2>
 800b508:	9b03      	ldr	r3, [sp, #12]
 800b50a:	1d19      	adds	r1, r3, #4
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	9103      	str	r1, [sp, #12]
 800b510:	2b00      	cmp	r3, #0
 800b512:	bfbb      	ittet	lt
 800b514:	425b      	neglt	r3, r3
 800b516:	f042 0202 	orrlt.w	r2, r2, #2
 800b51a:	9307      	strge	r3, [sp, #28]
 800b51c:	9307      	strlt	r3, [sp, #28]
 800b51e:	bfb8      	it	lt
 800b520:	9204      	strlt	r2, [sp, #16]
 800b522:	7823      	ldrb	r3, [r4, #0]
 800b524:	2b2e      	cmp	r3, #46	; 0x2e
 800b526:	d10c      	bne.n	800b542 <_vfiprintf_r+0x176>
 800b528:	7863      	ldrb	r3, [r4, #1]
 800b52a:	2b2a      	cmp	r3, #42	; 0x2a
 800b52c:	d135      	bne.n	800b59a <_vfiprintf_r+0x1ce>
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	1d1a      	adds	r2, r3, #4
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	9203      	str	r2, [sp, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	bfb8      	it	lt
 800b53a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b53e:	3402      	adds	r4, #2
 800b540:	9305      	str	r3, [sp, #20]
 800b542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b628 <_vfiprintf_r+0x25c>
 800b546:	7821      	ldrb	r1, [r4, #0]
 800b548:	2203      	movs	r2, #3
 800b54a:	4650      	mov	r0, sl
 800b54c:	f7f4 fe48 	bl	80001e0 <memchr>
 800b550:	b140      	cbz	r0, 800b564 <_vfiprintf_r+0x198>
 800b552:	2340      	movs	r3, #64	; 0x40
 800b554:	eba0 000a 	sub.w	r0, r0, sl
 800b558:	fa03 f000 	lsl.w	r0, r3, r0
 800b55c:	9b04      	ldr	r3, [sp, #16]
 800b55e:	4303      	orrs	r3, r0
 800b560:	3401      	adds	r4, #1
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b568:	482c      	ldr	r0, [pc, #176]	; (800b61c <_vfiprintf_r+0x250>)
 800b56a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b56e:	2206      	movs	r2, #6
 800b570:	f7f4 fe36 	bl	80001e0 <memchr>
 800b574:	2800      	cmp	r0, #0
 800b576:	d03f      	beq.n	800b5f8 <_vfiprintf_r+0x22c>
 800b578:	4b29      	ldr	r3, [pc, #164]	; (800b620 <_vfiprintf_r+0x254>)
 800b57a:	bb1b      	cbnz	r3, 800b5c4 <_vfiprintf_r+0x1f8>
 800b57c:	9b03      	ldr	r3, [sp, #12]
 800b57e:	3307      	adds	r3, #7
 800b580:	f023 0307 	bic.w	r3, r3, #7
 800b584:	3308      	adds	r3, #8
 800b586:	9303      	str	r3, [sp, #12]
 800b588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58a:	443b      	add	r3, r7
 800b58c:	9309      	str	r3, [sp, #36]	; 0x24
 800b58e:	e767      	b.n	800b460 <_vfiprintf_r+0x94>
 800b590:	fb0c 3202 	mla	r2, ip, r2, r3
 800b594:	460c      	mov	r4, r1
 800b596:	2001      	movs	r0, #1
 800b598:	e7a5      	b.n	800b4e6 <_vfiprintf_r+0x11a>
 800b59a:	2300      	movs	r3, #0
 800b59c:	3401      	adds	r4, #1
 800b59e:	9305      	str	r3, [sp, #20]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	f04f 0c0a 	mov.w	ip, #10
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ac:	3a30      	subs	r2, #48	; 0x30
 800b5ae:	2a09      	cmp	r2, #9
 800b5b0:	d903      	bls.n	800b5ba <_vfiprintf_r+0x1ee>
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d0c5      	beq.n	800b542 <_vfiprintf_r+0x176>
 800b5b6:	9105      	str	r1, [sp, #20]
 800b5b8:	e7c3      	b.n	800b542 <_vfiprintf_r+0x176>
 800b5ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5be:	4604      	mov	r4, r0
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e7f0      	b.n	800b5a6 <_vfiprintf_r+0x1da>
 800b5c4:	ab03      	add	r3, sp, #12
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	462a      	mov	r2, r5
 800b5ca:	4b16      	ldr	r3, [pc, #88]	; (800b624 <_vfiprintf_r+0x258>)
 800b5cc:	a904      	add	r1, sp, #16
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	f7fc f82a 	bl	8007628 <_printf_float>
 800b5d4:	4607      	mov	r7, r0
 800b5d6:	1c78      	adds	r0, r7, #1
 800b5d8:	d1d6      	bne.n	800b588 <_vfiprintf_r+0x1bc>
 800b5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5dc:	07d9      	lsls	r1, r3, #31
 800b5de:	d405      	bmi.n	800b5ec <_vfiprintf_r+0x220>
 800b5e0:	89ab      	ldrh	r3, [r5, #12]
 800b5e2:	059a      	lsls	r2, r3, #22
 800b5e4:	d402      	bmi.n	800b5ec <_vfiprintf_r+0x220>
 800b5e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5e8:	f7fe ffcc 	bl	800a584 <__retarget_lock_release_recursive>
 800b5ec:	89ab      	ldrh	r3, [r5, #12]
 800b5ee:	065b      	lsls	r3, r3, #25
 800b5f0:	f53f af12 	bmi.w	800b418 <_vfiprintf_r+0x4c>
 800b5f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5f6:	e711      	b.n	800b41c <_vfiprintf_r+0x50>
 800b5f8:	ab03      	add	r3, sp, #12
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	462a      	mov	r2, r5
 800b5fe:	4b09      	ldr	r3, [pc, #36]	; (800b624 <_vfiprintf_r+0x258>)
 800b600:	a904      	add	r1, sp, #16
 800b602:	4630      	mov	r0, r6
 800b604:	f7fc fab4 	bl	8007b70 <_printf_i>
 800b608:	e7e4      	b.n	800b5d4 <_vfiprintf_r+0x208>
 800b60a:	bf00      	nop
 800b60c:	0801f058 	.word	0x0801f058
 800b610:	0801f078 	.word	0x0801f078
 800b614:	0801f038 	.word	0x0801f038
 800b618:	0801f274 	.word	0x0801f274
 800b61c:	0801f27e 	.word	0x0801f27e
 800b620:	08007629 	.word	0x08007629
 800b624:	0800b3a7 	.word	0x0800b3a7
 800b628:	0801f27a 	.word	0x0801f27a
 800b62c:	00000000 	.word	0x00000000

0800b630 <nan>:
 800b630:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b638 <nan+0x8>
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	00000000 	.word	0x00000000
 800b63c:	7ff80000 	.word	0x7ff80000

0800b640 <_sbrk_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4d06      	ldr	r5, [pc, #24]	; (800b65c <_sbrk_r+0x1c>)
 800b644:	2300      	movs	r3, #0
 800b646:	4604      	mov	r4, r0
 800b648:	4608      	mov	r0, r1
 800b64a:	602b      	str	r3, [r5, #0]
 800b64c:	f7f6 f89c 	bl	8001788 <_sbrk>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d102      	bne.n	800b65a <_sbrk_r+0x1a>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	b103      	cbz	r3, 800b65a <_sbrk_r+0x1a>
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	bd38      	pop	{r3, r4, r5, pc}
 800b65c:	20002370 	.word	0x20002370

0800b660 <__sread>:
 800b660:	b510      	push	{r4, lr}
 800b662:	460c      	mov	r4, r1
 800b664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b668:	f000 faf4 	bl	800bc54 <_read_r>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	bfab      	itete	ge
 800b670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b672:	89a3      	ldrhlt	r3, [r4, #12]
 800b674:	181b      	addge	r3, r3, r0
 800b676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b67a:	bfac      	ite	ge
 800b67c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b67e:	81a3      	strhlt	r3, [r4, #12]
 800b680:	bd10      	pop	{r4, pc}

0800b682 <__swrite>:
 800b682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b686:	461f      	mov	r7, r3
 800b688:	898b      	ldrh	r3, [r1, #12]
 800b68a:	05db      	lsls	r3, r3, #23
 800b68c:	4605      	mov	r5, r0
 800b68e:	460c      	mov	r4, r1
 800b690:	4616      	mov	r6, r2
 800b692:	d505      	bpl.n	800b6a0 <__swrite+0x1e>
 800b694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b698:	2302      	movs	r3, #2
 800b69a:	2200      	movs	r2, #0
 800b69c:	f000 fa18 	bl	800bad0 <_lseek_r>
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6aa:	81a3      	strh	r3, [r4, #12]
 800b6ac:	4632      	mov	r2, r6
 800b6ae:	463b      	mov	r3, r7
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b6:	f000 b889 	b.w	800b7cc <_write_r>

0800b6ba <__sseek>:
 800b6ba:	b510      	push	{r4, lr}
 800b6bc:	460c      	mov	r4, r1
 800b6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c2:	f000 fa05 	bl	800bad0 <_lseek_r>
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	bf15      	itete	ne
 800b6cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6d6:	81a3      	strheq	r3, [r4, #12]
 800b6d8:	bf18      	it	ne
 800b6da:	81a3      	strhne	r3, [r4, #12]
 800b6dc:	bd10      	pop	{r4, pc}

0800b6de <__sclose>:
 800b6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e2:	f000 b911 	b.w	800b908 <_close_r>

0800b6e6 <strncmp>:
 800b6e6:	b510      	push	{r4, lr}
 800b6e8:	b16a      	cbz	r2, 800b706 <strncmp+0x20>
 800b6ea:	3901      	subs	r1, #1
 800b6ec:	1884      	adds	r4, r0, r2
 800b6ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b6f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d103      	bne.n	800b702 <strncmp+0x1c>
 800b6fa:	42a0      	cmp	r0, r4
 800b6fc:	d001      	beq.n	800b702 <strncmp+0x1c>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1f5      	bne.n	800b6ee <strncmp+0x8>
 800b702:	1a98      	subs	r0, r3, r2
 800b704:	bd10      	pop	{r4, pc}
 800b706:	4610      	mov	r0, r2
 800b708:	e7fc      	b.n	800b704 <strncmp+0x1e>
	...

0800b70c <__swbuf_r>:
 800b70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b70e:	460e      	mov	r6, r1
 800b710:	4614      	mov	r4, r2
 800b712:	4605      	mov	r5, r0
 800b714:	b118      	cbz	r0, 800b71e <__swbuf_r+0x12>
 800b716:	6983      	ldr	r3, [r0, #24]
 800b718:	b90b      	cbnz	r3, 800b71e <__swbuf_r+0x12>
 800b71a:	f7fe fb21 	bl	8009d60 <__sinit>
 800b71e:	4b21      	ldr	r3, [pc, #132]	; (800b7a4 <__swbuf_r+0x98>)
 800b720:	429c      	cmp	r4, r3
 800b722:	d12b      	bne.n	800b77c <__swbuf_r+0x70>
 800b724:	686c      	ldr	r4, [r5, #4]
 800b726:	69a3      	ldr	r3, [r4, #24]
 800b728:	60a3      	str	r3, [r4, #8]
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	071a      	lsls	r2, r3, #28
 800b72e:	d52f      	bpl.n	800b790 <__swbuf_r+0x84>
 800b730:	6923      	ldr	r3, [r4, #16]
 800b732:	b36b      	cbz	r3, 800b790 <__swbuf_r+0x84>
 800b734:	6923      	ldr	r3, [r4, #16]
 800b736:	6820      	ldr	r0, [r4, #0]
 800b738:	1ac0      	subs	r0, r0, r3
 800b73a:	6963      	ldr	r3, [r4, #20]
 800b73c:	b2f6      	uxtb	r6, r6
 800b73e:	4283      	cmp	r3, r0
 800b740:	4637      	mov	r7, r6
 800b742:	dc04      	bgt.n	800b74e <__swbuf_r+0x42>
 800b744:	4621      	mov	r1, r4
 800b746:	4628      	mov	r0, r5
 800b748:	f000 f974 	bl	800ba34 <_fflush_r>
 800b74c:	bb30      	cbnz	r0, 800b79c <__swbuf_r+0x90>
 800b74e:	68a3      	ldr	r3, [r4, #8]
 800b750:	3b01      	subs	r3, #1
 800b752:	60a3      	str	r3, [r4, #8]
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	6022      	str	r2, [r4, #0]
 800b75a:	701e      	strb	r6, [r3, #0]
 800b75c:	6963      	ldr	r3, [r4, #20]
 800b75e:	3001      	adds	r0, #1
 800b760:	4283      	cmp	r3, r0
 800b762:	d004      	beq.n	800b76e <__swbuf_r+0x62>
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	07db      	lsls	r3, r3, #31
 800b768:	d506      	bpl.n	800b778 <__swbuf_r+0x6c>
 800b76a:	2e0a      	cmp	r6, #10
 800b76c:	d104      	bne.n	800b778 <__swbuf_r+0x6c>
 800b76e:	4621      	mov	r1, r4
 800b770:	4628      	mov	r0, r5
 800b772:	f000 f95f 	bl	800ba34 <_fflush_r>
 800b776:	b988      	cbnz	r0, 800b79c <__swbuf_r+0x90>
 800b778:	4638      	mov	r0, r7
 800b77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b77c:	4b0a      	ldr	r3, [pc, #40]	; (800b7a8 <__swbuf_r+0x9c>)
 800b77e:	429c      	cmp	r4, r3
 800b780:	d101      	bne.n	800b786 <__swbuf_r+0x7a>
 800b782:	68ac      	ldr	r4, [r5, #8]
 800b784:	e7cf      	b.n	800b726 <__swbuf_r+0x1a>
 800b786:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <__swbuf_r+0xa0>)
 800b788:	429c      	cmp	r4, r3
 800b78a:	bf08      	it	eq
 800b78c:	68ec      	ldreq	r4, [r5, #12]
 800b78e:	e7ca      	b.n	800b726 <__swbuf_r+0x1a>
 800b790:	4621      	mov	r1, r4
 800b792:	4628      	mov	r0, r5
 800b794:	f000 f82c 	bl	800b7f0 <__swsetup_r>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d0cb      	beq.n	800b734 <__swbuf_r+0x28>
 800b79c:	f04f 37ff 	mov.w	r7, #4294967295
 800b7a0:	e7ea      	b.n	800b778 <__swbuf_r+0x6c>
 800b7a2:	bf00      	nop
 800b7a4:	0801f058 	.word	0x0801f058
 800b7a8:	0801f078 	.word	0x0801f078
 800b7ac:	0801f038 	.word	0x0801f038

0800b7b0 <__ascii_wctomb>:
 800b7b0:	b149      	cbz	r1, 800b7c6 <__ascii_wctomb+0x16>
 800b7b2:	2aff      	cmp	r2, #255	; 0xff
 800b7b4:	bf85      	ittet	hi
 800b7b6:	238a      	movhi	r3, #138	; 0x8a
 800b7b8:	6003      	strhi	r3, [r0, #0]
 800b7ba:	700a      	strbls	r2, [r1, #0]
 800b7bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800b7c0:	bf98      	it	ls
 800b7c2:	2001      	movls	r0, #1
 800b7c4:	4770      	bx	lr
 800b7c6:	4608      	mov	r0, r1
 800b7c8:	4770      	bx	lr
	...

0800b7cc <_write_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d07      	ldr	r5, [pc, #28]	; (800b7ec <_write_r+0x20>)
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	602a      	str	r2, [r5, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f7f5 ff83 	bl	80016e6 <_write>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_write_r+0x1e>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_write_r+0x1e>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	20002370 	.word	0x20002370

0800b7f0 <__swsetup_r>:
 800b7f0:	4b32      	ldr	r3, [pc, #200]	; (800b8bc <__swsetup_r+0xcc>)
 800b7f2:	b570      	push	{r4, r5, r6, lr}
 800b7f4:	681d      	ldr	r5, [r3, #0]
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	460c      	mov	r4, r1
 800b7fa:	b125      	cbz	r5, 800b806 <__swsetup_r+0x16>
 800b7fc:	69ab      	ldr	r3, [r5, #24]
 800b7fe:	b913      	cbnz	r3, 800b806 <__swsetup_r+0x16>
 800b800:	4628      	mov	r0, r5
 800b802:	f7fe faad 	bl	8009d60 <__sinit>
 800b806:	4b2e      	ldr	r3, [pc, #184]	; (800b8c0 <__swsetup_r+0xd0>)
 800b808:	429c      	cmp	r4, r3
 800b80a:	d10f      	bne.n	800b82c <__swsetup_r+0x3c>
 800b80c:	686c      	ldr	r4, [r5, #4]
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b814:	0719      	lsls	r1, r3, #28
 800b816:	d42c      	bmi.n	800b872 <__swsetup_r+0x82>
 800b818:	06dd      	lsls	r5, r3, #27
 800b81a:	d411      	bmi.n	800b840 <__swsetup_r+0x50>
 800b81c:	2309      	movs	r3, #9
 800b81e:	6033      	str	r3, [r6, #0]
 800b820:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b824:	81a3      	strh	r3, [r4, #12]
 800b826:	f04f 30ff 	mov.w	r0, #4294967295
 800b82a:	e03e      	b.n	800b8aa <__swsetup_r+0xba>
 800b82c:	4b25      	ldr	r3, [pc, #148]	; (800b8c4 <__swsetup_r+0xd4>)
 800b82e:	429c      	cmp	r4, r3
 800b830:	d101      	bne.n	800b836 <__swsetup_r+0x46>
 800b832:	68ac      	ldr	r4, [r5, #8]
 800b834:	e7eb      	b.n	800b80e <__swsetup_r+0x1e>
 800b836:	4b24      	ldr	r3, [pc, #144]	; (800b8c8 <__swsetup_r+0xd8>)
 800b838:	429c      	cmp	r4, r3
 800b83a:	bf08      	it	eq
 800b83c:	68ec      	ldreq	r4, [r5, #12]
 800b83e:	e7e6      	b.n	800b80e <__swsetup_r+0x1e>
 800b840:	0758      	lsls	r0, r3, #29
 800b842:	d512      	bpl.n	800b86a <__swsetup_r+0x7a>
 800b844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b846:	b141      	cbz	r1, 800b85a <__swsetup_r+0x6a>
 800b848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b84c:	4299      	cmp	r1, r3
 800b84e:	d002      	beq.n	800b856 <__swsetup_r+0x66>
 800b850:	4630      	mov	r0, r6
 800b852:	f7ff fb8b 	bl	800af6c <_free_r>
 800b856:	2300      	movs	r3, #0
 800b858:	6363      	str	r3, [r4, #52]	; 0x34
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b860:	81a3      	strh	r3, [r4, #12]
 800b862:	2300      	movs	r3, #0
 800b864:	6063      	str	r3, [r4, #4]
 800b866:	6923      	ldr	r3, [r4, #16]
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	f043 0308 	orr.w	r3, r3, #8
 800b870:	81a3      	strh	r3, [r4, #12]
 800b872:	6923      	ldr	r3, [r4, #16]
 800b874:	b94b      	cbnz	r3, 800b88a <__swsetup_r+0x9a>
 800b876:	89a3      	ldrh	r3, [r4, #12]
 800b878:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b87c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b880:	d003      	beq.n	800b88a <__swsetup_r+0x9a>
 800b882:	4621      	mov	r1, r4
 800b884:	4630      	mov	r0, r6
 800b886:	f000 f959 	bl	800bb3c <__smakebuf_r>
 800b88a:	89a0      	ldrh	r0, [r4, #12]
 800b88c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b890:	f010 0301 	ands.w	r3, r0, #1
 800b894:	d00a      	beq.n	800b8ac <__swsetup_r+0xbc>
 800b896:	2300      	movs	r3, #0
 800b898:	60a3      	str	r3, [r4, #8]
 800b89a:	6963      	ldr	r3, [r4, #20]
 800b89c:	425b      	negs	r3, r3
 800b89e:	61a3      	str	r3, [r4, #24]
 800b8a0:	6923      	ldr	r3, [r4, #16]
 800b8a2:	b943      	cbnz	r3, 800b8b6 <__swsetup_r+0xc6>
 800b8a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8a8:	d1ba      	bne.n	800b820 <__swsetup_r+0x30>
 800b8aa:	bd70      	pop	{r4, r5, r6, pc}
 800b8ac:	0781      	lsls	r1, r0, #30
 800b8ae:	bf58      	it	pl
 800b8b0:	6963      	ldrpl	r3, [r4, #20]
 800b8b2:	60a3      	str	r3, [r4, #8]
 800b8b4:	e7f4      	b.n	800b8a0 <__swsetup_r+0xb0>
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	e7f7      	b.n	800b8aa <__swsetup_r+0xba>
 800b8ba:	bf00      	nop
 800b8bc:	2000000c 	.word	0x2000000c
 800b8c0:	0801f058 	.word	0x0801f058
 800b8c4:	0801f078 	.word	0x0801f078
 800b8c8:	0801f038 	.word	0x0801f038

0800b8cc <__assert_func>:
 800b8cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8ce:	4614      	mov	r4, r2
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	4b09      	ldr	r3, [pc, #36]	; (800b8f8 <__assert_func+0x2c>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	68d8      	ldr	r0, [r3, #12]
 800b8da:	b14c      	cbz	r4, 800b8f0 <__assert_func+0x24>
 800b8dc:	4b07      	ldr	r3, [pc, #28]	; (800b8fc <__assert_func+0x30>)
 800b8de:	9100      	str	r1, [sp, #0]
 800b8e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8e4:	4906      	ldr	r1, [pc, #24]	; (800b900 <__assert_func+0x34>)
 800b8e6:	462b      	mov	r3, r5
 800b8e8:	f000 f8e0 	bl	800baac <fiprintf>
 800b8ec:	f000 f9c4 	bl	800bc78 <abort>
 800b8f0:	4b04      	ldr	r3, [pc, #16]	; (800b904 <__assert_func+0x38>)
 800b8f2:	461c      	mov	r4, r3
 800b8f4:	e7f3      	b.n	800b8de <__assert_func+0x12>
 800b8f6:	bf00      	nop
 800b8f8:	2000000c 	.word	0x2000000c
 800b8fc:	0801f285 	.word	0x0801f285
 800b900:	0801f292 	.word	0x0801f292
 800b904:	0801f2c0 	.word	0x0801f2c0

0800b908 <_close_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4d06      	ldr	r5, [pc, #24]	; (800b924 <_close_r+0x1c>)
 800b90c:	2300      	movs	r3, #0
 800b90e:	4604      	mov	r4, r0
 800b910:	4608      	mov	r0, r1
 800b912:	602b      	str	r3, [r5, #0]
 800b914:	f7f5 ff03 	bl	800171e <_close>
 800b918:	1c43      	adds	r3, r0, #1
 800b91a:	d102      	bne.n	800b922 <_close_r+0x1a>
 800b91c:	682b      	ldr	r3, [r5, #0]
 800b91e:	b103      	cbz	r3, 800b922 <_close_r+0x1a>
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	bd38      	pop	{r3, r4, r5, pc}
 800b924:	20002370 	.word	0x20002370

0800b928 <__sflush_r>:
 800b928:	898a      	ldrh	r2, [r1, #12]
 800b92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b92e:	4605      	mov	r5, r0
 800b930:	0710      	lsls	r0, r2, #28
 800b932:	460c      	mov	r4, r1
 800b934:	d458      	bmi.n	800b9e8 <__sflush_r+0xc0>
 800b936:	684b      	ldr	r3, [r1, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	dc05      	bgt.n	800b948 <__sflush_r+0x20>
 800b93c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b93e:	2b00      	cmp	r3, #0
 800b940:	dc02      	bgt.n	800b948 <__sflush_r+0x20>
 800b942:	2000      	movs	r0, #0
 800b944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b94a:	2e00      	cmp	r6, #0
 800b94c:	d0f9      	beq.n	800b942 <__sflush_r+0x1a>
 800b94e:	2300      	movs	r3, #0
 800b950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b954:	682f      	ldr	r7, [r5, #0]
 800b956:	602b      	str	r3, [r5, #0]
 800b958:	d032      	beq.n	800b9c0 <__sflush_r+0x98>
 800b95a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b95c:	89a3      	ldrh	r3, [r4, #12]
 800b95e:	075a      	lsls	r2, r3, #29
 800b960:	d505      	bpl.n	800b96e <__sflush_r+0x46>
 800b962:	6863      	ldr	r3, [r4, #4]
 800b964:	1ac0      	subs	r0, r0, r3
 800b966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b968:	b10b      	cbz	r3, 800b96e <__sflush_r+0x46>
 800b96a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b96c:	1ac0      	subs	r0, r0, r3
 800b96e:	2300      	movs	r3, #0
 800b970:	4602      	mov	r2, r0
 800b972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b974:	6a21      	ldr	r1, [r4, #32]
 800b976:	4628      	mov	r0, r5
 800b978:	47b0      	blx	r6
 800b97a:	1c43      	adds	r3, r0, #1
 800b97c:	89a3      	ldrh	r3, [r4, #12]
 800b97e:	d106      	bne.n	800b98e <__sflush_r+0x66>
 800b980:	6829      	ldr	r1, [r5, #0]
 800b982:	291d      	cmp	r1, #29
 800b984:	d82c      	bhi.n	800b9e0 <__sflush_r+0xb8>
 800b986:	4a2a      	ldr	r2, [pc, #168]	; (800ba30 <__sflush_r+0x108>)
 800b988:	40ca      	lsrs	r2, r1
 800b98a:	07d6      	lsls	r6, r2, #31
 800b98c:	d528      	bpl.n	800b9e0 <__sflush_r+0xb8>
 800b98e:	2200      	movs	r2, #0
 800b990:	6062      	str	r2, [r4, #4]
 800b992:	04d9      	lsls	r1, r3, #19
 800b994:	6922      	ldr	r2, [r4, #16]
 800b996:	6022      	str	r2, [r4, #0]
 800b998:	d504      	bpl.n	800b9a4 <__sflush_r+0x7c>
 800b99a:	1c42      	adds	r2, r0, #1
 800b99c:	d101      	bne.n	800b9a2 <__sflush_r+0x7a>
 800b99e:	682b      	ldr	r3, [r5, #0]
 800b9a0:	b903      	cbnz	r3, 800b9a4 <__sflush_r+0x7c>
 800b9a2:	6560      	str	r0, [r4, #84]	; 0x54
 800b9a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9a6:	602f      	str	r7, [r5, #0]
 800b9a8:	2900      	cmp	r1, #0
 800b9aa:	d0ca      	beq.n	800b942 <__sflush_r+0x1a>
 800b9ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9b0:	4299      	cmp	r1, r3
 800b9b2:	d002      	beq.n	800b9ba <__sflush_r+0x92>
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	f7ff fad9 	bl	800af6c <_free_r>
 800b9ba:	2000      	movs	r0, #0
 800b9bc:	6360      	str	r0, [r4, #52]	; 0x34
 800b9be:	e7c1      	b.n	800b944 <__sflush_r+0x1c>
 800b9c0:	6a21      	ldr	r1, [r4, #32]
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	47b0      	blx	r6
 800b9c8:	1c41      	adds	r1, r0, #1
 800b9ca:	d1c7      	bne.n	800b95c <__sflush_r+0x34>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d0c4      	beq.n	800b95c <__sflush_r+0x34>
 800b9d2:	2b1d      	cmp	r3, #29
 800b9d4:	d001      	beq.n	800b9da <__sflush_r+0xb2>
 800b9d6:	2b16      	cmp	r3, #22
 800b9d8:	d101      	bne.n	800b9de <__sflush_r+0xb6>
 800b9da:	602f      	str	r7, [r5, #0]
 800b9dc:	e7b1      	b.n	800b942 <__sflush_r+0x1a>
 800b9de:	89a3      	ldrh	r3, [r4, #12]
 800b9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9e4:	81a3      	strh	r3, [r4, #12]
 800b9e6:	e7ad      	b.n	800b944 <__sflush_r+0x1c>
 800b9e8:	690f      	ldr	r7, [r1, #16]
 800b9ea:	2f00      	cmp	r7, #0
 800b9ec:	d0a9      	beq.n	800b942 <__sflush_r+0x1a>
 800b9ee:	0793      	lsls	r3, r2, #30
 800b9f0:	680e      	ldr	r6, [r1, #0]
 800b9f2:	bf08      	it	eq
 800b9f4:	694b      	ldreq	r3, [r1, #20]
 800b9f6:	600f      	str	r7, [r1, #0]
 800b9f8:	bf18      	it	ne
 800b9fa:	2300      	movne	r3, #0
 800b9fc:	eba6 0807 	sub.w	r8, r6, r7
 800ba00:	608b      	str	r3, [r1, #8]
 800ba02:	f1b8 0f00 	cmp.w	r8, #0
 800ba06:	dd9c      	ble.n	800b942 <__sflush_r+0x1a>
 800ba08:	6a21      	ldr	r1, [r4, #32]
 800ba0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba0c:	4643      	mov	r3, r8
 800ba0e:	463a      	mov	r2, r7
 800ba10:	4628      	mov	r0, r5
 800ba12:	47b0      	blx	r6
 800ba14:	2800      	cmp	r0, #0
 800ba16:	dc06      	bgt.n	800ba26 <__sflush_r+0xfe>
 800ba18:	89a3      	ldrh	r3, [r4, #12]
 800ba1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba1e:	81a3      	strh	r3, [r4, #12]
 800ba20:	f04f 30ff 	mov.w	r0, #4294967295
 800ba24:	e78e      	b.n	800b944 <__sflush_r+0x1c>
 800ba26:	4407      	add	r7, r0
 800ba28:	eba8 0800 	sub.w	r8, r8, r0
 800ba2c:	e7e9      	b.n	800ba02 <__sflush_r+0xda>
 800ba2e:	bf00      	nop
 800ba30:	20400001 	.word	0x20400001

0800ba34 <_fflush_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	690b      	ldr	r3, [r1, #16]
 800ba38:	4605      	mov	r5, r0
 800ba3a:	460c      	mov	r4, r1
 800ba3c:	b913      	cbnz	r3, 800ba44 <_fflush_r+0x10>
 800ba3e:	2500      	movs	r5, #0
 800ba40:	4628      	mov	r0, r5
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	b118      	cbz	r0, 800ba4e <_fflush_r+0x1a>
 800ba46:	6983      	ldr	r3, [r0, #24]
 800ba48:	b90b      	cbnz	r3, 800ba4e <_fflush_r+0x1a>
 800ba4a:	f7fe f989 	bl	8009d60 <__sinit>
 800ba4e:	4b14      	ldr	r3, [pc, #80]	; (800baa0 <_fflush_r+0x6c>)
 800ba50:	429c      	cmp	r4, r3
 800ba52:	d11b      	bne.n	800ba8c <_fflush_r+0x58>
 800ba54:	686c      	ldr	r4, [r5, #4]
 800ba56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d0ef      	beq.n	800ba3e <_fflush_r+0xa>
 800ba5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba60:	07d0      	lsls	r0, r2, #31
 800ba62:	d404      	bmi.n	800ba6e <_fflush_r+0x3a>
 800ba64:	0599      	lsls	r1, r3, #22
 800ba66:	d402      	bmi.n	800ba6e <_fflush_r+0x3a>
 800ba68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba6a:	f7fe fd8a 	bl	800a582 <__retarget_lock_acquire_recursive>
 800ba6e:	4628      	mov	r0, r5
 800ba70:	4621      	mov	r1, r4
 800ba72:	f7ff ff59 	bl	800b928 <__sflush_r>
 800ba76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba78:	07da      	lsls	r2, r3, #31
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	d4e0      	bmi.n	800ba40 <_fflush_r+0xc>
 800ba7e:	89a3      	ldrh	r3, [r4, #12]
 800ba80:	059b      	lsls	r3, r3, #22
 800ba82:	d4dd      	bmi.n	800ba40 <_fflush_r+0xc>
 800ba84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba86:	f7fe fd7d 	bl	800a584 <__retarget_lock_release_recursive>
 800ba8a:	e7d9      	b.n	800ba40 <_fflush_r+0xc>
 800ba8c:	4b05      	ldr	r3, [pc, #20]	; (800baa4 <_fflush_r+0x70>)
 800ba8e:	429c      	cmp	r4, r3
 800ba90:	d101      	bne.n	800ba96 <_fflush_r+0x62>
 800ba92:	68ac      	ldr	r4, [r5, #8]
 800ba94:	e7df      	b.n	800ba56 <_fflush_r+0x22>
 800ba96:	4b04      	ldr	r3, [pc, #16]	; (800baa8 <_fflush_r+0x74>)
 800ba98:	429c      	cmp	r4, r3
 800ba9a:	bf08      	it	eq
 800ba9c:	68ec      	ldreq	r4, [r5, #12]
 800ba9e:	e7da      	b.n	800ba56 <_fflush_r+0x22>
 800baa0:	0801f058 	.word	0x0801f058
 800baa4:	0801f078 	.word	0x0801f078
 800baa8:	0801f038 	.word	0x0801f038

0800baac <fiprintf>:
 800baac:	b40e      	push	{r1, r2, r3}
 800baae:	b503      	push	{r0, r1, lr}
 800bab0:	4601      	mov	r1, r0
 800bab2:	ab03      	add	r3, sp, #12
 800bab4:	4805      	ldr	r0, [pc, #20]	; (800bacc <fiprintf+0x20>)
 800bab6:	f853 2b04 	ldr.w	r2, [r3], #4
 800baba:	6800      	ldr	r0, [r0, #0]
 800babc:	9301      	str	r3, [sp, #4]
 800babe:	f7ff fc85 	bl	800b3cc <_vfiprintf_r>
 800bac2:	b002      	add	sp, #8
 800bac4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bac8:	b003      	add	sp, #12
 800baca:	4770      	bx	lr
 800bacc:	2000000c 	.word	0x2000000c

0800bad0 <_lseek_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4d07      	ldr	r5, [pc, #28]	; (800baf0 <_lseek_r+0x20>)
 800bad4:	4604      	mov	r4, r0
 800bad6:	4608      	mov	r0, r1
 800bad8:	4611      	mov	r1, r2
 800bada:	2200      	movs	r2, #0
 800badc:	602a      	str	r2, [r5, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	f7f5 fe44 	bl	800176c <_lseek>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d102      	bne.n	800baee <_lseek_r+0x1e>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b103      	cbz	r3, 800baee <_lseek_r+0x1e>
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	bd38      	pop	{r3, r4, r5, pc}
 800baf0:	20002370 	.word	0x20002370

0800baf4 <__swhatbuf_r>:
 800baf4:	b570      	push	{r4, r5, r6, lr}
 800baf6:	460e      	mov	r6, r1
 800baf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bafc:	2900      	cmp	r1, #0
 800bafe:	b096      	sub	sp, #88	; 0x58
 800bb00:	4614      	mov	r4, r2
 800bb02:	461d      	mov	r5, r3
 800bb04:	da07      	bge.n	800bb16 <__swhatbuf_r+0x22>
 800bb06:	2300      	movs	r3, #0
 800bb08:	602b      	str	r3, [r5, #0]
 800bb0a:	89b3      	ldrh	r3, [r6, #12]
 800bb0c:	061a      	lsls	r2, r3, #24
 800bb0e:	d410      	bmi.n	800bb32 <__swhatbuf_r+0x3e>
 800bb10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb14:	e00e      	b.n	800bb34 <__swhatbuf_r+0x40>
 800bb16:	466a      	mov	r2, sp
 800bb18:	f000 f8b6 	bl	800bc88 <_fstat_r>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	dbf2      	blt.n	800bb06 <__swhatbuf_r+0x12>
 800bb20:	9a01      	ldr	r2, [sp, #4]
 800bb22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb2a:	425a      	negs	r2, r3
 800bb2c:	415a      	adcs	r2, r3
 800bb2e:	602a      	str	r2, [r5, #0]
 800bb30:	e7ee      	b.n	800bb10 <__swhatbuf_r+0x1c>
 800bb32:	2340      	movs	r3, #64	; 0x40
 800bb34:	2000      	movs	r0, #0
 800bb36:	6023      	str	r3, [r4, #0]
 800bb38:	b016      	add	sp, #88	; 0x58
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}

0800bb3c <__smakebuf_r>:
 800bb3c:	898b      	ldrh	r3, [r1, #12]
 800bb3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb40:	079d      	lsls	r5, r3, #30
 800bb42:	4606      	mov	r6, r0
 800bb44:	460c      	mov	r4, r1
 800bb46:	d507      	bpl.n	800bb58 <__smakebuf_r+0x1c>
 800bb48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	6123      	str	r3, [r4, #16]
 800bb50:	2301      	movs	r3, #1
 800bb52:	6163      	str	r3, [r4, #20]
 800bb54:	b002      	add	sp, #8
 800bb56:	bd70      	pop	{r4, r5, r6, pc}
 800bb58:	ab01      	add	r3, sp, #4
 800bb5a:	466a      	mov	r2, sp
 800bb5c:	f7ff ffca 	bl	800baf4 <__swhatbuf_r>
 800bb60:	9900      	ldr	r1, [sp, #0]
 800bb62:	4605      	mov	r5, r0
 800bb64:	4630      	mov	r0, r6
 800bb66:	f7ff fa51 	bl	800b00c <_malloc_r>
 800bb6a:	b948      	cbnz	r0, 800bb80 <__smakebuf_r+0x44>
 800bb6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb70:	059a      	lsls	r2, r3, #22
 800bb72:	d4ef      	bmi.n	800bb54 <__smakebuf_r+0x18>
 800bb74:	f023 0303 	bic.w	r3, r3, #3
 800bb78:	f043 0302 	orr.w	r3, r3, #2
 800bb7c:	81a3      	strh	r3, [r4, #12]
 800bb7e:	e7e3      	b.n	800bb48 <__smakebuf_r+0xc>
 800bb80:	4b0d      	ldr	r3, [pc, #52]	; (800bbb8 <__smakebuf_r+0x7c>)
 800bb82:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	6020      	str	r0, [r4, #0]
 800bb88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb8c:	81a3      	strh	r3, [r4, #12]
 800bb8e:	9b00      	ldr	r3, [sp, #0]
 800bb90:	6163      	str	r3, [r4, #20]
 800bb92:	9b01      	ldr	r3, [sp, #4]
 800bb94:	6120      	str	r0, [r4, #16]
 800bb96:	b15b      	cbz	r3, 800bbb0 <__smakebuf_r+0x74>
 800bb98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f000 f885 	bl	800bcac <_isatty_r>
 800bba2:	b128      	cbz	r0, 800bbb0 <__smakebuf_r+0x74>
 800bba4:	89a3      	ldrh	r3, [r4, #12]
 800bba6:	f023 0303 	bic.w	r3, r3, #3
 800bbaa:	f043 0301 	orr.w	r3, r3, #1
 800bbae:	81a3      	strh	r3, [r4, #12]
 800bbb0:	89a0      	ldrh	r0, [r4, #12]
 800bbb2:	4305      	orrs	r5, r0
 800bbb4:	81a5      	strh	r5, [r4, #12]
 800bbb6:	e7cd      	b.n	800bb54 <__smakebuf_r+0x18>
 800bbb8:	08009cf9 	.word	0x08009cf9

0800bbbc <memmove>:
 800bbbc:	4288      	cmp	r0, r1
 800bbbe:	b510      	push	{r4, lr}
 800bbc0:	eb01 0402 	add.w	r4, r1, r2
 800bbc4:	d902      	bls.n	800bbcc <memmove+0x10>
 800bbc6:	4284      	cmp	r4, r0
 800bbc8:	4623      	mov	r3, r4
 800bbca:	d807      	bhi.n	800bbdc <memmove+0x20>
 800bbcc:	1e43      	subs	r3, r0, #1
 800bbce:	42a1      	cmp	r1, r4
 800bbd0:	d008      	beq.n	800bbe4 <memmove+0x28>
 800bbd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbda:	e7f8      	b.n	800bbce <memmove+0x12>
 800bbdc:	4402      	add	r2, r0
 800bbde:	4601      	mov	r1, r0
 800bbe0:	428a      	cmp	r2, r1
 800bbe2:	d100      	bne.n	800bbe6 <memmove+0x2a>
 800bbe4:	bd10      	pop	{r4, pc}
 800bbe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbee:	e7f7      	b.n	800bbe0 <memmove+0x24>

0800bbf0 <__malloc_lock>:
 800bbf0:	4801      	ldr	r0, [pc, #4]	; (800bbf8 <__malloc_lock+0x8>)
 800bbf2:	f7fe bcc6 	b.w	800a582 <__retarget_lock_acquire_recursive>
 800bbf6:	bf00      	nop
 800bbf8:	20002368 	.word	0x20002368

0800bbfc <__malloc_unlock>:
 800bbfc:	4801      	ldr	r0, [pc, #4]	; (800bc04 <__malloc_unlock+0x8>)
 800bbfe:	f7fe bcc1 	b.w	800a584 <__retarget_lock_release_recursive>
 800bc02:	bf00      	nop
 800bc04:	20002368 	.word	0x20002368

0800bc08 <_realloc_r>:
 800bc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0a:	4607      	mov	r7, r0
 800bc0c:	4614      	mov	r4, r2
 800bc0e:	460e      	mov	r6, r1
 800bc10:	b921      	cbnz	r1, 800bc1c <_realloc_r+0x14>
 800bc12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc16:	4611      	mov	r1, r2
 800bc18:	f7ff b9f8 	b.w	800b00c <_malloc_r>
 800bc1c:	b922      	cbnz	r2, 800bc28 <_realloc_r+0x20>
 800bc1e:	f7ff f9a5 	bl	800af6c <_free_r>
 800bc22:	4625      	mov	r5, r4
 800bc24:	4628      	mov	r0, r5
 800bc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc28:	f000 f850 	bl	800bccc <_malloc_usable_size_r>
 800bc2c:	42a0      	cmp	r0, r4
 800bc2e:	d20f      	bcs.n	800bc50 <_realloc_r+0x48>
 800bc30:	4621      	mov	r1, r4
 800bc32:	4638      	mov	r0, r7
 800bc34:	f7ff f9ea 	bl	800b00c <_malloc_r>
 800bc38:	4605      	mov	r5, r0
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d0f2      	beq.n	800bc24 <_realloc_r+0x1c>
 800bc3e:	4631      	mov	r1, r6
 800bc40:	4622      	mov	r2, r4
 800bc42:	f7fe fcbb 	bl	800a5bc <memcpy>
 800bc46:	4631      	mov	r1, r6
 800bc48:	4638      	mov	r0, r7
 800bc4a:	f7ff f98f 	bl	800af6c <_free_r>
 800bc4e:	e7e9      	b.n	800bc24 <_realloc_r+0x1c>
 800bc50:	4635      	mov	r5, r6
 800bc52:	e7e7      	b.n	800bc24 <_realloc_r+0x1c>

0800bc54 <_read_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4d07      	ldr	r5, [pc, #28]	; (800bc74 <_read_r+0x20>)
 800bc58:	4604      	mov	r4, r0
 800bc5a:	4608      	mov	r0, r1
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	2200      	movs	r2, #0
 800bc60:	602a      	str	r2, [r5, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	f7f5 fd22 	bl	80016ac <_read>
 800bc68:	1c43      	adds	r3, r0, #1
 800bc6a:	d102      	bne.n	800bc72 <_read_r+0x1e>
 800bc6c:	682b      	ldr	r3, [r5, #0]
 800bc6e:	b103      	cbz	r3, 800bc72 <_read_r+0x1e>
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	bd38      	pop	{r3, r4, r5, pc}
 800bc74:	20002370 	.word	0x20002370

0800bc78 <abort>:
 800bc78:	b508      	push	{r3, lr}
 800bc7a:	2006      	movs	r0, #6
 800bc7c:	f000 f856 	bl	800bd2c <raise>
 800bc80:	2001      	movs	r0, #1
 800bc82:	f7f5 fd09 	bl	8001698 <_exit>
	...

0800bc88 <_fstat_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d07      	ldr	r5, [pc, #28]	; (800bca8 <_fstat_r+0x20>)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4604      	mov	r4, r0
 800bc90:	4608      	mov	r0, r1
 800bc92:	4611      	mov	r1, r2
 800bc94:	602b      	str	r3, [r5, #0]
 800bc96:	f7f5 fd4e 	bl	8001736 <_fstat>
 800bc9a:	1c43      	adds	r3, r0, #1
 800bc9c:	d102      	bne.n	800bca4 <_fstat_r+0x1c>
 800bc9e:	682b      	ldr	r3, [r5, #0]
 800bca0:	b103      	cbz	r3, 800bca4 <_fstat_r+0x1c>
 800bca2:	6023      	str	r3, [r4, #0]
 800bca4:	bd38      	pop	{r3, r4, r5, pc}
 800bca6:	bf00      	nop
 800bca8:	20002370 	.word	0x20002370

0800bcac <_isatty_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d06      	ldr	r5, [pc, #24]	; (800bcc8 <_isatty_r+0x1c>)
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	602b      	str	r3, [r5, #0]
 800bcb8:	f7f5 fd4d 	bl	8001756 <_isatty>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_isatty_r+0x1a>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_isatty_r+0x1a>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	20002370 	.word	0x20002370

0800bccc <_malloc_usable_size_r>:
 800bccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcd0:	1f18      	subs	r0, r3, #4
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	bfbc      	itt	lt
 800bcd6:	580b      	ldrlt	r3, [r1, r0]
 800bcd8:	18c0      	addlt	r0, r0, r3
 800bcda:	4770      	bx	lr

0800bcdc <_raise_r>:
 800bcdc:	291f      	cmp	r1, #31
 800bcde:	b538      	push	{r3, r4, r5, lr}
 800bce0:	4604      	mov	r4, r0
 800bce2:	460d      	mov	r5, r1
 800bce4:	d904      	bls.n	800bcf0 <_raise_r+0x14>
 800bce6:	2316      	movs	r3, #22
 800bce8:	6003      	str	r3, [r0, #0]
 800bcea:	f04f 30ff 	mov.w	r0, #4294967295
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcf2:	b112      	cbz	r2, 800bcfa <_raise_r+0x1e>
 800bcf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcf8:	b94b      	cbnz	r3, 800bd0e <_raise_r+0x32>
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 f830 	bl	800bd60 <_getpid_r>
 800bd00:	462a      	mov	r2, r5
 800bd02:	4601      	mov	r1, r0
 800bd04:	4620      	mov	r0, r4
 800bd06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd0a:	f000 b817 	b.w	800bd3c <_kill_r>
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d00a      	beq.n	800bd28 <_raise_r+0x4c>
 800bd12:	1c59      	adds	r1, r3, #1
 800bd14:	d103      	bne.n	800bd1e <_raise_r+0x42>
 800bd16:	2316      	movs	r3, #22
 800bd18:	6003      	str	r3, [r0, #0]
 800bd1a:	2001      	movs	r0, #1
 800bd1c:	e7e7      	b.n	800bcee <_raise_r+0x12>
 800bd1e:	2400      	movs	r4, #0
 800bd20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd24:	4628      	mov	r0, r5
 800bd26:	4798      	blx	r3
 800bd28:	2000      	movs	r0, #0
 800bd2a:	e7e0      	b.n	800bcee <_raise_r+0x12>

0800bd2c <raise>:
 800bd2c:	4b02      	ldr	r3, [pc, #8]	; (800bd38 <raise+0xc>)
 800bd2e:	4601      	mov	r1, r0
 800bd30:	6818      	ldr	r0, [r3, #0]
 800bd32:	f7ff bfd3 	b.w	800bcdc <_raise_r>
 800bd36:	bf00      	nop
 800bd38:	2000000c 	.word	0x2000000c

0800bd3c <_kill_r>:
 800bd3c:	b538      	push	{r3, r4, r5, lr}
 800bd3e:	4d07      	ldr	r5, [pc, #28]	; (800bd5c <_kill_r+0x20>)
 800bd40:	2300      	movs	r3, #0
 800bd42:	4604      	mov	r4, r0
 800bd44:	4608      	mov	r0, r1
 800bd46:	4611      	mov	r1, r2
 800bd48:	602b      	str	r3, [r5, #0]
 800bd4a:	f7f5 fc95 	bl	8001678 <_kill>
 800bd4e:	1c43      	adds	r3, r0, #1
 800bd50:	d102      	bne.n	800bd58 <_kill_r+0x1c>
 800bd52:	682b      	ldr	r3, [r5, #0]
 800bd54:	b103      	cbz	r3, 800bd58 <_kill_r+0x1c>
 800bd56:	6023      	str	r3, [r4, #0]
 800bd58:	bd38      	pop	{r3, r4, r5, pc}
 800bd5a:	bf00      	nop
 800bd5c:	20002370 	.word	0x20002370

0800bd60 <_getpid_r>:
 800bd60:	f7f5 bc82 	b.w	8001668 <_getpid>

0800bd64 <sqrtf>:
 800bd64:	b508      	push	{r3, lr}
 800bd66:	ed2d 8b02 	vpush	{d8}
 800bd6a:	eeb0 8a40 	vmov.f32	s16, s0
 800bd6e:	f000 f81f 	bl	800bdb0 <__ieee754_sqrtf>
 800bd72:	4b0d      	ldr	r3, [pc, #52]	; (800bda8 <sqrtf+0x44>)
 800bd74:	f993 3000 	ldrsb.w	r3, [r3]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	d011      	beq.n	800bda0 <sqrtf+0x3c>
 800bd7c:	eeb4 8a48 	vcmp.f32	s16, s16
 800bd80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd84:	d60c      	bvs.n	800bda0 <sqrtf+0x3c>
 800bd86:	eddf 8a09 	vldr	s17, [pc, #36]	; 800bdac <sqrtf+0x48>
 800bd8a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd92:	d505      	bpl.n	800bda0 <sqrtf+0x3c>
 800bd94:	f7fb fb76 	bl	8007484 <__errno>
 800bd98:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bd9c:	2321      	movs	r3, #33	; 0x21
 800bd9e:	6003      	str	r3, [r0, #0]
 800bda0:	ecbd 8b02 	vpop	{d8}
 800bda4:	bd08      	pop	{r3, pc}
 800bda6:	bf00      	nop
 800bda8:	200001e0 	.word	0x200001e0
 800bdac:	00000000 	.word	0x00000000

0800bdb0 <__ieee754_sqrtf>:
 800bdb0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bdb4:	4770      	bx	lr
	...

0800bdb8 <_init>:
 800bdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdba:	bf00      	nop
 800bdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdbe:	bc08      	pop	{r3}
 800bdc0:	469e      	mov	lr, r3
 800bdc2:	4770      	bx	lr

0800bdc4 <_fini>:
 800bdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc6:	bf00      	nop
 800bdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdca:	bc08      	pop	{r3}
 800bdcc:	469e      	mov	lr, r3
 800bdce:	4770      	bx	lr
